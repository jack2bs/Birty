
AdafruitDistTest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00003048  000030dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003048  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b5  008001b6  008001b6  00003192  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000031f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000828  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000098d0  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e3a  00000000  00000000  0000d328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005b1d  00000000  00000000  00010162  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001860  00000000  00000000  00015c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032d8  00000000  00000000  000174e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000068ce  00000000  00000000  0001a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001128  00000000  00000000  00021086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_7>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_9>
      28:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__vector_10>
      2c:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__vector_11>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_17>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_21>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 97 10 	jmp	0x212e	; 0x212e <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__vector_27>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_32>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__vector_36>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	55 07       	cpc	r21, r21
      ae:	11 08       	sbc	r1, r1
      b0:	11 08       	sbc	r1, r1
      b2:	11 08       	sbc	r1, r1
      b4:	11 08       	sbc	r1, r1
      b6:	11 08       	sbc	r1, r1
      b8:	11 08       	sbc	r1, r1
      ba:	11 08       	sbc	r1, r1
      bc:	55 07       	cpc	r21, r21
      be:	11 08       	sbc	r1, r1
      c0:	11 08       	sbc	r1, r1
      c2:	11 08       	sbc	r1, r1
      c4:	11 08       	sbc	r1, r1
      c6:	11 08       	sbc	r1, r1
      c8:	11 08       	sbc	r1, r1
      ca:	11 08       	sbc	r1, r1
      cc:	6b 07       	cpc	r22, r27
      ce:	11 08       	sbc	r1, r1
      d0:	11 08       	sbc	r1, r1
      d2:	11 08       	sbc	r1, r1
      d4:	11 08       	sbc	r1, r1
      d6:	11 08       	sbc	r1, r1
      d8:	11 08       	sbc	r1, r1
      da:	11 08       	sbc	r1, r1
      dc:	7d 07       	cpc	r23, r29
      de:	11 08       	sbc	r1, r1
      e0:	11 08       	sbc	r1, r1
      e2:	11 08       	sbc	r1, r1
      e4:	11 08       	sbc	r1, r1
      e6:	11 08       	sbc	r1, r1
      e8:	11 08       	sbc	r1, r1
      ea:	11 08       	sbc	r1, r1
      ec:	85 07       	cpc	r24, r21
      ee:	11 08       	sbc	r1, r1
      f0:	11 08       	sbc	r1, r1
      f2:	11 08       	sbc	r1, r1
      f4:	11 08       	sbc	r1, r1
      f6:	11 08       	sbc	r1, r1
      f8:	11 08       	sbc	r1, r1
      fa:	11 08       	sbc	r1, r1
      fc:	b0 07       	cpc	r27, r16
      fe:	11 08       	sbc	r1, r1
     100:	11 08       	sbc	r1, r1
     102:	11 08       	sbc	r1, r1
     104:	11 08       	sbc	r1, r1
     106:	11 08       	sbc	r1, r1
     108:	11 08       	sbc	r1, r1
     10a:	11 08       	sbc	r1, r1
     10c:	11 08       	sbc	r1, r1
     10e:	11 08       	sbc	r1, r1
     110:	11 08       	sbc	r1, r1
     112:	11 08       	sbc	r1, r1
     114:	11 08       	sbc	r1, r1
     116:	11 08       	sbc	r1, r1
     118:	11 08       	sbc	r1, r1
     11a:	11 08       	sbc	r1, r1
     11c:	b8 07       	cpc	r27, r24
     11e:	11 08       	sbc	r1, r1
     120:	11 08       	sbc	r1, r1
     122:	11 08       	sbc	r1, r1
     124:	11 08       	sbc	r1, r1
     126:	11 08       	sbc	r1, r1
     128:	11 08       	sbc	r1, r1
     12a:	11 08       	sbc	r1, r1
     12c:	cb 07       	cpc	r28, r27
     12e:	11 08       	sbc	r1, r1
     130:	11 08       	sbc	r1, r1
     132:	11 08       	sbc	r1, r1
     134:	11 08       	sbc	r1, r1
     136:	11 08       	sbc	r1, r1
     138:	11 08       	sbc	r1, r1
     13a:	11 08       	sbc	r1, r1
     13c:	d3 07       	cpc	r29, r19
     13e:	11 08       	sbc	r1, r1
     140:	11 08       	sbc	r1, r1
     142:	11 08       	sbc	r1, r1
     144:	11 08       	sbc	r1, r1
     146:	11 08       	sbc	r1, r1
     148:	11 08       	sbc	r1, r1
     14a:	11 08       	sbc	r1, r1
     14c:	f7 07       	cpc	r31, r23
     14e:	f6 0e       	add	r15, r22
     150:	22 0f       	add	r18, r18
     152:	1e 10       	cpse	r1, r14
     154:	22 0f       	add	r18, r18
     156:	1e 10       	cpse	r1, r14
     158:	66 0f       	add	r22, r22
     15a:	8a 0f       	add	r24, r26
     15c:	1e 10       	cpse	r1, r14
     15e:	e6 0f       	add	r30, r22
     160:	f7 0f       	add	r31, r23

00000162 <ProductString>:
     162:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     172:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000180 <ManufacturerString>:
     180:	1a 03 4c 00 55 00 46 00 41 00 20 00 4c 00 69 00     ..L.U.F.A. .L.i.
     190:	62 00 72 00 61 00 72 00 79 00 00 00                 b.r.a.r.y...

0000019c <LanguageString>:
     19c:	04 03 09 04                                         ....

000001a0 <ConfigurationDescriptor>:
     1a0:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     1b0:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     1c0:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     1d0:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000001de <DeviceDescriptor>:
     1de:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     1ee:	dc 01                                               ..

000001f0 <__ctors_end>:
     1f0:	11 24       	eor	r1, r1
     1f2:	1f be       	out	0x3f, r1	; 63
     1f4:	cf ef       	ldi	r28, 0xFF	; 255
     1f6:	da e0       	ldi	r29, 0x0A	; 10
     1f8:	de bf       	out	0x3e, r29	; 62
     1fa:	cd bf       	out	0x3d, r28	; 61

000001fc <__do_copy_data>:
     1fc:	11 e0       	ldi	r17, 0x01	; 1
     1fe:	a0 e0       	ldi	r26, 0x00	; 0
     200:	b1 e0       	ldi	r27, 0x01	; 1
     202:	e8 e4       	ldi	r30, 0x48	; 72
     204:	f0 e3       	ldi	r31, 0x30	; 48
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x10>
     208:	05 90       	lpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a6 3b       	cpi	r26, 0xB6	; 182
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0xc>

00000212 <__do_clear_bss>:
     212:	26 e0       	ldi	r18, 0x06	; 6
     214:	a6 eb       	ldi	r26, 0xB6	; 182
     216:	b1 e0       	ldi	r27, 0x01	; 1
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	ab 36       	cpi	r26, 0x6B	; 107
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 49 09 	call	0x1292	; 0x1292 <main>
     226:	0c 94 22 18 	jmp	0x3044	; 0x3044 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <getLeftMotorDir>:
	if (rightOrLeft == LEFT_MOTOR_PASS)								// Return the left motor's power
	{
		return OCR1B / 100;
	}
	return -1;														// If invalid motor choice, return -1
}
     22e:	83 b1       	in	r24, 0x03	; 3
     230:	82 95       	swap	r24
     232:	8f 70       	andi	r24, 0x0F	; 15
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	89 27       	eor	r24, r25
     238:	81 70       	andi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	08 95       	ret

0000023e <getRightMotorDir>:
     23e:	83 b1       	in	r24, 0x03	; 3
     240:	82 95       	swap	r24
     242:	86 95       	lsr	r24
     244:	87 70       	andi	r24, 0x07	; 7
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	89 27       	eor	r24, r25
     24a:	81 70       	andi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	08 95       	ret

00000250 <setLeftMotorDir>:
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	39 f4       	brne	.+14     	; 0x262 <setLeftMotorDir+0x12>
     254:	2c 98       	cbi	0x05, 4	; 5
     256:	e0 e8       	ldi	r30, 0x80	; 128
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	8f 7e       	andi	r24, 0xEF	; 239
     25e:	80 83       	st	Z, r24
     260:	08 95       	ret
     262:	2c 9a       	sbi	0x05, 4	; 5
     264:	e0 e8       	ldi	r30, 0x80	; 128
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	80 61       	ori	r24, 0x10	; 16
     26c:	80 83       	st	Z, r24
     26e:	08 95       	ret

00000270 <setRightMotorDir>:
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	39 f4       	brne	.+14     	; 0x282 <setRightMotorDir+0x12>
     274:	2d 98       	cbi	0x05, 5	; 5
     276:	e0 e8       	ldi	r30, 0x80	; 128
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	8b 7f       	andi	r24, 0xFB	; 251
     27e:	80 83       	st	Z, r24
     280:	08 95       	ret
     282:	2d 9a       	sbi	0x05, 5	; 5
     284:	e0 e8       	ldi	r30, 0x80	; 128
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	84 60       	ori	r24, 0x04	; 4
     28c:	80 83       	st	Z, r24
     28e:	08 95       	ret

00000290 <setMotorDir>:
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	c8 2f       	mov	r28, r24
     296:	d6 2f       	mov	r29, r22
     298:	80 ff       	sbrs	r24, 0
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <setMotorDir+0x12>
     29c:	86 2f       	mov	r24, r22
     29e:	0e 94 38 01 	call	0x270	; 0x270 <setRightMotorDir>
     2a2:	c1 ff       	sbrs	r28, 1
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <setMotorDir+0x1c>
     2a6:	8d 2f       	mov	r24, r29
     2a8:	0e 94 28 01 	call	0x250	; 0x250 <setLeftMotorDir>
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <setLeftMotorPWR>:


// Set the left motors power as a percentage/duty cycle
void setLeftMotorPWR(uint8_t percent)
{
	OCR1B = ((uint16_t) percent) * 100;								// Set OCR1B based on percentage with 10000 as 100% and 0 as 0%
     2b2:	24 e6       	ldi	r18, 0x64	; 100
     2b4:	82 9f       	mul	r24, r18
     2b6:	c0 01       	movw	r24, r0
     2b8:	11 24       	eor	r1, r1
     2ba:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2be:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     2c2:	08 95       	ret

000002c4 <setRightMotorPWR>:
}

// Set the right motors power as a percentage/duty cycle
void setRightMotorPWR(uint8_t percent)
{
	OCR1C = ((uint16_t) percent) * 100;								// Set OCR1C based on percentage with 10000 as 100% and 0 as 0%
     2c4:	24 e6       	ldi	r18, 0x64	; 100
     2c6:	82 9f       	mul	r24, r18
     2c8:	c0 01       	movw	r24, r0
     2ca:	11 24       	eor	r1, r1
     2cc:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__DATA_REGION_ORIGIN__+0x2d>
     2d0:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__DATA_REGION_ORIGIN__+0x2c>
     2d4:	08 95       	ret

000002d6 <setMotorPWR>:
}

// Set either or both of the motors' power as a percentage/duty cycle
void setMotorPWR(uint8_t rightOrLeft, uint8_t percent)
{
	if (rightOrLeft & RIGHT_MOTOR_PASS)								// If Right motor or Both motors
     2d6:	80 ff       	sbrs	r24, 0
     2d8:	08 c0       	rjmp	.+16     	; 0x2ea <setMotorPWR+0x14>
}

// Set the right motors power as a percentage/duty cycle
void setRightMotorPWR(uint8_t percent)
{
	OCR1C = ((uint16_t) percent) * 100;								// Set OCR1C based on percentage with 10000 as 100% and 0 as 0%
     2da:	94 e6       	ldi	r25, 0x64	; 100
     2dc:	69 9f       	mul	r22, r25
     2de:	90 01       	movw	r18, r0
     2e0:	11 24       	eor	r1, r1
     2e2:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <__DATA_REGION_ORIGIN__+0x2d>
     2e6:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <__DATA_REGION_ORIGIN__+0x2c>
{
	if (rightOrLeft & RIGHT_MOTOR_PASS)								// If Right motor or Both motors
	{
		setRightMotorPWR(percent);									// Set the Right Motor PWR
	}
	if (rightOrLeft & LEFT_MOTOR_PASS)								// If Left motor or Both motors
     2ea:	81 ff       	sbrs	r24, 1
     2ec:	08 c0       	rjmp	.+16     	; 0x2fe <setMotorPWR+0x28>


// Set the left motors power as a percentage/duty cycle
void setLeftMotorPWR(uint8_t percent)
{
	OCR1B = ((uint16_t) percent) * 100;								// Set OCR1B based on percentage with 10000 as 100% and 0 as 0%
     2ee:	84 e6       	ldi	r24, 0x64	; 100
     2f0:	68 9f       	mul	r22, r24
     2f2:	b0 01       	movw	r22, r0
     2f4:	11 24       	eor	r1, r1
     2f6:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2fa:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     2fe:	08 95       	ret

00000300 <motorTimerInit>:


// Initializes DC Motor Timer
void motorTimerInit()
{
	TCCR1A |= (1<<COM1B1) | (1<<COM1C1) | (1<<WGM11) | (1<<WGM10);	// COM Bits: set on top, clear on Comp;  WGM Bits set fast PWM
     300:	e0 e8       	ldi	r30, 0x80	; 128
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	8b 62       	ori	r24, 0x2B	; 43
     308:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS30);					// CS30 enables timer without prescaler; WGM Bits set fast PWM
     30a:	e1 e8       	ldi	r30, 0x81	; 129
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	89 61       	ori	r24, 0x19	; 25
     312:	80 83       	st	Z, r24
	OCR1A = 10000;													// Sets TOP as 10000
     314:	80 e1       	ldi	r24, 0x10	; 16
     316:	97 e2       	ldi	r25, 0x27	; 39
     318:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     31c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     320:	08 95       	ret

00000322 <dcMotorInit>:
}

// Initialize the DC Motors
void dcMotorInit(void)
{
	DDRB |= (1<<DDB4) | (1<<DDB5) | (1<<DDB6) | (1<<DDB7);			// Set the motor driving pins as outputs
     322:	84 b1       	in	r24, 0x04	; 4
     324:	80 6f       	ori	r24, 0xF0	; 240
     326:	84 b9       	out	0x04, r24	; 4
	motorTimerInit();												// Initialize the motor timers
     328:	0e 94 80 01 	call	0x300	; 0x300 <motorTimerInit>
	setMotorDir(BOTH_MOTORS_PASS, DIR_FORWARD);						// Set both motors to driving forwards
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	83 e0       	ldi	r24, 0x03	; 3
     330:	0e 94 48 01 	call	0x290	; 0x290 <setMotorDir>
}

// Set the right motors power as a percentage/duty cycle
void setRightMotorPWR(uint8_t percent)
{
	OCR1C = ((uint16_t) percent) * 100;								// Set OCR1C based on percentage with 10000 as 100% and 0 as 0%
     334:	84 e3       	ldi	r24, 0x34	; 52
     336:	91 e2       	ldi	r25, 0x21	; 33
     338:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__DATA_REGION_ORIGIN__+0x2d>
     33c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__DATA_REGION_ORIGIN__+0x2c>


// Set the left motors power as a percentage/duty cycle
void setLeftMotorPWR(uint8_t percent)
{
	OCR1B = ((uint16_t) percent) * 100;								// Set OCR1B based on percentage with 10000 as 100% and 0 as 0%
     340:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     344:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     348:	08 95       	ret

0000034a <__vector_9>:
	if (rightLeft == LEFT_MOTOR_PASS)											// If the choice is Left
	{
		return getLeftDistAccurate();													// Return the left dist
	}
	return -1;																	// If the choice is invalid return -1
}
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	2f 93       	push	r18
     35a:	3f 93       	push	r19
     35c:	4f 93       	push	r20
     35e:	5f 93       	push	r21
     360:	6f 93       	push	r22
     362:	7f 93       	push	r23
     364:	8f 93       	push	r24
     366:	9f 93       	push	r25
     368:	af 93       	push	r26
     36a:	bf 93       	push	r27
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	ef 93       	push	r30
     372:	ff 93       	push	r31
     374:	c0 e0       	ldi	r28, 0x00	; 0
     376:	d0 e0       	ldi	r29, 0x00	; 0
     378:	07 eb       	ldi	r16, 0xB7	; 183
     37a:	11 e0       	ldi	r17, 0x01	; 1
     37c:	93 b1       	in	r25, 0x03	; 3
     37e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
     382:	89 27       	eor	r24, r25
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0c 2e       	mov	r0, r28
     388:	02 c0       	rjmp	.+4      	; 0x38e <__vector_9+0x44>
     38a:	95 95       	asr	r25
     38c:	87 95       	ror	r24
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <__vector_9+0x40>
     392:	80 ff       	sbrs	r24, 0
     394:	42 c0       	rjmp	.+132    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     396:	c2 30       	cpi	r28, 0x02	; 2
     398:	d1 05       	cpc	r29, r1
     39a:	04 f5       	brge	.+64     	; 0x3dc <__vector_9+0x92>
     39c:	0e 94 17 01 	call	0x22e	; 0x22e <getLeftMotorDir>
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	71 f4       	brne	.+28     	; 0x3c0 <__vector_9+0x76>
     3a4:	f8 01       	movw	r30, r16
     3a6:	84 81       	ldd	r24, Z+4	; 0x04
     3a8:	95 81       	ldd	r25, Z+5	; 0x05
     3aa:	a6 81       	ldd	r26, Z+6	; 0x06
     3ac:	b7 81       	ldd	r27, Z+7	; 0x07
     3ae:	8e 5b       	subi	r24, 0xBE	; 190
     3b0:	9a 4f       	sbci	r25, 0xFA	; 250
     3b2:	af 4f       	sbci	r26, 0xFF	; 255
     3b4:	bf 4f       	sbci	r27, 0xFF	; 255
     3b6:	84 83       	std	Z+4, r24	; 0x04
     3b8:	95 83       	std	Z+5, r25	; 0x05
     3ba:	a6 83       	std	Z+6, r26	; 0x06
     3bc:	b7 83       	std	Z+7, r27	; 0x07
     3be:	2d c0       	rjmp	.+90     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3c0:	f8 01       	movw	r30, r16
     3c2:	84 81       	ldd	r24, Z+4	; 0x04
     3c4:	95 81       	ldd	r25, Z+5	; 0x05
     3c6:	a6 81       	ldd	r26, Z+6	; 0x06
     3c8:	b7 81       	ldd	r27, Z+7	; 0x07
     3ca:	82 54       	subi	r24, 0x42	; 66
     3cc:	95 40       	sbci	r25, 0x05	; 5
     3ce:	a1 09       	sbc	r26, r1
     3d0:	b1 09       	sbc	r27, r1
     3d2:	84 83       	std	Z+4, r24	; 0x04
     3d4:	95 83       	std	Z+5, r25	; 0x05
     3d6:	a6 83       	std	Z+6, r26	; 0x06
     3d8:	b7 83       	std	Z+7, r27	; 0x07
     3da:	1f c0       	rjmp	.+62     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3dc:	0e 94 1f 01 	call	0x23e	; 0x23e <getRightMotorDir>
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	71 f4       	brne	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
     3e4:	f8 01       	movw	r30, r16
     3e6:	80 81       	ld	r24, Z
     3e8:	91 81       	ldd	r25, Z+1	; 0x01
     3ea:	a2 81       	ldd	r26, Z+2	; 0x02
     3ec:	b3 81       	ldd	r27, Z+3	; 0x03
     3ee:	8e 5b       	subi	r24, 0xBE	; 190
     3f0:	9a 4f       	sbci	r25, 0xFA	; 250
     3f2:	af 4f       	sbci	r26, 0xFF	; 255
     3f4:	bf 4f       	sbci	r27, 0xFF	; 255
     3f6:	80 83       	st	Z, r24
     3f8:	91 83       	std	Z+1, r25	; 0x01
     3fa:	a2 83       	std	Z+2, r26	; 0x02
     3fc:	b3 83       	std	Z+3, r27	; 0x03
     3fe:	0d c0       	rjmp	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     400:	f8 01       	movw	r30, r16
     402:	80 81       	ld	r24, Z
     404:	91 81       	ldd	r25, Z+1	; 0x01
     406:	a2 81       	ldd	r26, Z+2	; 0x02
     408:	b3 81       	ldd	r27, Z+3	; 0x03
     40a:	82 54       	subi	r24, 0x42	; 66
     40c:	95 40       	sbci	r25, 0x05	; 5
     40e:	a1 09       	sbc	r26, r1
     410:	b1 09       	sbc	r27, r1
     412:	80 83       	st	Z, r24
     414:	91 83       	std	Z+1, r25	; 0x01
     416:	a2 83       	std	Z+2, r26	; 0x02
     418:	b3 83       	std	Z+3, r27	; 0x03
     41a:	21 96       	adiw	r28, 0x01	; 1
     41c:	c4 30       	cpi	r28, 0x04	; 4
     41e:	d1 05       	cpc	r29, r1
     420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	ac cf       	rjmp	.-168    	; 0x37c <__vector_9+0x32>
     424:	83 b1       	in	r24, 0x03	; 3
     426:	8f 70       	andi	r24, 0x0F	; 15
     428:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end>
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	bf 91       	pop	r27
     436:	af 91       	pop	r26
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	7f 91       	pop	r23
     43e:	6f 91       	pop	r22
     440:	5f 91       	pop	r21
     442:	4f 91       	pop	r20
     444:	3f 91       	pop	r19
     446:	2f 91       	pop	r18
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <resetLeftDist>:
     456:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <g_encoders+0x4>
     45a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <g_encoders+0x5>
     45e:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <g_encoders+0x6>
     462:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <g_encoders+0x7>
     466:	08 95       	ret

00000468 <resetRightDist>:
     468:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <g_encoders>
     46c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <g_encoders+0x1>
     470:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <g_encoders+0x2>
     474:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <g_encoders+0x3>
     478:	08 95       	ret

0000047a <resetDists>:
     47a:	0e 94 2b 02 	call	0x456	; 0x456 <resetLeftDist>
     47e:	0e 94 34 02 	call	0x468	; 0x468 <resetRightDist>
     482:	08 95       	ret

00000484 <getLeftDistAccurate>:
     484:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <g_encoders+0x4>
     488:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <g_encoders+0x5>
     48c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <g_encoders+0x6>
     490:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <g_encoders+0x7>
     494:	08 95       	ret

00000496 <getRightDistAccurate>:
     496:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <g_encoders>
     49a:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <g_encoders+0x1>
     49e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <g_encoders+0x2>
     4a2:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <g_encoders+0x3>
     4a6:	08 95       	ret

000004a8 <encoderInit>:


// Initialize the encoders
void encoderInit(void)
{
	DDRB &= ~(1<<DDB0) | ~(1<<DDB1) | ~(1<<DDB2) | ~(1<<DDB3);					// Set the encoder pins to inputs
     4a8:	84 b1       	in	r24, 0x04	; 4
     4aa:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD4) | (1<<DDD5) | (1<<DDD6) | (1<<DDD7);						// Set the encoder power pins to outputs
     4ac:	8a b1       	in	r24, 0x0a	; 10
     4ae:	80 6f       	ori	r24, 0xF0	; 240
     4b0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7) | (1<<PORTD6);											// Set pins d6 and d7 high,
     4b2:	8b b1       	in	r24, 0x0b	; 11
     4b4:	80 6c       	ori	r24, 0xC0	; 192
     4b6:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD4) & ~(1<<PORTD5);										// And pins d4 and d5 low
     4b8:	8b b1       	in	r24, 0x0b	; 11
     4ba:	8f 7c       	andi	r24, 0xCF	; 207
     4bc:	8b b9       	out	0x0b, r24	; 11
	PCICR |= (1<<PCIE0);														// Enable the Pin Change interrupt
     4be:	e8 e6       	ldi	r30, 0x68	; 104
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	81 60       	ori	r24, 0x01	; 1
     4c6:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT0) | (1<<PCINT1) | (1<<PCINT2) | (1<<PCINT3);			// Enable the Pin Change interrupts on the encoder pins
     4c8:	eb e6       	ldi	r30, 0x6B	; 107
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8f 60       	ori	r24, 0x0F	; 15
     4d0:	80 83       	st	Z, r24
     4d2:	08 95       	ret

000004d4 <__vector_7>:
extern int g_diff;
int g_lastCount = 0;

// Pin E6 External interrupt
ISR(INT6_vect)
{
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	g_diff = getMillis() - g_lastCount;		// DEBUGGING Time between Distance sensor interrupts
     4f6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
     4fa:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <g_lastCount>
     4fe:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <g_lastCount+0x1>
     502:	82 1b       	sub	r24, r18
     504:	93 0b       	sbc	r25, r19
     506:	90 93 01 06 	sts	0x0601, r25	; 0x800601 <g_diff+0x1>
     50a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <g_diff>
	g_lastCount = getMillis();				// DEBUGGING Time between Distance sensor interrupts
     50e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
     512:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <g_lastCount+0x1>
     516:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <g_lastCount>
	g_VL6180XCheckFlag = 1;					// Set the flag to check the distance sensors
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <g_VL6180XCheckFlag+0x1>
     522:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <g_VL6180XCheckFlag>
}
     526:	ff 91       	pop	r31
     528:	ef 91       	pop	r30
     52a:	bf 91       	pop	r27
     52c:	af 91       	pop	r26
     52e:	9f 91       	pop	r25
     530:	8f 91       	pop	r24
     532:	7f 91       	pop	r23
     534:	6f 91       	pop	r22
     536:	5f 91       	pop	r21
     538:	4f 91       	pop	r20
     53a:	3f 91       	pop	r19
     53c:	2f 91       	pop	r18
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <I2CInstrGetFull>:
	return size;
}

// Returns true if the Buffer is full
int I2CInstrGetFull()
{
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <size>
     550:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <size+0x1>
     554:	2f 37       	cpi	r18, 0x7F	; 127
     556:	31 05       	cpc	r19, r1
     558:	11 f0       	breq	.+4      	; 0x55e <I2CInstrGetFull+0x16>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
	if (size == BUFFER_SIZE)
	{
		return 1;
	}
	return 0;
}
     55e:	08 95       	ret

00000560 <I2CInstrGetEmpty>:

// Returns true if the Buffer is empty
int I2CInstrGetEmpty()
{
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <size>
     568:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <size+0x1>
     56c:	23 2b       	or	r18, r19
     56e:	11 f0       	breq	.+4      	; 0x574 <I2CInstrGetEmpty+0x14>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
	if (size)
	{
		return 0;
	}
	return 1;
}
     574:	08 95       	ret

00000576 <moveToNextInstruction>:

// Moves to the next instruction
int moveToNextInstruction()
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
	// Clear this instructions data
	g_instructions[r_ptr].dev_index = 0;	
     57a:	c0 91 c5 01 	lds	r28, 0x01C5	; 0x8001c5 <r_ptr>
     57e:	d0 91 c6 01 	lds	r29, 0x01C6	; 0x8001c6 <r_ptr+0x1>
     582:	fe 01       	movw	r30, r28
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	e7 53       	subi	r30, 0x37	; 55
     592:	fe 4f       	sbci	r31, 0xFE	; 254
     594:	11 82       	std	Z+1, r1	; 0x01
     596:	10 82       	st	Z, r1
	g_instructions[r_ptr].readWrite = 0;
     598:	13 82       	std	Z+3, r1	; 0x03
     59a:	12 82       	std	Z+2, r1	; 0x02
	g_instructions[r_ptr].data = 0;
     59c:	15 82       	std	Z+5, r1	; 0x05
     59e:	14 82       	std	Z+4, r1	; 0x04
	g_instructions[r_ptr].length = 0;
     5a0:	17 82       	std	Z+7, r1	; 0x07
     5a2:	16 82       	std	Z+6, r1	; 0x06
	
	// If the buffer is empty don't increment the read PTR
	if (I2CInstrGetEmpty())
     5a4:	0e 94 b0 02 	call	0x560	; 0x560 <I2CInstrGetEmpty>
     5a8:	89 2b       	or	r24, r25
     5aa:	d9 f4       	brne	.+54     	; 0x5e2 <moveToNextInstruction+0x6c>
	{
		return 0;
	}
	
	// Otherwise decrement size and increment the read PTR
	size--;
     5ac:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <size>
     5b0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <size+0x1>
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <size+0x1>
     5ba:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <size>
	r_ptr++;
     5be:	21 96       	adiw	r28, 0x01	; 1
	if (r_ptr >= BUFFER_SIZE)
     5c0:	cf 37       	cpi	r28, 0x7F	; 127
     5c2:	d1 05       	cpc	r29, r1
     5c4:	3c f4       	brge	.+14     	; 0x5d4 <moveToNextInstruction+0x5e>
		return 0;
	}
	
	// Otherwise decrement size and increment the read PTR
	size--;
	r_ptr++;
     5c6:	d0 93 c6 01 	sts	0x01C6, r29	; 0x8001c6 <r_ptr+0x1>
     5ca:	c0 93 c5 01 	sts	0x01C5, r28	; 0x8001c5 <r_ptr>
	if (r_ptr >= BUFFER_SIZE)
	{
		r_ptr = 0;
	}

	return 1;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	09 c0       	rjmp	.+18     	; 0x5e6 <moveToNextInstruction+0x70>
	// Otherwise decrement size and increment the read PTR
	size--;
	r_ptr++;
	if (r_ptr >= BUFFER_SIZE)
	{
		r_ptr = 0;
     5d4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <r_ptr+0x1>
     5d8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <r_ptr>
	}

	return 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <moveToNextInstruction+0x70>
	g_instructions[r_ptr].length = 0;
	
	// If the buffer is empty don't increment the read PTR
	if (I2CInstrGetEmpty())
	{
		return 0;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
	{
		r_ptr = 0;
	}

	return 1;
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <getCurrentInstruction>:

// Returns a pointer to the current instruction
struct I2CInstruction * getCurrentInstruction()
{
	return &(g_instructions[r_ptr]);
     5ec:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <r_ptr>
     5f0:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <r_ptr+0x1>
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
}
     600:	87 53       	subi	r24, 0x37	; 55
     602:	9e 4f       	sbci	r25, 0xFE	; 254
     604:	08 95       	ret

00000606 <addInstruction>:

// Adds an instruction at w_ptr
int addInstruction(int d_ind, int rw, uint8_t* dat, int leng)
{
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	6c 01       	movw	r12, r24
     618:	7b 01       	movw	r14, r22
     61a:	8a 01       	movw	r16, r20
     61c:	e9 01       	movw	r28, r18
	// Disable interrupts for this function so as to not have to worry about atomicity
	cli();
     61e:	f8 94       	cli
	
	// If the buffer is not full
	if(!I2CInstrGetFull())
     620:	0e 94 a4 02 	call	0x548	; 0x548 <I2CInstrGetFull>
     624:	89 2b       	or	r24, r25
     626:	81 f5       	brne	.+96     	; 0x688 <addInstruction+0x82>
	{
		// Load in the new instruction's info
		g_instructions[w_ptr].dev_index = d_ind;
     628:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <w_ptr>
     62c:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <w_ptr+0x1>
     630:	fc 01       	movw	r30, r24
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	ee 0f       	add	r30, r30
     638:	ff 1f       	adc	r31, r31
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	e7 53       	subi	r30, 0x37	; 55
     640:	fe 4f       	sbci	r31, 0xFE	; 254
     642:	d1 82       	std	Z+1, r13	; 0x01
     644:	c0 82       	st	Z, r12
		g_instructions[w_ptr].readWrite = rw;
     646:	f3 82       	std	Z+3, r15	; 0x03
     648:	e2 82       	std	Z+2, r14	; 0x02
		g_instructions[w_ptr].data = dat;
     64a:	15 83       	std	Z+5, r17	; 0x05
     64c:	04 83       	std	Z+4, r16	; 0x04
		g_instructions[w_ptr].length = leng;
     64e:	d7 83       	std	Z+7, r29	; 0x07
     650:	c6 83       	std	Z+6, r28	; 0x06
		
		// Increment w_ptr and size
		size++;
     652:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <size>
     656:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <size+0x1>
     65a:	2f 5f       	subi	r18, 0xFF	; 255
     65c:	3f 4f       	sbci	r19, 0xFF	; 255
     65e:	30 93 c4 01 	sts	0x01C4, r19	; 0x8001c4 <size+0x1>
     662:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <size>
		w_ptr++;
     666:	01 96       	adiw	r24, 0x01	; 1
		if (w_ptr >= BUFFER_SIZE)
     668:	8f 37       	cpi	r24, 0x7F	; 127
     66a:	91 05       	cpc	r25, r1
     66c:	2c f4       	brge	.+10     	; 0x678 <addInstruction+0x72>
		g_instructions[w_ptr].data = dat;
		g_instructions[w_ptr].length = leng;
		
		// Increment w_ptr and size
		size++;
		w_ptr++;
     66e:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <w_ptr+0x1>
     672:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <w_ptr>
     676:	04 c0       	rjmp	.+8      	; 0x680 <addInstruction+0x7a>
		if (w_ptr >= BUFFER_SIZE)
		{
			w_ptr = 0;
     678:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <w_ptr+0x1>
     67c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <w_ptr>
		}
		sei();
     680:	78 94       	sei
		return 1;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	03 c0       	rjmp	.+6      	; 0x68e <addInstruction+0x88>
	}
	sei();
     688:	78 94       	sei
	return 0;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	08 95       	ret

000006a0 <__vector_21>:

// Resets the g_millis variable back to 0
void resetMillis()
{
	g_lastOVF = g_millis;
	g_millis = 0;
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
     6ae:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <g_millis>
     6b2:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <g_millis+0x1>
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	90 93 c2 05 	sts	0x05C2, r25	; 0x8005c2 <g_millis+0x1>
     6bc:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <g_millis>
     6c0:	9f 91       	pop	r25
     6c2:	8f 91       	pop	r24
     6c4:	0f 90       	pop	r0
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	0f 90       	pop	r0
     6ca:	1f 90       	pop	r1
     6cc:	18 95       	reti

000006ce <getLastOVF>:
}

int getLastOVF()
{
	return g_lastOVF;
}
     6ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6d6:	08 95       	ret

000006d8 <getMillis>:

// Returns the number of milliseconds since the las call to resetMillis()
int getMillis()
{
	return g_millis;
}
     6d8:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <g_millis>
     6dc:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <g_millis+0x1>
     6e0:	08 95       	ret

000006e2 <millisTimerInit>:

// Initializes a millisecond timer
void millisTimerInit()
{
	TCCR0A |= (1<<WGM01);
     6e2:	84 b5       	in	r24, 0x24	; 36
     6e4:	82 60       	ori	r24, 0x02	; 2
     6e6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);
     6e8:	85 b5       	in	r24, 0x25	; 37
     6ea:	83 60       	ori	r24, 0x03	; 3
     6ec:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;
     6ee:	89 ef       	ldi	r24, 0xF9	; 249
     6f0:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
     6f2:	ee e6       	ldi	r30, 0x6E	; 110
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	82 60       	ori	r24, 0x02	; 2
     6fa:	80 83       	st	Z, r24
     6fc:	08 95       	ret

000006fe <updateHeading>:
	g_minimu9V5TaskFlag = 0;
}
int getMinimu9V5TaskFlag()
{
	return g_minimu9V5TaskFlag;
}
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	8c 01       	movw	r16, r24
     710:	eb 01       	movw	r28, r22
     712:	0e 94 f4 06 	call	0xde8	; 0xde8 <getSensorData>
     716:	8f 3e       	cpi	r24, 0xEF	; 239
     718:	92 40       	sbci	r25, 0x02	; 2
     71a:	34 f4       	brge	.+12     	; 0x728 <updateHeading+0x2a>
     71c:	c8 01       	movw	r24, r16
     71e:	0e 94 f4 06 	call	0xde8	; 0xde8 <getSensorData>
     722:	82 31       	cpi	r24, 0x12	; 18
     724:	9d 4f       	sbci	r25, 0xFD	; 253
     726:	bc f5       	brge	.+110    	; 0x796 <updateHeading+0x98>
     728:	c8 01       	movw	r24, r16
     72a:	0e 94 f4 06 	call	0xde8	; 0xde8 <getSensorData>
     72e:	bc 01       	movw	r22, r24
     730:	99 0f       	add	r25, r25
     732:	88 0b       	sbc	r24, r24
     734:	99 0b       	sbc	r25, r25
     736:	0e 94 ce 13 	call	0x279c	; 0x279c <__floatsisf>
     73a:	23 e3       	ldi	r18, 0x33	; 51
     73c:	33 eb       	ldi	r19, 0xB3	; 179
     73e:	45 e0       	ldi	r20, 0x05	; 5
     740:	53 e4       	ldi	r21, 0x43	; 67
     742:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__divsf3>
     746:	6b 01       	movw	r12, r22
     748:	7c 01       	movw	r14, r24
     74a:	be 01       	movw	r22, r28
     74c:	dd 0f       	add	r29, r29
     74e:	88 0b       	sbc	r24, r24
     750:	99 0b       	sbc	r25, r25
     752:	0e 94 ce 13 	call	0x279c	; 0x279c <__floatsisf>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	4a e7       	ldi	r20, 0x7A	; 122
     75c:	54 e4       	ldi	r21, 0x44	; 68
     75e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__divsf3>
     762:	9b 01       	movw	r18, r22
     764:	ac 01       	movw	r20, r24
     766:	c7 01       	movw	r24, r14
     768:	b6 01       	movw	r22, r12
     76a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__mulsf3>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <g_heading>
     776:	70 91 c6 05 	lds	r23, 0x05C6	; 0x8005c6 <g_heading+0x1>
     77a:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <g_heading+0x2>
     77e:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <g_heading+0x3>
     782:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__addsf3>
     786:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <g_heading>
     78a:	70 93 c6 05 	sts	0x05C6, r23	; 0x8005c6 <g_heading+0x1>
     78e:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <g_heading+0x2>
     792:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <g_heading+0x3>
     796:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <g_heading>
     79a:	70 91 c6 05 	lds	r23, 0x05C6	; 0x8005c6 <g_heading+0x1>
     79e:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <g_heading+0x2>
     7a2:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <g_heading+0x3>
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	08 95       	ret

000007b8 <addReadGyroZInstr>:
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	ec 01       	movw	r28, r24
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	47 e0       	ldi	r20, 0x07	; 7
     7c4:	51 e0       	ldi	r21, 0x01	; 1
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
     7ce:	ce 01       	movw	r24, r28
     7d0:	0e 94 ed 06 	call	0xdda	; 0xdda <getSensorDataPtr>
     7d4:	22 e0       	ldi	r18, 0x02	; 2
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	ac 01       	movw	r20, r24
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	ce 01       	movw	r24, r28
     7e0:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <addReadIMUwhoAmI>:
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	ec 01       	movw	r28, r24
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	46 e0       	ldi	r20, 0x06	; 6
     7f6:	51 e0       	ldi	r21, 0x01	; 1
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
     800:	ce 01       	movw	r24, r28
     802:	0e 94 ed 06 	call	0xdda	; 0xdda <getSensorDataPtr>
     806:	22 e0       	ldi	r18, 0x02	; 2
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	ac 01       	movw	r20, r24
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	ce 01       	movw	r24, r28
     812:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <IMUinit>:
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	ec 01       	movw	r28, r24
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	0e 94 1e 07 	call	0xe3c	; 0xe3c <setSensorData>
     82a:	6b e6       	ldi	r22, 0x6B	; 107
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	ce 01       	movw	r24, r28
     830:	0e 94 3a 07 	call	0xe74	; 0xe74 <setSensorDeviceAddress>
     834:	ce 01       	movw	r24, r28
     836:	0e 94 f5 03 	call	0x7ea	; 0x7ea <addReadIMUwhoAmI>
     83a:	22 e0       	ldi	r18, 0x02	; 2
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	42 e0       	ldi	r20, 0x02	; 2
     840:	51 e0       	ldi	r21, 0x01	; 1
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	ce 01       	movw	r24, r28
     848:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
     84c:	89 2b       	or	r24, r25
     84e:	a9 f3       	breq	.-22     	; 0x83a <IMUinit+0x1e>
     850:	22 e0       	ldi	r18, 0x02	; 2
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	44 e0       	ldi	r20, 0x04	; 4
     856:	51 e0       	ldi	r21, 0x01	; 1
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	ce 01       	movw	r24, r28
     85e:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
     862:	89 2b       	or	r24, r25
     864:	a9 f3       	breq	.-22     	; 0x850 <IMUinit+0x34>
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <minimu9V5Task>:

void minimu9V5Task(int index)
{
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	8c 01       	movw	r16, r24
	static int lastTime = 0;
	
	int currTime = getMillis();
     876:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
     87a:	ec 01       	movw	r28, r24
	if (abs(currTime - lastTime) > 25)
     87c:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <lastTime.2236>
     880:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <lastTime.2236+0x1>
     884:	9e 01       	movw	r18, r28
     886:	28 1b       	sub	r18, r24
     888:	39 0b       	sbc	r19, r25
     88a:	c9 01       	movw	r24, r18
     88c:	99 23       	and	r25, r25
     88e:	24 f4       	brge	.+8      	; 0x898 <minimu9V5Task+0x2c>
     890:	88 27       	eor	r24, r24
     892:	99 27       	eor	r25, r25
     894:	82 1b       	sub	r24, r18
     896:	93 0b       	sbc	r25, r19
     898:	4a 97       	sbiw	r24, 0x1a	; 26
     89a:	1c f1       	brlt	.+70     	; 0x8e2 <minimu9V5Task+0x76>
	{
		addReadGyroZInstr(index);
     89c:	c8 01       	movw	r24, r16
     89e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <addReadGyroZInstr>
		if (currTime > lastTime)
     8a2:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <lastTime.2236>
     8a6:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <lastTime.2236+0x1>
     8aa:	8c 17       	cp	r24, r28
     8ac:	9d 07       	cpc	r25, r29
     8ae:	3c f4       	brge	.+14     	; 0x8be <minimu9V5Task+0x52>
		{
			updateHeading(index, currTime - lastTime);
     8b0:	be 01       	movw	r22, r28
     8b2:	68 1b       	sub	r22, r24
     8b4:	79 0b       	sbc	r23, r25
     8b6:	c8 01       	movw	r24, r16
     8b8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <updateHeading>
     8bc:	0e c0       	rjmp	.+28     	; 0x8da <minimu9V5Task+0x6e>
		}
		else
		{
			updateHeading(index, getLastOVF() - lastTime + currTime);
     8be:	0e 94 67 03 	call	0x6ce	; 0x6ce <getLastOVF>
     8c2:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <lastTime.2236>
     8c6:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <lastTime.2236+0x1>
     8ca:	82 1b       	sub	r24, r18
     8cc:	93 0b       	sbc	r25, r19
     8ce:	bc 01       	movw	r22, r24
     8d0:	6c 0f       	add	r22, r28
     8d2:	7d 1f       	adc	r23, r29
     8d4:	c8 01       	movw	r24, r16
     8d6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <updateHeading>
		}
		lastTime = currTime;
     8da:	d0 93 c4 05 	sts	0x05C4, r29	; 0x8005c4 <lastTime.2236+0x1>
     8de:	c0 93 c3 05 	sts	0x05C3, r28	; 0x8005c3 <lastTime.2236>
	}
	
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <magInit>:

void magInit(int index)
{
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	ec 01       	movw	r28, r24
	setSensorData(index + 1, 0);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <setSensorData>
	setSensorDeviceAddress(index, 0x1E); // LIS3MDL (Magnetometer)
     8fc:	6e e1       	ldi	r22, 0x1E	; 30
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	ce 01       	movw	r24, r28
     902:	0e 94 3a 07 	call	0xe74	; 0xe74 <setSensorDeviceAddress>
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <minimu9V5Init>:

void minimu9V5Init(int index)
{
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	ec 01       	movw	r28, r24
	IMUinit(index);	
     912:	0e 94 0e 04 	call	0x81c	; 0x81c <IMUinit>
	magInit(index + 1);
     916:	ce 01       	movw	r24, r28
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	0e 94 76 04 	call	0x8ec	; 0x8ec <magInit>
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <getMotionState>:
static long g_distThresh = 0;

int getMotionState()
{
	return g_motionState;
}
     924:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <g_motionState>
     928:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <g_motionState+0x1>
     92c:	08 95       	ret

0000092e <stopMoving>:

void stopMoving()
{
	g_motionState = NO_MOTION_STATE;
     92e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <g_motionState+0x1>
     932:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <g_motionState>
	setMotorPWR(BOTH_MOTORS_PASS, 0);
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <setMotorPWR>
	g_distThresh = 0;
     93e:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <g_distThresh>
     942:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <g_distThresh+0x1>
     946:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <g_distThresh+0x2>
     94a:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <g_distThresh+0x3>
     94e:	08 95       	ret

00000950 <startMovingBackwards>:
}

void startMovingBackwards()
{
	resetDists();
     950:	0e 94 3d 02 	call	0x47a	; 0x47a <resetDists>
	
	g_motionState = MOVING_BACKWARDS_STATE;
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <g_motionState+0x1>
     95c:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <g_motionState>
	setMotorDir(BOTH_MOTORS_PASS, DIR_BACKWARD);
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	0e 94 48 01 	call	0x290	; 0x290 <setMotorDir>
	setMotorPWR(BOTH_MOTORS_PASS, 80);
     968:	60 e5       	ldi	r22, 0x50	; 80
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <setMotorPWR>
     970:	08 95       	ret

00000972 <startMovingStraight>:
}

void startMovingStraight()
{
	resetDists();
     972:	0e 94 3d 02 	call	0x47a	; 0x47a <resetDists>
	
	g_motionState = MOVING_STRAIGHT_STATE;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <g_motionState+0x1>
     97e:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <g_motionState>
	setMotorDir(BOTH_MOTORS_PASS, DIR_FORWARD);
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	0e 94 48 01 	call	0x290	; 0x290 <setMotorDir>
	setMotorPWR(BOTH_MOTORS_PASS, 80);
     98a:	60 e5       	ldi	r22, 0x50	; 80
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <setMotorPWR>
     992:	08 95       	ret

00000994 <startLeftTurn>:
}

void startLeftTurn()
{
	
	g_motionState = TURNING_LEFT_STATE;
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <g_motionState+0x1>
     99c:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <g_motionState>
	
	resetDists();
     9a0:	0e 94 3d 02 	call	0x47a	; 0x47a <resetDists>
	
	setMotorDir(LEFT_MOTOR_PASS, DIR_FORWARD);
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 48 01 	call	0x290	; 0x290 <setMotorDir>
	
	setRightMotorPWR(80);
     9ac:	80 e5       	ldi	r24, 0x50	; 80
     9ae:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRightMotorPWR>
	setLeftMotorPWR(0);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setLeftMotorPWR>
     9b8:	08 95       	ret

000009ba <startRightTurn>:
}

void startRightTurn()
{
	g_motionState = TURNING_RIGHT_STATE;
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <g_motionState+0x1>
     9c2:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <g_motionState>
	
	resetDists();
     9c6:	0e 94 3d 02 	call	0x47a	; 0x47a <resetDists>
	
	setMotorDir(RIGHT_MOTOR_PASS, DIR_FORWARD);
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	0e 94 48 01 	call	0x290	; 0x290 <setMotorDir>
	
	setLeftMotorPWR(80);
     9d2:	80 e5       	ldi	r24, 0x50	; 80
     9d4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setLeftMotorPWR>
	setRightMotorPWR(0);
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRightMotorPWR>
     9de:	08 95       	ret

000009e0 <turnRight>:
}

void turnRight(uint16_t degrees)
{
	g_distThresh = g_distForTurnInMinus7PerDegree * degrees;
     9e0:	9c 01       	movw	r18, r24
     9e2:	ac e5       	ldi	r26, 0x5C	; 92
     9e4:	bc e4       	ldi	r27, 0x4C	; 76
     9e6:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__umulhisi3>
     9ea:	60 93 c9 05 	sts	0x05C9, r22	; 0x8005c9 <g_distThresh>
     9ee:	70 93 ca 05 	sts	0x05CA, r23	; 0x8005ca <g_distThresh+0x1>
     9f2:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <g_distThresh+0x2>
     9f6:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <g_distThresh+0x3>
	startRightTurn();
     9fa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <startRightTurn>
     9fe:	08 95       	ret

00000a00 <turnLeft>:
}
void turnLeft(uint16_t degrees)
{
	g_distThresh = g_distForTurnInMinus7PerDegree * degrees;
     a00:	9c 01       	movw	r18, r24
     a02:	ac e5       	ldi	r26, 0x5C	; 92
     a04:	bc e4       	ldi	r27, 0x4C	; 76
     a06:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__umulhisi3>
     a0a:	60 93 c9 05 	sts	0x05C9, r22	; 0x8005c9 <g_distThresh>
     a0e:	70 93 ca 05 	sts	0x05CA, r23	; 0x8005ca <g_distThresh+0x1>
     a12:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <g_distThresh+0x2>
     a16:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <g_distThresh+0x3>
	startLeftTurn();
     a1a:	0e 94 ca 04 	call	0x994	; 0x994 <startLeftTurn>
     a1e:	08 95       	ret

00000a20 <moveStraight>:
}

void moveStraight(long distCM)
{
     a20:	9b 01       	movw	r18, r22
     a22:	ac 01       	movw	r20, r24
	g_distThresh = distCM * 100000;
     a24:	60 ea       	ldi	r22, 0xA0	; 160
     a26:	76 e8       	ldi	r23, 0x86	; 134
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 c7 14 	call	0x298e	; 0x298e <__mulsi3>
     a30:	60 93 c9 05 	sts	0x05C9, r22	; 0x8005c9 <g_distThresh>
     a34:	70 93 ca 05 	sts	0x05CA, r23	; 0x8005ca <g_distThresh+0x1>
     a38:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <g_distThresh+0x2>
     a3c:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <g_distThresh+0x3>
	
	startMovingStraight();
     a40:	0e 94 b9 04 	call	0x972	; 0x972 <startMovingStraight>
     a44:	08 95       	ret

00000a46 <moveBackwards>:
}

void moveBackwards(long distCM)
{
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
	g_distThresh = distCM * -100000;
     a4a:	60 e6       	ldi	r22, 0x60	; 96
     a4c:	79 e7       	ldi	r23, 0x79	; 121
     a4e:	8e ef       	ldi	r24, 0xFE	; 254
     a50:	9f ef       	ldi	r25, 0xFF	; 255
     a52:	0e 94 c7 14 	call	0x298e	; 0x298e <__mulsi3>
     a56:	60 93 c9 05 	sts	0x05C9, r22	; 0x8005c9 <g_distThresh>
     a5a:	70 93 ca 05 	sts	0x05CA, r23	; 0x8005ca <g_distThresh+0x1>
     a5e:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <g_distThresh+0x2>
     a62:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <g_distThresh+0x3>
	
	startMovingBackwards();
     a66:	0e 94 a8 04 	call	0x950	; 0x950 <startMovingBackwards>
     a6a:	08 95       	ret

00000a6c <updateMotionState>:
}

void updateMotionState()
{
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
	switch (g_motionState)
     a74:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <g_motionState>
     a78:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <g_motionState+0x1>
     a7c:	82 30       	cpi	r24, 0x02	; 2
     a7e:	91 05       	cpc	r25, r1
     a80:	a1 f1       	breq	.+104    	; 0xaea <updateMotionState+0x7e>
     a82:	1c f4       	brge	.+6      	; 0xa8a <updateMotionState+0x1e>
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	49 f0       	breq	.+18     	; 0xa9a <updateMotionState+0x2e>
     a88:	8b c0       	rjmp	.+278    	; 0xba0 <__stack+0xa1>
     a8a:	83 30       	cpi	r24, 0x03	; 3
     a8c:	91 05       	cpc	r25, r1
     a8e:	09 f4       	brne	.+2      	; 0xa92 <updateMotionState+0x26>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__stack+0x21>
     a92:	04 97       	sbiw	r24, 0x04	; 4
     a94:	09 f4       	brne	.+2      	; 0xa98 <updateMotionState+0x2c>
     a96:	5e c0       	rjmp	.+188    	; 0xb54 <__stack+0x55>
     a98:	83 c0       	rjmp	.+262    	; 0xba0 <__stack+0xa1>
	{
	case MOVING_STRAIGHT_STATE:
		if (((getRightDistAccurate() + getLeftDistAccurate()) / 2) > g_distThresh)
     a9a:	0e 94 4b 02 	call	0x496	; 0x496 <getRightDistAccurate>
     a9e:	6b 01       	movw	r12, r22
     aa0:	7c 01       	movw	r14, r24
     aa2:	0e 94 42 02 	call	0x484	; 0x484 <getLeftDistAccurate>
     aa6:	ab 01       	movw	r20, r22
     aa8:	bc 01       	movw	r22, r24
     aaa:	4c 0d       	add	r20, r12
     aac:	5d 1d       	adc	r21, r13
     aae:	6e 1d       	adc	r22, r14
     ab0:	7f 1d       	adc	r23, r15
     ab2:	db 01       	movw	r26, r22
     ab4:	ca 01       	movw	r24, r20
     ab6:	77 23       	and	r23, r23
     ab8:	1c f4       	brge	.+6      	; 0xac0 <updateMotionState+0x54>
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	a1 1d       	adc	r26, r1
     abe:	b1 1d       	adc	r27, r1
     ac0:	b5 95       	asr	r27
     ac2:	a7 95       	ror	r26
     ac4:	97 95       	ror	r25
     ac6:	87 95       	ror	r24
     ac8:	40 91 c9 05 	lds	r20, 0x05C9	; 0x8005c9 <g_distThresh>
     acc:	50 91 ca 05 	lds	r21, 0x05CA	; 0x8005ca <g_distThresh+0x1>
     ad0:	60 91 cb 05 	lds	r22, 0x05CB	; 0x8005cb <g_distThresh+0x2>
     ad4:	70 91 cc 05 	lds	r23, 0x05CC	; 0x8005cc <g_distThresh+0x3>
     ad8:	48 17       	cp	r20, r24
     ada:	59 07       	cpc	r21, r25
     adc:	6a 07       	cpc	r22, r26
     ade:	7b 07       	cpc	r23, r27
     ae0:	0c f0       	brlt	.+2      	; 0xae4 <updateMotionState+0x78>
     ae2:	5e c0       	rjmp	.+188    	; 0xba0 <__stack+0xa1>
		{
			stopMoving();
     ae4:	0e 94 97 04 	call	0x92e	; 0x92e <stopMoving>
     ae8:	5b c0       	rjmp	.+182    	; 0xba0 <__stack+0xa1>
		}
		break;
	case TURNING_LEFT_STATE:
		if ((getRightDistAccurate() - getLeftDistAccurate()) > g_distThresh)
     aea:	0e 94 4b 02 	call	0x496	; 0x496 <getRightDistAccurate>
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24
     af2:	0e 94 42 02 	call	0x484	; 0x484 <getLeftDistAccurate>
     af6:	c6 1a       	sub	r12, r22
     af8:	d7 0a       	sbc	r13, r23
     afa:	e8 0a       	sbc	r14, r24
     afc:	f9 0a       	sbc	r15, r25
     afe:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <g_distThresh>
     b02:	90 91 ca 05 	lds	r25, 0x05CA	; 0x8005ca <g_distThresh+0x1>
     b06:	a0 91 cb 05 	lds	r26, 0x05CB	; 0x8005cb <g_distThresh+0x2>
     b0a:	b0 91 cc 05 	lds	r27, 0x05CC	; 0x8005cc <g_distThresh+0x3>
     b0e:	8c 15       	cp	r24, r12
     b10:	9d 05       	cpc	r25, r13
     b12:	ae 05       	cpc	r26, r14
     b14:	bf 05       	cpc	r27, r15
     b16:	0c f0       	brlt	.+2      	; 0xb1a <__stack+0x1b>
     b18:	43 c0       	rjmp	.+134    	; 0xba0 <__stack+0xa1>
		{
			stopMoving();
     b1a:	0e 94 97 04 	call	0x92e	; 0x92e <stopMoving>
     b1e:	40 c0       	rjmp	.+128    	; 0xba0 <__stack+0xa1>
		}
		break;
	case TURNING_RIGHT_STATE:
		if ((getLeftDistAccurate() - getRightDistAccurate()) > g_distThresh)
     b20:	0e 94 42 02 	call	0x484	; 0x484 <getLeftDistAccurate>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
     b28:	0e 94 4b 02 	call	0x496	; 0x496 <getRightDistAccurate>
     b2c:	c6 1a       	sub	r12, r22
     b2e:	d7 0a       	sbc	r13, r23
     b30:	e8 0a       	sbc	r14, r24
     b32:	f9 0a       	sbc	r15, r25
     b34:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <g_distThresh>
     b38:	90 91 ca 05 	lds	r25, 0x05CA	; 0x8005ca <g_distThresh+0x1>
     b3c:	a0 91 cb 05 	lds	r26, 0x05CB	; 0x8005cb <g_distThresh+0x2>
     b40:	b0 91 cc 05 	lds	r27, 0x05CC	; 0x8005cc <g_distThresh+0x3>
     b44:	8c 15       	cp	r24, r12
     b46:	9d 05       	cpc	r25, r13
     b48:	ae 05       	cpc	r26, r14
     b4a:	bf 05       	cpc	r27, r15
     b4c:	4c f5       	brge	.+82     	; 0xba0 <__stack+0xa1>
		{
			stopMoving();
     b4e:	0e 94 97 04 	call	0x92e	; 0x92e <stopMoving>
     b52:	26 c0       	rjmp	.+76     	; 0xba0 <__stack+0xa1>
		}
		break;
	case MOVING_BACKWARDS_STATE:
		if (((getRightDistAccurate() + getLeftDistAccurate()) / 2) < g_distThresh)
     b54:	0e 94 4b 02 	call	0x496	; 0x496 <getRightDistAccurate>
     b58:	6b 01       	movw	r12, r22
     b5a:	7c 01       	movw	r14, r24
     b5c:	0e 94 42 02 	call	0x484	; 0x484 <getLeftDistAccurate>
     b60:	ab 01       	movw	r20, r22
     b62:	bc 01       	movw	r22, r24
     b64:	4c 0d       	add	r20, r12
     b66:	5d 1d       	adc	r21, r13
     b68:	6e 1d       	adc	r22, r14
     b6a:	7f 1d       	adc	r23, r15
     b6c:	db 01       	movw	r26, r22
     b6e:	ca 01       	movw	r24, r20
     b70:	77 23       	and	r23, r23
     b72:	1c f4       	brge	.+6      	; 0xb7a <__stack+0x7b>
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	a1 1d       	adc	r26, r1
     b78:	b1 1d       	adc	r27, r1
     b7a:	b5 95       	asr	r27
     b7c:	a7 95       	ror	r26
     b7e:	97 95       	ror	r25
     b80:	87 95       	ror	r24
     b82:	40 91 c9 05 	lds	r20, 0x05C9	; 0x8005c9 <g_distThresh>
     b86:	50 91 ca 05 	lds	r21, 0x05CA	; 0x8005ca <g_distThresh+0x1>
     b8a:	60 91 cb 05 	lds	r22, 0x05CB	; 0x8005cb <g_distThresh+0x2>
     b8e:	70 91 cc 05 	lds	r23, 0x05CC	; 0x8005cc <g_distThresh+0x3>
     b92:	84 17       	cp	r24, r20
     b94:	95 07       	cpc	r25, r21
     b96:	a6 07       	cpc	r26, r22
     b98:	b7 07       	cpc	r27, r23
     b9a:	14 f4       	brge	.+4      	; 0xba0 <__stack+0xa1>
		{
			stopMoving();
     b9c:	0e 94 97 04 	call	0x92e	; 0x92e <stopMoving>
		}
		break;
	}
}
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	08 95       	ret

00000baa <equalizeSpeedsStraight>:


void equalizeSpeedsStraight()
{
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
	static const long equalization_factor = 50000;
	long diff = getLeftDistAccurate() - getRightDistAccurate();
     bb6:	0e 94 42 02 	call	0x484	; 0x484 <getLeftDistAccurate>
     bba:	6b 01       	movw	r12, r22
     bbc:	7c 01       	movw	r14, r24
     bbe:	0e 94 4b 02 	call	0x496	; 0x496 <getRightDistAccurate>
	long refactoredDiff = diff / equalization_factor;
     bc2:	a7 01       	movw	r20, r14
     bc4:	96 01       	movw	r18, r12
     bc6:	26 1b       	sub	r18, r22
     bc8:	37 0b       	sbc	r19, r23
     bca:	48 0b       	sbc	r20, r24
     bcc:	59 0b       	sbc	r21, r25
     bce:	ca 01       	movw	r24, r20
     bd0:	b9 01       	movw	r22, r18
     bd2:	20 e5       	ldi	r18, 0x50	; 80
     bd4:	33 ec       	ldi	r19, 0xC3	; 195
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__divmodsi4>
	int rmp = 80;
	int lmp = 80;
	if (g_motionState == MOVING_STRAIGHT_STATE)
     bde:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <g_motionState>
     be2:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <g_motionState+0x1>
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	91 05       	cpc	r25, r1
     bea:	79 f5       	brne	.+94     	; 0xc4a <equalizeSpeedsStraight+0xa0>
	{
		rmp += refactoredDiff;
     bec:	c9 01       	movw	r24, r18
     bee:	80 5b       	subi	r24, 0xB0	; 176
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
		lmp -= refactoredDiff;
     bf2:	c0 e5       	ldi	r28, 0x50	; 80
     bf4:	d0 e0       	ldi	r29, 0x00	; 0
     bf6:	c2 1b       	sub	r28, r18
     bf8:	d3 0b       	sbc	r29, r19
     bfa:	07 c0       	rjmp	.+14     	; 0xc0a <equalizeSpeedsStraight+0x60>
	}
	if (g_motionState == MOVING_BACKWARDS_STATE)
	{
		rmp -= refactoredDiff;
     bfc:	80 e5       	ldi	r24, 0x50	; 80
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	82 1b       	sub	r24, r18
     c02:	93 0b       	sbc	r25, r19
		lmp += refactoredDiff;
     c04:	e9 01       	movw	r28, r18
     c06:	c0 5b       	subi	r28, 0xB0	; 176
     c08:	df 4f       	sbci	r29, 0xFF	; 255
	}
	
	if (rmp > 100)
     c0a:	85 36       	cpi	r24, 0x65	; 101
     c0c:	91 05       	cpc	r25, r1
     c0e:	24 f0       	brlt	.+8      	; 0xc18 <equalizeSpeedsStraight+0x6e>
	{
		setRightMotorPWR(100);
     c10:	84 e6       	ldi	r24, 0x64	; 100
     c12:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRightMotorPWR>
     c16:	08 c0       	rjmp	.+16     	; 0xc28 <equalizeSpeedsStraight+0x7e>
	}
	else if (rmp < 0)
     c18:	99 23       	and	r25, r25
     c1a:	24 f4       	brge	.+8      	; 0xc24 <equalizeSpeedsStraight+0x7a>
	{
		setRightMotorPWR(0);
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRightMotorPWR>
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <equalizeSpeedsStraight+0x7e>
	}
	else
	{
		setRightMotorPWR(rmp);
     c24:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRightMotorPWR>
	}
	
	if (lmp > 100)
     c28:	c5 36       	cpi	r28, 0x65	; 101
     c2a:	d1 05       	cpc	r29, r1
     c2c:	24 f0       	brlt	.+8      	; 0xc36 <equalizeSpeedsStraight+0x8c>
	{
		setLeftMotorPWR(100);
     c2e:	84 e6       	ldi	r24, 0x64	; 100
     c30:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setLeftMotorPWR>
     c34:	11 c0       	rjmp	.+34     	; 0xc58 <equalizeSpeedsStraight+0xae>
	}
	else if (lmp < 0)
     c36:	dd 23       	and	r29, r29
     c38:	24 f4       	brge	.+8      	; 0xc42 <equalizeSpeedsStraight+0x98>
	{
		setLeftMotorPWR(0);
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setLeftMotorPWR>
     c40:	0b c0       	rjmp	.+22     	; 0xc58 <equalizeSpeedsStraight+0xae>
	}
	else
	{
		setLeftMotorPWR(lmp);
     c42:	8c 2f       	mov	r24, r28
     c44:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setLeftMotorPWR>
	}
}
     c48:	07 c0       	rjmp	.+14     	; 0xc58 <equalizeSpeedsStraight+0xae>
	if (g_motionState == MOVING_STRAIGHT_STATE)
	{
		rmp += refactoredDiff;
		lmp -= refactoredDiff;
	}
	if (g_motionState == MOVING_BACKWARDS_STATE)
     c4a:	04 97       	sbiw	r24, 0x04	; 4
     c4c:	b9 f2       	breq	.-82     	; 0xbfc <equalizeSpeedsStraight+0x52>
{
	static const long equalization_factor = 50000;
	long diff = getLeftDistAccurate() - getRightDistAccurate();
	long refactoredDiff = diff / equalization_factor;
	int rmp = 80;
	int lmp = 80;
     c4e:	c0 e5       	ldi	r28, 0x50	; 80
     c50:	d0 e0       	ldi	r29, 0x00	; 0
void equalizeSpeedsStraight()
{
	static const long equalization_factor = 50000;
	long diff = getLeftDistAccurate() - getRightDistAccurate();
	long refactoredDiff = diff / equalization_factor;
	int rmp = 80;
     c52:	80 e5       	ldi	r24, 0x50	; 80
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	e6 cf       	rjmp	.-52     	; 0xc24 <equalizeSpeedsStraight+0x7a>
	}
	else
	{
		setLeftMotorPWR(lmp);
	}
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	08 95       	ret

00000c66 <avoidWallsBackward>:

void avoidWallsBackward()
{
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
	static const long equalizationFacor = 1;
	
	int ba_r = getDistSensorDist(BACK_RIGHT_INDEX);
     c72:	86 e0       	ldi	r24, 0x06	; 6
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
     c7a:	ec 01       	movw	r28, r24
	int ba_l = getDistSensorDist(BACK_LEFT_INDEX);
     c7c:	87 e0       	ldi	r24, 0x07	; 7
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
	
	if (ba_r < 40 || ba_l < 40)
     c84:	a8 97       	sbiw	r28, 0x28	; 40
     c86:	14 f0       	brlt	.+4      	; 0xc8c <avoidWallsBackward+0x26>
     c88:	88 97       	sbiw	r24, 0x28	; 40
     c8a:	1c f4       	brge	.+6      	; 0xc92 <avoidWallsBackward+0x2c>
	{
		stopMoving();
     c8c:	0e 94 97 04 	call	0x92e	; 0x92e <stopMoving>
		return;
     c90:	32 c0       	rjmp	.+100    	; 0xcf6 <avoidWallsBackward+0x90>
	}
	
	int r_fr = getDistSensorDist(RIGHT_FRONT_INDEX);
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
     c9a:	7c 01       	movw	r14, r24
	int r_ba = getDistSensorDist(RIGHT_BACK_INDEX);
     c9c:	85 e0       	ldi	r24, 0x05	; 5
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
     ca4:	8c 01       	movw	r16, r24
	int l_fr = getDistSensorDist(LEFT_FRONT_INDEX);
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
     cae:	ec 01       	movw	r28, r24
	int l_ba = getDistSensorDist(LEFT_BACK_INDEX);
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
	
	if (r_ba < 65)
     cb8:	01 34       	cpi	r16, 0x41	; 65
     cba:	11 05       	cpc	r17, r1
     cbc:	64 f4       	brge	.+24     	; 0xcd6 <avoidWallsBackward+0x70>
	{
		int diff = (r_fr - r_ba) / equalizationFacor;
		setRightMotorPWR(80 - diff);
     cbe:	e7 01       	movw	r28, r14
     cc0:	c0 1b       	sub	r28, r16
     cc2:	d1 0b       	sbc	r29, r17
     cc4:	80 e5       	ldi	r24, 0x50	; 80
     cc6:	8c 1b       	sub	r24, r28
     cc8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRightMotorPWR>
		setLeftMotorPWR(80 + diff);
     ccc:	8c 2f       	mov	r24, r28
     cce:	80 5b       	subi	r24, 0xB0	; 176
     cd0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setLeftMotorPWR>
     cd4:	10 c0       	rjmp	.+32     	; 0xcf6 <avoidWallsBackward+0x90>
	}
	else if (l_ba < 65)
     cd6:	81 34       	cpi	r24, 0x41	; 65
     cd8:	91 05       	cpc	r25, r1
     cda:	5c f4       	brge	.+22     	; 0xcf2 <avoidWallsBackward+0x8c>
	{
		int diff = (l_fr - l_ba) / equalizationFacor;
		setRightMotorPWR(80 + diff);
     cdc:	c8 1b       	sub	r28, r24
     cde:	d9 0b       	sbc	r29, r25
     ce0:	8c 2f       	mov	r24, r28
     ce2:	80 5b       	subi	r24, 0xB0	; 176
     ce4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRightMotorPWR>
		setLeftMotorPWR(80 - diff);
     ce8:	80 e5       	ldi	r24, 0x50	; 80
     cea:	8c 1b       	sub	r24, r28
     cec:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setLeftMotorPWR>
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <avoidWallsBackward+0x90>
	}
	else
	{
		equalizeSpeedsStraight();
     cf2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <equalizeSpeedsStraight>
	}
	
}
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	08 95       	ret

00000d04 <avoidWallsForward>:

void avoidWallsForward()
{
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
	static const long equalizationFacor = 1;
	
	int fr_r = getDistSensorDist(FRONT_RIGHT_INDEX);
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
     d18:	ec 01       	movw	r28, r24
	int fr_l = getDistSensorDist(FRONT_LEFT_INDEX);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
	
	if (fr_r < 55 || fr_l < 55)
     d22:	e7 97       	sbiw	r28, 0x37	; 55
     d24:	14 f0       	brlt	.+4      	; 0xd2a <avoidWallsForward+0x26>
     d26:	c7 97       	sbiw	r24, 0x37	; 55
     d28:	1c f4       	brge	.+6      	; 0xd30 <avoidWallsForward+0x2c>
	{
		stopMoving();
     d2a:	0e 94 97 04 	call	0x92e	; 0x92e <stopMoving>
		return;
     d2e:	33 c0       	rjmp	.+102    	; 0xd96 <avoidWallsForward+0x92>
	}
	
	int r_fr = getDistSensorDist(RIGHT_FRONT_INDEX);
     d30:	84 e0       	ldi	r24, 0x04	; 4
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
     d38:	ec 01       	movw	r28, r24
	int r_ba = getDistSensorDist(RIGHT_BACK_INDEX);
     d3a:	85 e0       	ldi	r24, 0x05	; 5
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
     d42:	7c 01       	movw	r14, r24
	int l_fr = getDistSensorDist(LEFT_FRONT_INDEX);
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
     d4c:	8c 01       	movw	r16, r24
	int l_ba = getDistSensorDist(LEFT_BACK_INDEX);
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
	
	if (r_fr < 65)
     d56:	c1 34       	cpi	r28, 0x41	; 65
     d58:	d1 05       	cpc	r29, r1
     d5a:	64 f4       	brge	.+24     	; 0xd74 <avoidWallsForward+0x70>
	{
		int diff = (r_ba - r_fr) / equalizationFacor;
		setRightMotorPWR(80 + diff);
     d5c:	c7 01       	movw	r24, r14
     d5e:	8c 1b       	sub	r24, r28
     d60:	9d 0b       	sbc	r25, r29
     d62:	ec 01       	movw	r28, r24
     d64:	80 5b       	subi	r24, 0xB0	; 176
     d66:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRightMotorPWR>
		setLeftMotorPWR(80 - diff);
     d6a:	80 e5       	ldi	r24, 0x50	; 80
     d6c:	8c 1b       	sub	r24, r28
     d6e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setLeftMotorPWR>
     d72:	11 c0       	rjmp	.+34     	; 0xd96 <avoidWallsForward+0x92>
	}
	else if (l_fr < 65)
     d74:	01 34       	cpi	r16, 0x41	; 65
     d76:	11 05       	cpc	r17, r1
     d78:	64 f4       	brge	.+24     	; 0xd92 <avoidWallsForward+0x8e>
	{
		int diff = (l_ba - l_fr) / equalizationFacor;
		setRightMotorPWR(80 - diff);
     d7a:	ec 01       	movw	r28, r24
     d7c:	c0 1b       	sub	r28, r16
     d7e:	d1 0b       	sbc	r29, r17
     d80:	80 e5       	ldi	r24, 0x50	; 80
     d82:	8c 1b       	sub	r24, r28
     d84:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRightMotorPWR>
		setLeftMotorPWR(80 + diff);
     d88:	8c 2f       	mov	r24, r28
     d8a:	80 5b       	subi	r24, 0xB0	; 176
     d8c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <setLeftMotorPWR>
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <avoidWallsForward+0x92>
	}
	else
	{
		equalizeSpeedsStraight();
     d92:	0e 94 d5 05 	call	0xbaa	; 0xbaa <equalizeSpeedsStraight>
	}
	
}
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	08 95       	ret

00000da4 <updateMotors>:

void updateMotors()
{
	switch (g_motionState)
     da4:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <g_motionState>
     da8:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <g_motionState+0x1>
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	19 f0       	breq	.+6      	; 0xdb8 <updateMotors+0x14>
     db2:	04 97       	sbiw	r24, 0x04	; 4
     db4:	21 f0       	breq	.+8      	; 0xdbe <updateMotors+0x1a>
     db6:	08 95       	ret
	{
	case NO_MOTION_STATE:
		break;
	case MOVING_STRAIGHT_STATE:
		avoidWallsForward();
     db8:	0e 94 82 06 	call	0xd04	; 0xd04 <avoidWallsForward>
		break;
     dbc:	08 95       	ret
	case MOVING_BACKWARDS_STATE:
		avoidWallsBackward();
     dbe:	0e 94 33 06 	call	0xc66	; 0xc66 <avoidWallsBackward>
     dc2:	08 95       	ret

00000dc4 <motionTask>:
	}
}

void motionTask()
{
	if (g_motionState != NO_MOTION_STATE)
     dc4:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <g_motionState>
     dc8:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <g_motionState+0x1>
     dcc:	89 2b       	or	r24, r25
     dce:	11 f0       	breq	.+4      	; 0xdd4 <motionTask+0x10>
	{
		updateMotionState();
     dd0:	0e 94 36 05 	call	0xa6c	; 0xa6c <updateMotionState>
	}
	updateMotors();
     dd4:	0e 94 d2 06 	call	0xda4	; 0xda4 <updateMotors>
     dd8:	08 95       	ret

00000dda <getSensorDataPtr>:

// Sets the sensor data using an array
void setSensorDataArr(int index, uint8_t * data)
{
	g_sensors[index].lastData[0] = *data;
	g_sensors[index].lastData[1] = *(data + 1);
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	8d 52       	subi	r24, 0x2D	; 45
     de4:	9a 4f       	sbci	r25, 0xFA	; 250
     de6:	08 95       	ret

00000de8 <getSensorData>:
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	fc 01       	movw	r30, r24
     df2:	ee 52       	subi	r30, 0x2E	; 46
     df4:	fa 4f       	sbci	r31, 0xFA	; 250
     df6:	92 81       	ldd	r25, Z+2	; 0x02
     df8:	89 2f       	mov	r24, r25
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	98 2f       	mov	r25, r24
     dfe:	88 27       	eor	r24, r24
     e00:	21 81       	ldd	r18, Z+1	; 0x01
     e02:	82 2b       	or	r24, r18
     e04:	08 95       	ret

00000e06 <getSensorShouldReadPtr>:
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	8b 52       	subi	r24, 0x2B	; 43
     e10:	9a 4f       	sbci	r25, 0xFA	; 250
     e12:	08 95       	ret

00000e14 <getSensorShouldRead>:
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	fc 01       	movw	r30, r24
     e1e:	ee 52       	subi	r30, 0x2E	; 46
     e20:	fa 4f       	sbci	r31, 0xFA	; 250
     e22:	83 81       	ldd	r24, Z+3	; 0x03
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	08 95       	ret

00000e28 <getSensorDeviceAddress>:
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	fc 01       	movw	r30, r24
     e32:	ee 52       	subi	r30, 0x2E	; 46
     e34:	fa 4f       	sbci	r31, 0xFA	; 250
     e36:	80 81       	ld	r24, Z
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	08 95       	ret

00000e3c <setSensorData>:
}

// Sets the sensor data using an int variable
void setSensorData(int index, int data)
{
	g_sensors[index].lastData[0] = (uint8_t) data;
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	fc 01       	movw	r30, r24
     e46:	ee 52       	subi	r30, 0x2E	; 46
     e48:	fa 4f       	sbci	r31, 0xFA	; 250
     e4a:	61 83       	std	Z+1, r22	; 0x01
	g_sensors[index].lastData[1] = data >> 8;
     e4c:	72 83       	std	Z+2, r23	; 0x02
     e4e:	08 95       	ret

00000e50 <setSensorShouldRead>:
}

// Set the shouldRead variable
void setSensorShouldRead(int index, int data)
{
	g_sensors[index].shouldRead = data;
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	fc 01       	movw	r30, r24
     e5a:	ee 52       	subi	r30, 0x2E	; 46
     e5c:	fa 4f       	sbci	r31, 0xFA	; 250
     e5e:	63 83       	std	Z+3, r22	; 0x03
     e60:	08 95       	ret

00000e62 <clearSensorShouldRead>:
}

// Clear the shouldRead variable
void clearSensorShouldRead(int index)
{
	g_sensors[index].shouldRead = 0;
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	fc 01       	movw	r30, r24
     e6c:	ee 52       	subi	r30, 0x2E	; 46
     e6e:	fa 4f       	sbci	r31, 0xFA	; 250
     e70:	13 82       	std	Z+3, r1	; 0x03
     e72:	08 95       	ret

00000e74 <setSensorDeviceAddress>:
}

// Sets the sensor's device address
void setSensorDeviceAddress(int index, int address)
{
	g_sensors[index].DevAddress = address;
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	fc 01       	movw	r30, r24
     e7e:	ee 52       	subi	r30, 0x2E	; 46
     e80:	fa 4f       	sbci	r31, 0xFA	; 250
     e82:	60 83       	st	Z, r22
     e84:	08 95       	ret

00000e86 <I2CHandle>:

// This handles I2C using info from the I2C-Instructions
void I2CHandle()
{	
	struct I2CInstruction * curInst;			// Holds the current instruction
	curInst = getCurrentInstruction();			// ""		""		""		""
     e86:	0e 94 f6 02 	call	0x5ec	; 0x5ec <getCurrentInstruction>
	int curInd = curInst->dev_index;			// Holds the index of the device in the current instruction
	
	static int dataPtr = 0;						// Holds how many bytes have been written/read

	// Switch for the value of the I2C status Reg
	switch(TWSR & 0b11111000)
     e8a:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     e8e:	e4 2f       	mov	r30, r20
     e90:	e8 7f       	andi	r30, 0xF8	; 248
     e92:	4e 2f       	mov	r20, r30
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	fa 01       	movw	r30, r20
     e98:	38 97       	sbiw	r30, 0x08	; 8
     e9a:	e1 35       	cpi	r30, 0x51	; 81
     e9c:	f1 05       	cpc	r31, r1
     e9e:	08 f0       	brcs	.+2      	; 0xea2 <I2CHandle+0x1c>
     ea0:	c0 c0       	rjmp	.+384    	; 0x1022 <I2CHandle+0x19c>
     ea2:	ea 5a       	subi	r30, 0xAA	; 170
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__tablejump2__>
}

// Returns the device address for the sensor
int getSensorDeviceAddress(int index)
{
	return g_sensors[index].DevAddress;
     eaa:	dc 01       	movw	r26, r24
     eac:	ed 91       	ld	r30, X+
     eae:	fc 91       	ld	r31, X
     eb0:	11 97       	sbiw	r26, 0x01	; 1
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	ee 52       	subi	r30, 0x2E	; 46
     ebc:	fa 4f       	sbci	r31, 0xFA	; 250

// Read is high on SDA, Write is low on SDA
// Loads the slave address + r/w onto the I2C bus
inline void loadAdress(uint8_t address, uint8_t r_w)
{
	loadTWDR((address << 1) | r_w);
     ebe:	20 81       	ld	r18, Z
     ec0:	22 0f       	add	r18, r18
     ec2:	12 96       	adiw	r26, 0x02	; 2
     ec4:	9c 91       	ld	r25, X
     ec6:	82 2f       	mov	r24, r18
     ec8:	89 2b       	or	r24, r25
}

// Load data into TWDR
inline void loadTWDR(uint8_t data)
{
	TWDR = data;
     eca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     ece:	85 e8       	ldi	r24, 0x85	; 133
     ed0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     ed4:	ae c0       	rjmp	.+348    	; 0x1032 <I2CHandle+0x1ac>
			loadAdress(getSensorDeviceAddress(curInd), curInst->readWrite);	// Load the device address and r/w
			break;
			
		// Slave address + write has been transmitted and ACK received
		case SLA_W_TRA_ACK_REC:
			loadTWDR(*(curInst->data));			// Load the first byte to write into TWDR
     ed6:	dc 01       	movw	r26, r24
     ed8:	14 96       	adiw	r26, 0x04	; 4
     eda:	ed 91       	ld	r30, X+
     edc:	fc 91       	ld	r31, X
     ede:	15 97       	sbiw	r26, 0x05	; 5
     ee0:	80 81       	ld	r24, Z
}

// Load data into TWDR
inline void loadTWDR(uint8_t data)
{
	TWDR = data;
     ee2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     ee6:	85 e8       	ldi	r24, 0x85	; 133
     ee8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			break;
			
		// Slave address + write has been transmitted and ACK received
		case SLA_W_TRA_ACK_REC:
			loadTWDR(*(curInst->data));			// Load the first byte to write into TWDR
			dataPtr = 1;						// Update  dataPtr
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <dataPtr.1726+0x1>
     ef4:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <dataPtr.1726>
			break;
     ef8:	9c c0       	rjmp	.+312    	; 0x1032 <I2CHandle+0x1ac>
}

// Sends a stop condition to the I2C bus
inline void sendStopCond()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ACK_EN) | (1 << TWI_STOP) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     efa:	85 ed       	ldi	r24, 0xD5	; 213
     efc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			
		// Slave address + write has been transmitted and NACK received
		case SLA_W_TRA_NACK_REC:
			// Could put an error message here
			sendStopCond();						// Send a stop condition
			moveToNextInstruction();			// Move to the next instruction (could comment out)
     f00:	0e 94 bb 02 	call	0x576	; 0x576 <moveToNextInstruction>
			g_state = 0;						// set g_state to 0 (I2C ready/off)
     f04:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <g_state>
			return;
     f08:	08 95       	ret
		
		// A data byte has been transmitted and an ACK received
		case DATA_TRA_ACK_REC:
			// If all of the bytes have been transmitted
			if(dataPtr == curInst->length)
     f0a:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <dataPtr.1726>
     f0e:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <dataPtr.1726+0x1>
     f12:	fc 01       	movw	r30, r24
     f14:	46 81       	ldd	r20, Z+6	; 0x06
     f16:	57 81       	ldd	r21, Z+7	; 0x07
     f18:	42 17       	cp	r20, r18
     f1a:	53 07       	cpc	r21, r19
     f1c:	61 f4       	brne	.+24     	; 0xf36 <I2CHandle+0xb0>
}

// Sends a stop condition to the I2C bus
inline void sendStopCond()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ACK_EN) | (1 << TWI_STOP) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     f1e:	85 ed       	ldi	r24, 0xD5	; 213
     f20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		case DATA_TRA_ACK_REC:
			// If all of the bytes have been transmitted
			if(dataPtr == curInst->length)
			{
				sendStopCond();					// Send a stop condition
				moveToNextInstruction();		// Move to the next instruction (could comment out)
     f24:	0e 94 bb 02 	call	0x576	; 0x576 <moveToNextInstruction>
				g_state = 0;					// set g_state to 0 (I2C ready/off)
     f28:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <g_state>
				dataPtr = 0;					// Reset the dataPtr var
     f2c:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <dataPtr.1726+0x1>
     f30:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <dataPtr.1726>
				return;
     f34:	08 95       	ret
			}
			// Otherwise
			else
			{	
				loadTWDR(*((curInst->data) + dataPtr));	// Load the next byte to write into TWDR
     f36:	84 81       	ldd	r24, Z+4	; 0x04
     f38:	95 81       	ldd	r25, Z+5	; 0x05
     f3a:	fc 01       	movw	r30, r24
     f3c:	e2 0f       	add	r30, r18
     f3e:	f3 1f       	adc	r31, r19
     f40:	80 81       	ld	r24, Z
}

// Load data into TWDR
inline void loadTWDR(uint8_t data)
{
	TWDR = data;
     f42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     f46:	85 e8       	ldi	r24, 0x85	; 133
     f48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			}
			// Otherwise
			else
			{	
				loadTWDR(*((curInst->data) + dataPtr));	// Load the next byte to write into TWDR
				dataPtr++;								// Increment the dataPtr
     f4c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <dataPtr.1726>
     f50:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <dataPtr.1726+0x1>
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <dataPtr.1726+0x1>
     f5a:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <dataPtr.1726>
			}
			break;
     f5e:	69 c0       	rjmp	.+210    	; 0x1032 <I2CHandle+0x1ac>
}

// Sends a stop condition to the I2C bus
inline void sendStopCond()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ACK_EN) | (1 << TWI_STOP) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     f60:	85 ed       	ldi	r24, 0xD5	; 213
     f62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			break;
			
		// A data byte has been transmitted and a NACK received
		case DATA_TRA_NACK_REC:
			sendStopCond();					// Send a stop condition
			moveToNextInstruction();		// Move to the next instruction (could comment out)
     f66:	0e 94 bb 02 	call	0x576	; 0x576 <moveToNextInstruction>
			g_state = 0;					// set g_state to 0 (I2C ready/off)
     f6a:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <g_state>
			return;
     f6e:	08 95       	ret
			
		// Slave address + read transmitted and an ACK received
		case SLA_R_TRA_ACK_REC:
			// If only 1 byte is going to be read
			if(dataPtr == curInst->length - 1)
     f70:	fc 01       	movw	r30, r24
     f72:	86 81       	ldd	r24, Z+6	; 0x06
     f74:	97 81       	ldd	r25, Z+7	; 0x07
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <dataPtr.1726>
     f7c:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <dataPtr.1726+0x1>
     f80:	82 17       	cp	r24, r18
     f82:	93 07       	cpc	r25, r19
     f84:	21 f4       	brne	.+8      	; 0xf8e <I2CHandle+0x108>
}

// Disables ACK
inline void disableAck()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     f86:	85 e8       	ldi	r24, 0x85	; 133
     f88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     f8c:	52 c0       	rjmp	.+164    	; 0x1032 <I2CHandle+0x1ac>
}

// Enables ACK
inline void enableACK()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ACK_EN) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     f8e:	85 ec       	ldi	r24, 0xC5	; 197
     f90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     f94:	4e c0       	rjmp	.+156    	; 0x1032 <I2CHandle+0x1ac>
}

// Sends a stop condition to the I2C bus
inline void sendStopCond()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ACK_EN) | (1 << TWI_STOP) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     f96:	85 ed       	ldi	r24, 0xD5	; 213
     f98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			break;
		
		// Slave address + read transmitted and a NACK received
		case SLA_R_TRA_NACK_REC:
			sendStopCond();					// Send a stop condition
			moveToNextInstruction();		// Move to the next instruction (could comment out)
     f9c:	0e 94 bb 02 	call	0x576	; 0x576 <moveToNextInstruction>
			g_state = 0;					// set g_state to 0 (I2C ready/off)
     fa0:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <g_state>
			return;
     fa4:	08 95       	ret
			
		// Data received and ACK transmitted
		case DATA_REC_ACK_TRA:
			curInst->data[dataPtr] = TWDR;		// Read in the byte
     fa6:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <dataPtr.1726>
     faa:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <dataPtr.1726+0x1>
     fae:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     fb2:	dc 01       	movw	r26, r24
     fb4:	14 96       	adiw	r26, 0x04	; 4
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
     fba:	15 97       	sbiw	r26, 0x05	; 5
     fbc:	e2 0f       	add	r30, r18
     fbe:	f3 1f       	adc	r31, r19
     fc0:	40 83       	st	Z, r20
			dataPtr++;							// Increment dataPtr
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	30 93 d0 05 	sts	0x05D0, r19	; 0x8005d0 <dataPtr.1726+0x1>
     fca:	20 93 cf 05 	sts	0x05CF, r18	; 0x8005cf <dataPtr.1726>
			// If we've read as much as we want
			if(dataPtr == curInst->length - 1)
     fce:	16 96       	adiw	r26, 0x06	; 6
     fd0:	8d 91       	ld	r24, X+
     fd2:	9c 91       	ld	r25, X
     fd4:	17 97       	sbiw	r26, 0x07	; 7
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	28 17       	cp	r18, r24
     fda:	39 07       	cpc	r19, r25
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <I2CHandle+0x160>
}

// Disables ACK
inline void disableAck()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     fde:	85 e8       	ldi	r24, 0x85	; 133
     fe0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     fe4:	26 c0       	rjmp	.+76     	; 0x1032 <I2CHandle+0x1ac>
}

// Enables ACK
inline void enableACK()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ACK_EN) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
     fe6:	85 ec       	ldi	r24, 0xC5	; 197
     fe8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     fec:	22 c0       	rjmp	.+68     	; 0x1032 <I2CHandle+0x1ac>
			}
			break;
		
		// Data received and NACK transmitted
		case DATA_REC_NACK_TRA:
			curInst->data[dataPtr] = TWDR;	// Read in the byte
     fee:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     ff2:	dc 01       	movw	r26, r24
     ff4:	14 96       	adiw	r26, 0x04	; 4
     ff6:	ed 91       	ld	r30, X+
     ff8:	fc 91       	ld	r31, X
     ffa:	15 97       	sbiw	r26, 0x05	; 5
     ffc:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <dataPtr.1726>
    1000:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <dataPtr.1726+0x1>
    1004:	e8 0f       	add	r30, r24
    1006:	f9 1f       	adc	r31, r25
    1008:	20 83       	st	Z, r18
			dataPtr = 0;					// Reset the dataPtr var
    100a:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <dataPtr.1726+0x1>
    100e:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <dataPtr.1726>
}

// Sends a stop condition to the I2C bus
inline void sendStopCond()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ACK_EN) | (1 << TWI_STOP) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
    1012:	85 ed       	ldi	r24, 0xD5	; 213
    1014:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		// Data received and NACK transmitted
		case DATA_REC_NACK_TRA:
			curInst->data[dataPtr] = TWDR;	// Read in the byte
			dataPtr = 0;					// Reset the dataPtr var
			sendStopCond();					// Send a stop condition
			moveToNextInstruction();		// Move to the next instruction (could comment out)
    1018:	0e 94 bb 02 	call	0x576	; 0x576 <moveToNextInstruction>
			g_state = 0;					// set g_state to 0 (I2C ready/off)
    101c:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <g_state>
			return;
    1020:	08 95       	ret
}

// Sends a stop condition to the I2C bus
inline void sendStopCond()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ACK_EN) | (1 << TWI_STOP) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
    1022:	85 ed       	ldi	r24, 0xD5	; 213
    1024:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			return;
			
		// If one of the other statuses pops up
		default:
			sendStopCond();					// Send a stop condition
			moveToNextInstruction();		// Move to the next instruction (could comment out)
    1028:	0e 94 bb 02 	call	0x576	; 0x576 <moveToNextInstruction>
			g_state = 0;					// set g_state to 0 (I2C ready/off)
    102c:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <g_state>
			return;
    1030:	08 95       	ret
	}
	// If we haven't returned, then make sure g_state is 1
	g_state = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <g_state>
	vsTask();
    1038:	0e 94 37 11 	call	0x226e	; 0x226e <vsTask>
    103c:	08 95       	ret

0000103e <__vector_36>:
#include "I2CInstruction.h"
#include "VirtualSerial.h"

// I2C event interrupt
ISR(TWI_vect)
{
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31
	I2CHandle();
    1060:	0e 94 43 07 	call	0xe86	; 0xe86 <I2CHandle>
}
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <I2CTask>:

// Called every loop to determine when to start I2C transaction
void I2CTask()
{
	// If g_state is low and there is an instruction available
	if(!g_state && !I2CInstrGetEmpty())
    1086:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <g_state>
    108a:	81 11       	cpse	r24, r1
    108c:	0a c0       	rjmp	.+20     	; 0x10a2 <I2CTask+0x1c>
    108e:	0e 94 b0 02 	call	0x560	; 0x560 <I2CInstrGetEmpty>
    1092:	89 2b       	or	r24, r25
    1094:	31 f4       	brne	.+12     	; 0x10a2 <I2CTask+0x1c>
/* End of g_sensors API*/

// Sends a start condition to the I2C bus
inline void sendStartCond()
{
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ACK_EN) | (1 << TWI_START) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
    1096:	85 ee       	ldi	r24, 0xE5	; 229
    1098:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	// If g_state is low and there is an instruction available
	if(!g_state && !I2CInstrGetEmpty())
	{
		// Send a start condition and update g_state
		sendStartCond();
		g_state = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <g_state>
    10a2:	08 95       	ret

000010a4 <I2CInit>:
	 TWPS = 1
	 
	 */
	
	// Set TWBR to 3 (calculation shown above)
	TWBR = 6;
    10a4:	86 e0       	ldi	r24, 0x06	; 6
    10a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	
	// Initial TWCR settings
	TWCR = (1 << TWI_INT_FLAG) | (1 << TWI_ENABLE) | (1 << TWI_INT_EN);
    10aa:	85 e8       	ldi	r24, 0x85	; 133
    10ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    10b0:	08 95       	ret

000010b2 <shiftInBit>:
#include <util/delay.h>
#include "ShiftReg.h"

void shiftInBit(uint8_t in)
{
	if (in)
    10b2:	88 23       	and	r24, r24
    10b4:	11 f0       	breq	.+4      	; 0x10ba <shiftInBit+0x8>
	{
		PORTF &= ~(1<<PORTF0);
    10b6:	88 98       	cbi	0x11, 0	; 17
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <shiftInBit+0xa>
	}
	else
	{
		PORTF |= (1<<PORTF0);
    10ba:	88 9a       	sbi	0x11, 0	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10bc:	8a e1       	ldi	r24, 0x1A	; 26
    10be:	8a 95       	dec	r24
    10c0:	f1 f7       	brne	.-4      	; 0x10be <shiftInBit+0xc>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <shiftInBit+0x12>
	}
	_delay_us(5);
	PINF |= (1<<PINF1);
    10c4:	79 9a       	sbi	0x0f, 1	; 15
    10c6:	8a e1       	ldi	r24, 0x1A	; 26
    10c8:	8a 95       	dec	r24
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <shiftInBit+0x16>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <shiftInBit+0x1c>
	_delay_us(5);
	PINF |= (1<<PINF1);
    10ce:	79 9a       	sbi	0x0f, 1	; 15
    10d0:	8a e1       	ldi	r24, 0x1A	; 26
    10d2:	8a 95       	dec	r24
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <shiftInBit+0x20>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <shiftInBit+0x26>
    10d8:	08 95       	ret

000010da <shiftRegInit>:

}

void shiftRegInit()
{
	DDRF |= (1<<DDF1) | (1<<DDF0);
    10da:	80 b3       	in	r24, 0x10	; 16
    10dc:	83 60       	ori	r24, 0x03	; 3
    10de:	80 bb       	out	0x10, r24	; 16
	PORTF |= (1<<PORTF0);
    10e0:	88 9a       	sbi	0x11, 0	; 17
	PORTF &= ~(1<<PORTF1);
    10e2:	89 98       	cbi	0x11, 1	; 17
    10e4:	84 e1       	ldi	r24, 0x14	; 20
    10e6:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i < 20; i++)
	{
		PORTF |= (1<<PORTF1);
    10e8:	89 9a       	sbi	0x11, 1	; 17
    10ea:	2a e1       	ldi	r18, 0x1A	; 26
    10ec:	2a 95       	dec	r18
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <shiftRegInit+0x12>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <shiftRegInit+0x18>
		_delay_us(5);
		PORTF &= ~(1<<PORTF1);
    10f2:	89 98       	cbi	0x11, 1	; 17
    10f4:	2a e1       	ldi	r18, 0x1A	; 26
    10f6:	2a 95       	dec	r18
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <shiftRegInit+0x1c>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <shiftRegInit+0x22>
    10fc:	01 97       	sbiw	r24, 0x01	; 1
void shiftRegInit()
{
	DDRF |= (1<<DDF1) | (1<<DDF0);
	PORTF |= (1<<PORTF0);
	PORTF &= ~(1<<PORTF1);
	for (int i = 0; i < 20; i++)
    10fe:	a1 f7       	brne	.-24     	; 0x10e8 <shiftRegInit+0xe>
		PORTF |= (1<<PORTF1);
		_delay_us(5);
		PORTF &= ~(1<<PORTF1);
		_delay_us(5);
	}
    1100:	08 95       	ret

00001102 <fullStepLeft>:
	2: B6, D6
	3: B4, D6
	*/
	
	// Switch: the state of the left stepper
	switch (l_state)
    1102:	90 91 ff 05 	lds	r25, 0x05FF	; 0x8005ff <l_state.1682>
    1106:	91 30       	cpi	r25, 0x01	; 1
    1108:	71 f0       	breq	.+28     	; 0x1126 <fullStepLeft+0x24>
    110a:	1c f4       	brge	.+6      	; 0x1112 <fullStepLeft+0x10>
    110c:	99 23       	and	r25, r25
    110e:	31 f0       	breq	.+12     	; 0x111c <fullStepLeft+0x1a>
    1110:	19 c0       	rjmp	.+50     	; 0x1144 <fullStepLeft+0x42>
    1112:	92 30       	cpi	r25, 0x02	; 2
    1114:	69 f0       	breq	.+26     	; 0x1130 <fullStepLeft+0x2e>
    1116:	93 30       	cpi	r25, 0x03	; 3
    1118:	81 f0       	breq	.+32     	; 0x113a <fullStepLeft+0x38>
    111a:	14 c0       	rjmp	.+40     	; 0x1144 <fullStepLeft+0x42>
	{
	// Move the motor to l_state
	case 0:
		PORTD |= (1<<PORTD4);
    111c:	5c 9a       	sbi	0x0b, 4	; 11
		PORTB |= (1<<PORTB4);
    111e:	2c 9a       	sbi	0x05, 4	; 5
		PORTD &= ~(1<<PORTD6);
    1120:	5e 98       	cbi	0x0b, 6	; 11
		PORTB &= ~(1<<PORTB6);
    1122:	2e 98       	cbi	0x05, 6	; 5
		break;
    1124:	12 c0       	rjmp	.+36     	; 0x114a <fullStepLeft+0x48>
	case 1:
		PORTD |= (1<<PORTD4);
    1126:	5c 9a       	sbi	0x0b, 4	; 11
		PORTB |= (1<<PORTB6);
    1128:	2e 9a       	sbi	0x05, 6	; 5
		PORTD &= ~(1<<PORTD6);
    112a:	5e 98       	cbi	0x0b, 6	; 11
		PORTB &= ~(1<<PORTB4);
    112c:	2c 98       	cbi	0x05, 4	; 5
		break;
    112e:	0d c0       	rjmp	.+26     	; 0x114a <fullStepLeft+0x48>
	case 2:
		PORTD |= (1<<PORTD6);
    1130:	5e 9a       	sbi	0x0b, 6	; 11
		PORTB |= (1<<PORTB6);
    1132:	2e 9a       	sbi	0x05, 6	; 5
		PORTD &= ~(1<<PORTD4);
    1134:	5c 98       	cbi	0x0b, 4	; 11
		PORTB &= ~(1<<PORTB4);
    1136:	2c 98       	cbi	0x05, 4	; 5
		break;
    1138:	08 c0       	rjmp	.+16     	; 0x114a <fullStepLeft+0x48>
	case 3:
		PORTD |= (1<<PORTD6);
    113a:	5e 9a       	sbi	0x0b, 6	; 11
		PORTB |= (1<<PORTB4);
    113c:	2c 9a       	sbi	0x05, 4	; 5
		PORTD &= ~(1<<PORTD4);
    113e:	5c 98       	cbi	0x0b, 4	; 11
		PORTB &= ~(1<<PORTB6);
    1140:	2e 98       	cbi	0x05, 6	; 5
		break;
    1142:	03 c0       	rjmp	.+6      	; 0x114a <fullStepLeft+0x48>
	default:
		l_state = 0;	
    1144:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <l_state.1682>
		return;
    1148:	08 95       	ret
	}
	
	// If the motor is supposed to be moving forward
	if (forwardBackward == DIR_FORWARD)
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	31 f4       	brne	.+12     	; 0x115a <fullStepLeft+0x58>
	{
		l_state++;	// Increment the l_state
    114e:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <l_state.1682>
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <l_state.1682>
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <fullStepLeft+0x62>
	}
	// Otherwise
	else
	{
		l_state--;	// Decrement the l_state
    115a:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <l_state.1682>
    115e:	81 50       	subi	r24, 0x01	; 1
    1160:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <l_state.1682>
	}
	
	// If the motor's state was incremented too high
	if (l_state > 3)
    1164:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <l_state.1682>
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	1c f0       	brlt	.+6      	; 0x1172 <fullStepLeft+0x70>
	{
		// Reset it to 0
		l_state = 0;
    116c:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <l_state.1682>
    1170:	08 95       	ret
	}
	// Otherwise if it is decremented too low
	else if (l_state < 0)
    1172:	88 23       	and	r24, r24
    1174:	1c f4       	brge	.+6      	; 0x117c <fullStepLeft+0x7a>
	{
		// Reset it to 3
		l_state = 3;
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <l_state.1682>
    117c:	08 95       	ret

0000117e <__vector_17>:
// This stores the direction of the two stepper motors
static uint8_t g_direction[2] = {DIR_FORWARD, DIR_FORWARD};

// This occurs at TOP for the left motor's CTC
ISR(TIMER1_COMPA_vect)
{
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
	fullStepLeft(g_direction[LEFT_MOTOR_INDEX]);
    11a0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_direction+0x1>
    11a4:	0e 94 81 08 	call	0x1102	; 0x1102 <fullStepLeft>
}
    11a8:	ff 91       	pop	r31
    11aa:	ef 91       	pop	r30
    11ac:	bf 91       	pop	r27
    11ae:	af 91       	pop	r26
    11b0:	9f 91       	pop	r25
    11b2:	8f 91       	pop	r24
    11b4:	7f 91       	pop	r23
    11b6:	6f 91       	pop	r22
    11b8:	5f 91       	pop	r21
    11ba:	4f 91       	pop	r20
    11bc:	3f 91       	pop	r19
    11be:	2f 91       	pop	r18
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <fullStepRight>:
	2: B7, D7
	3: B5, D7
	*/
	
	// Switch: the state of the right stepper
	switch (r_state)
    11ca:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <r_state.1692>
    11ce:	91 30       	cpi	r25, 0x01	; 1
    11d0:	71 f0       	breq	.+28     	; 0x11ee <fullStepRight+0x24>
    11d2:	1c f4       	brge	.+6      	; 0x11da <fullStepRight+0x10>
    11d4:	99 23       	and	r25, r25
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <fullStepRight+0x1a>
    11d8:	19 c0       	rjmp	.+50     	; 0x120c <fullStepRight+0x42>
    11da:	92 30       	cpi	r25, 0x02	; 2
    11dc:	69 f0       	breq	.+26     	; 0x11f8 <fullStepRight+0x2e>
    11de:	93 30       	cpi	r25, 0x03	; 3
    11e0:	81 f0       	breq	.+32     	; 0x1202 <fullStepRight+0x38>
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <fullStepRight+0x42>
	{
	// Move the motor to r_state
	case 0:
		PORTD |= (1<<PORTD5);
    11e4:	5d 9a       	sbi	0x0b, 5	; 11
		PORTB |= (1<<PORTB5);
    11e6:	2d 9a       	sbi	0x05, 5	; 5
		PORTD &= ~(1<<PORTD7);
    11e8:	5f 98       	cbi	0x0b, 7	; 11
		PORTB &= ~(1<<PORTB7);
    11ea:	2f 98       	cbi	0x05, 7	; 5
		break;
    11ec:	12 c0       	rjmp	.+36     	; 0x1212 <fullStepRight+0x48>
	case 1:
		PORTD |= (1<<PORTD5);
    11ee:	5d 9a       	sbi	0x0b, 5	; 11
		PORTB |= (1<<PORTB7);
    11f0:	2f 9a       	sbi	0x05, 7	; 5
		PORTD &= ~(1<<PORTD7);
    11f2:	5f 98       	cbi	0x0b, 7	; 11
		PORTB &= ~(1<<PORTB5);
    11f4:	2d 98       	cbi	0x05, 5	; 5
		break;	
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <fullStepRight+0x48>
	case 2:
		PORTD |= (1<<PORTD7);
    11f8:	5f 9a       	sbi	0x0b, 7	; 11
		PORTB |= (1<<PORTB7);
    11fa:	2f 9a       	sbi	0x05, 7	; 5
		PORTD &= ~(1<<PORTD5);
    11fc:	5d 98       	cbi	0x0b, 5	; 11
		PORTB &= ~(1<<PORTB5);
    11fe:	2d 98       	cbi	0x05, 5	; 5
		break;
    1200:	08 c0       	rjmp	.+16     	; 0x1212 <fullStepRight+0x48>
	case 3:
		PORTD |= (1<<PORTD7);
    1202:	5f 9a       	sbi	0x0b, 7	; 11
		PORTB |= (1<<PORTB5);
    1204:	2d 9a       	sbi	0x05, 5	; 5
		PORTD &= ~(1<<PORTD5);
    1206:	5d 98       	cbi	0x0b, 5	; 11
		PORTB &= ~(1<<PORTB7);
    1208:	2f 98       	cbi	0x05, 7	; 5
		break;
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <fullStepRight+0x48>
	default:
		r_state = 0;	
    120c:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <r_state.1692>
		return;
    1210:	08 95       	ret
	}
	
	// If the motor is supposed to be moving forward
	if (forwardBackward == DIR_FORWARD)
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	31 f4       	brne	.+12     	; 0x1222 <fullStepRight+0x58>
	{
		r_state++;	// Increment the r_state
    1216:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <r_state.1692>
    121a:	8f 5f       	subi	r24, 0xFF	; 255
    121c:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <r_state.1692>
    1220:	05 c0       	rjmp	.+10     	; 0x122c <fullStepRight+0x62>
	}
	// Otherwise
	else
	{
		r_state--;	// Decrement the r_state
    1222:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <r_state.1692>
    1226:	81 50       	subi	r24, 0x01	; 1
    1228:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <r_state.1692>
	}
	
	// If the motor's state was incremented too high
	if (r_state > 3)
    122c:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <r_state.1692>
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	1c f0       	brlt	.+6      	; 0x123a <fullStepRight+0x70>
	{
		// Reset it to 0
		r_state = 0;
    1234:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <r_state.1692>
    1238:	08 95       	ret
	}
	// Otherwise if it is decremented too low
	else if (r_state < 0)
    123a:	88 23       	and	r24, r24
    123c:	1c f4       	brge	.+6      	; 0x1244 <fullStepRight+0x7a>
	{
		// Reset it to 3
		r_state = 3;
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <r_state.1692>
    1244:	08 95       	ret

00001246 <__vector_32>:
	fullStepLeft(g_direction[LEFT_MOTOR_INDEX]);
}

// This occurs at TOP for the right motor's CTC
ISR(TIMER3_COMPA_vect)
{
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
	fullStepRight(g_direction[RIGHT_MOTOR_INDEX]);
    1268:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_direction>
    126c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fullStepRight>
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <main>:

// extern FILE USBSerialStream;
int g_diff = 0;				// Debugging

int main(void)
{	
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	00 d0       	rcall	.+0      	; 0x1298 <main+0x6>
    1298:	00 d0       	rcall	.+0      	; 0x129a <main+0x8>
    129a:	1f 92       	push	r1
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	MCUSR &= ~(1 << WDRF);
    12a0:	84 b7       	in	r24, 0x34	; 52
    12a2:	87 7f       	andi	r24, 0xF7	; 247
    12a4:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	a8 95       	wdr
    12ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    12b0:	88 61       	ori	r24, 0x18	; 24
    12b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    12b6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    12ba:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	MCUCR |= (1<<JTD);
    12bc:	85 b7       	in	r24, 0x35	; 53
    12be:	80 68       	ori	r24, 0x80	; 128
    12c0:	85 bf       	out	0x35, r24	; 53
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	80 e8       	ldi	r24, 0x80	; 128
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    12ce:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    12d2:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);

	I2CInit();
    12d4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <I2CInit>
	millisTimerInit();
    12d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <millisTimerInit>
	
 	dcMotorInit();
    12dc:	0e 94 91 01 	call	0x322	; 0x322 <dcMotorInit>
	setMotorPWR(BOTH_MOTORS_PASS, 80);
    12e0:	60 e5       	ldi	r22, 0x50	; 80
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <setMotorPWR>
 	encoderInit();
    12e8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <encoderInit>
	usartInit();
    12ec:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <usartInit>

	sei();
    12f0:	78 94       	sei
	
	shiftRegInit();
    12f2:	0e 94 6d 08 	call	0x10da	; 0x10da <shiftRegInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12f6:	2f ef       	ldi	r18, 0xFF	; 255
    12f8:	84 e3       	ldi	r24, 0x34	; 52
    12fa:	9c e0       	ldi	r25, 0x0C	; 12
    12fc:	21 50       	subi	r18, 0x01	; 1
    12fe:	80 40       	sbci	r24, 0x00	; 0
    1300:	90 40       	sbci	r25, 0x00	; 0
    1302:	e1 f7       	brne	.-8      	; 0x12fc <main+0x6a>
    1304:	00 c0       	rjmp	.+0      	; 0x1306 <main+0x74>
    1306:	00 00       	nop
	
	
	_delay_ms(250);
	
	
	setSensorData(NUM_OF_TOTAL_SENSORS, 0);
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	8a e0       	ldi	r24, 0x0A	; 10
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 1e 07 	call	0xe3c	; 0xe3c <setSensorData>
	setSensorDeviceAddress(NUM_OF_TOTAL_SENSORS, 0x29);
    1314:	69 e2       	ldi	r22, 0x29	; 41
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	8a e0       	ldi	r24, 0x0A	; 10
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 3a 07 	call	0xe74	; 0xe74 <setSensorDeviceAddress>
	setSensorShouldRead(NUM_OF_TOTAL_SENSORS, 51);
    1320:	63 e3       	ldi	r22, 0x33	; 51
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 28 07 	call	0xe50	; 0xe50 <setSensorShouldRead>
	for (int i = 0; i < NUM_OF_DIST_SENSORS; i++)
    132c:	00 e0       	ldi	r16, 0x00	; 0
    132e:	10 e0       	ldi	r17, 0x00	; 0
	{
		VL6180XInit(i);	
    1330:	c8 01       	movw	r24, r16
    1332:	0e 94 53 11 	call	0x22a6	; 0x22a6 <VL6180XInit>
	
	
	setSensorData(NUM_OF_TOTAL_SENSORS, 0);
	setSensorDeviceAddress(NUM_OF_TOTAL_SENSORS, 0x29);
	setSensorShouldRead(NUM_OF_TOTAL_SENSORS, 51);
	for (int i = 0; i < NUM_OF_DIST_SENSORS; i++)
    1336:	0f 5f       	subi	r16, 0xFF	; 255
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	08 30       	cpi	r16, 0x08	; 8
    133c:	11 05       	cpc	r17, r1
    133e:	c1 f7       	brne	.-16     	; 0x1330 <main+0x9e>
	{
		VL6180XInit(i);	
	}
	minimu9V5Init(NUM_OF_DIST_SENSORS);
    1340:	88 e0       	ldi	r24, 0x08	; 8
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 86 04 	call	0x90c	; 0x90c <minimu9V5Init>
	
	
	int lastMillis = 0;
	int nextMove = 0;	//Testing
    1348:	c1 2c       	mov	r12, r1
    134a:	d1 2c       	mov	r13, r1
		VL6180XInit(i);	
	}
	minimu9V5Init(NUM_OF_DIST_SENSORS);
	
	
	int lastMillis = 0;
    134c:	00 e0       	ldi	r16, 0x00	; 0
    134e:	10 e0       	ldi	r17, 0x00	; 0
					moveStraight(10);
					nextMove++;
					break;
				case TURNING_LEFT_STATE:
					turnLeft(90);
					nextMove++;
    1350:	0f 2e       	mov	r0, r31
    1352:	f3 e0       	ldi	r31, 0x03	; 3
    1354:	2f 2e       	mov	r2, r31
    1356:	f0 2d       	mov	r31, r0
    1358:	31 2c       	mov	r3, r1
				case MOVING_BACKWARDS_STATE:
					moveBackwards(500);
					nextMove = 1;
					break;
				default:
					nextMove = 1;
    135a:	88 24       	eor	r8, r8
    135c:	83 94       	inc	r8
    135e:	91 2c       	mov	r9, r1
					turnLeft(90);
					nextMove++;
					break;
				case TURNING_RIGHT_STATE:
					turnRight(90);
					nextMove++;
    1360:	68 94       	set
    1362:	44 24       	eor	r4, r4
    1364:	42 f8       	bld	r4, 2
    1366:	51 2c       	mov	r5, r1
			{
				switch(nextMove)
				{
				case MOVING_STRAIGHT_STATE:
					moveStraight(10);
					nextMove++;
    1368:	68 94       	set
    136a:	66 24       	eor	r6, r6
    136c:	61 f8       	bld	r6, 1
    136e:	71 2c       	mov	r7, r1
				default:
					nextMove = 1;
				}
			}
			
			char prt[] = "    ";
    1370:	ce 01       	movw	r24, r28
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	7c 01       	movw	r14, r24
			sprintf(prt, "%d\n", getDistSensorDist(FRONT_RIGHT_INDEX));
    1376:	0f 2e       	mov	r0, r31
    1378:	fd ea       	ldi	r31, 0xAD	; 173
    137a:	af 2e       	mov	r10, r31
    137c:	f1 e0       	ldi	r31, 0x01	; 1
    137e:	bf 2e       	mov	r11, r31
    1380:	f0 2d       	mov	r31, r0
	
	int lastMillis = 0;
	int nextMove = 0;	//Testing
	while(1)
	{
		I2CTask();
    1382:	0e 94 43 08 	call	0x1086	; 0x1086 <I2CTask>
		VL6180XTask();
    1386:	0e 94 89 12 	call	0x2512	; 0x2512 <VL6180XTask>
		minimu9V5Task(NUM_OF_DIST_SENSORS);
    138a:	88 e0       	ldi	r24, 0x08	; 8
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 36 04 	call	0x86c	; 0x86c <minimu9V5Task>
		motionTask();
    1392:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <motionTask>
		usartTask();
    1396:	0e 94 09 11 	call	0x2212	; 0x2212 <usartTask>
		
		if(abs(getMillis() - lastMillis) > 200)
    139a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
    139e:	80 1b       	sub	r24, r16
    13a0:	91 0b       	sbc	r25, r17
    13a2:	9c 01       	movw	r18, r24
    13a4:	22 f4       	brpl	.+8      	; 0x13ae <main+0x11c>
    13a6:	22 27       	eor	r18, r18
    13a8:	33 27       	eor	r19, r19
    13aa:	28 1b       	sub	r18, r24
    13ac:	39 0b       	sbc	r19, r25
    13ae:	29 3c       	cpi	r18, 0xC9	; 201
    13b0:	31 05       	cpc	r19, r1
    13b2:	3c f3       	brlt	.-50     	; 0x1382 <main+0xf0>
		{	
			lastMillis = getMillis();
    13b4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
    13b8:	8c 01       	movw	r16, r24
			if (getMotionState() == NO_MOTION_STATE)
    13ba:	0e 94 92 04 	call	0x924	; 0x924 <getMotionState>
    13be:	89 2b       	or	r24, r25
    13c0:	a1 f5       	brne	.+104    	; 0x142a <main+0x198>
			{
				switch(nextMove)
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	c9 16       	cp	r12, r25
    13c6:	d1 04       	cpc	r13, r1
    13c8:	b9 f0       	breq	.+46     	; 0x13f8 <main+0x166>
    13ca:	24 f4       	brge	.+8      	; 0x13d4 <main+0x142>
    13cc:	ca 94       	dec	r12
    13ce:	cd 28       	or	r12, r13
    13d0:	51 f0       	breq	.+20     	; 0x13e6 <main+0x154>
    13d2:	29 c0       	rjmp	.+82     	; 0x1426 <main+0x194>
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	c9 16       	cp	r12, r25
    13d8:	d1 04       	cpc	r13, r1
    13da:	a9 f0       	breq	.+42     	; 0x1406 <main+0x174>
    13dc:	24 e0       	ldi	r18, 0x04	; 4
    13de:	c2 16       	cp	r12, r18
    13e0:	d1 04       	cpc	r13, r1
    13e2:	c1 f0       	breq	.+48     	; 0x1414 <main+0x182>
    13e4:	20 c0       	rjmp	.+64     	; 0x1426 <main+0x194>
				{
				case MOVING_STRAIGHT_STATE:
					moveStraight(10);
    13e6:	6a e0       	ldi	r22, 0x0A	; 10
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 10 05 	call	0xa20	; 0xa20 <moveStraight>
					nextMove++;
    13f2:	c6 2c       	mov	r12, r6
    13f4:	d7 2c       	mov	r13, r7
					break;
    13f6:	19 c0       	rjmp	.+50     	; 0x142a <main+0x198>
				case TURNING_LEFT_STATE:
					turnLeft(90);
    13f8:	8a e5       	ldi	r24, 0x5A	; 90
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 00 05 	call	0xa00	; 0xa00 <turnLeft>
					nextMove++;
    1400:	c2 2c       	mov	r12, r2
    1402:	d3 2c       	mov	r13, r3
					break;
    1404:	12 c0       	rjmp	.+36     	; 0x142a <main+0x198>
				case TURNING_RIGHT_STATE:
					turnRight(90);
    1406:	8a e5       	ldi	r24, 0x5A	; 90
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <turnRight>
					nextMove++;
    140e:	c4 2c       	mov	r12, r4
    1410:	d5 2c       	mov	r13, r5
					break;
    1412:	0b c0       	rjmp	.+22     	; 0x142a <main+0x198>
				case MOVING_BACKWARDS_STATE:
					moveBackwards(500);
    1414:	64 ef       	ldi	r22, 0xF4	; 244
    1416:	71 e0       	ldi	r23, 0x01	; 1
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 23 05 	call	0xa46	; 0xa46 <moveBackwards>
					nextMove = 1;
    1420:	c8 2c       	mov	r12, r8
    1422:	d9 2c       	mov	r13, r9
					break;
    1424:	02 c0       	rjmp	.+4      	; 0x142a <main+0x198>
				default:
					nextMove = 1;
    1426:	c8 2c       	mov	r12, r8
    1428:	d9 2c       	mov	r13, r9
				}
			}
			
			char prt[] = "    ";
    142a:	85 e0       	ldi	r24, 0x05	; 5
    142c:	e1 eb       	ldi	r30, 0xB1	; 177
    142e:	f1 e0       	ldi	r31, 0x01	; 1
    1430:	d7 01       	movw	r26, r14
    1432:	01 90       	ld	r0, Z+
    1434:	0d 92       	st	X+, r0
    1436:	8a 95       	dec	r24
    1438:	e1 f7       	brne	.-8      	; 0x1432 <main+0x1a0>
			sprintf(prt, "%d\n", getDistSensorDist(FRONT_RIGHT_INDEX));
    143a:	88 2d       	mov	r24, r8
    143c:	99 2d       	mov	r25, r9
    143e:	0e 94 4b 11 	call	0x2296	; 0x2296 <getDistSensorDist>
    1442:	9f 93       	push	r25
    1444:	8f 93       	push	r24
    1446:	bf 92       	push	r11
    1448:	af 92       	push	r10
    144a:	ff 92       	push	r15
    144c:	ef 92       	push	r14
    144e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <sprintf>
			addStringToUsartWriteBuffer(prt);
    1452:	c7 01       	movw	r24, r14
    1454:	0e 94 88 10 	call	0x2110	; 0x2110 <addStringToUsartWriteBuffer>
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	8e cf       	rjmp	.-228    	; 0x1382 <main+0xf0>

00001466 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1466:	29 2f       	mov	r18, r25
    1468:	33 27       	eor	r19, r19
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	59 f0       	breq	.+22     	; 0x1486 <CALLBACK_USB_GetDescriptor+0x20>
    1470:	23 30       	cpi	r18, 0x03	; 3
    1472:	31 05       	cpc	r19, r1
    1474:	69 f0       	breq	.+26     	; 0x1490 <CALLBACK_USB_GetDescriptor+0x2a>
    1476:	21 30       	cpi	r18, 0x01	; 1
    1478:	31 05       	cpc	r19, r1
    147a:	21 f5       	brne	.+72     	; 0x14c4 <CALLBACK_USB_GetDescriptor+0x5e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    147c:	82 e1       	ldi	r24, 0x12	; 18
    147e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1480:	2e ed       	ldi	r18, 0xDE	; 222
    1482:	31 e0       	ldi	r19, 0x01	; 1
    1484:	28 c0       	rjmp	.+80     	; 0x14d6 <CALLBACK_USB_GetDescriptor+0x70>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    1486:	8e e3       	ldi	r24, 0x3E	; 62
    1488:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    148a:	20 ea       	ldi	r18, 0xA0	; 160
    148c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    148e:	23 c0       	rjmp	.+70     	; 0x14d6 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
    1490:	99 27       	eor	r25, r25
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	51 f0       	breq	.+20     	; 0x14ac <CALLBACK_USB_GetDescriptor+0x46>
    1498:	18 f0       	brcs	.+6      	; 0x14a0 <CALLBACK_USB_GetDescriptor+0x3a>
    149a:	02 97       	sbiw	r24, 0x02	; 2
    149c:	69 f0       	breq	.+26     	; 0x14b8 <CALLBACK_USB_GetDescriptor+0x52>
    149e:	17 c0       	rjmp	.+46     	; 0x14ce <CALLBACK_USB_GetDescriptor+0x68>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    14a0:	ec e9       	ldi	r30, 0x9C	; 156
    14a2:	f1 e0       	ldi	r31, 0x01	; 1
    14a4:	84 91       	lpm	r24, Z
    14a6:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
    14a8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
    14aa:	15 c0       	rjmp	.+42     	; 0x14d6 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    14ac:	e0 e8       	ldi	r30, 0x80	; 128
    14ae:	f1 e0       	ldi	r31, 0x01	; 1
    14b0:	84 91       	lpm	r24, Z
    14b2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
    14b4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    14b8:	e2 e6       	ldi	r30, 0x62	; 98
    14ba:	f1 e0       	ldi	r31, 0x01	; 1
    14bc:	84 91       	lpm	r24, Z
    14be:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    14c0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    14c2:	09 c0       	rjmp	.+18     	; 0x14d6 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <CALLBACK_USB_GetDescriptor+0x70>
	uint16_t    Size    = NO_DESCRIPTOR;
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    14d6:	fa 01       	movw	r30, r20
    14d8:	31 83       	std	Z+1, r19	; 0x01
    14da:	20 83       	st	Z, r18
	return Size;
}
    14dc:	08 95       	ret

000014de <CDC_Device_ConfigureEndpoints>:

	void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
	                                     FILE* const Stream)
	{
		*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
		fdev_set_udata(Stream, CDCInterfaceInfo);
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	ec 01       	movw	r28, r24
    14e4:	fc 01       	movw	r30, r24
    14e6:	70 96       	adiw	r30, 0x10	; 16
    14e8:	8b e0       	ldi	r24, 0x0B	; 11
    14ea:	df 01       	movw	r26, r30
    14ec:	1d 92       	st	X+, r1
    14ee:	8a 95       	dec	r24
    14f0:	e9 f7       	brne	.-6      	; 0x14ec <CDC_Device_ConfigureEndpoints+0xe>
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	8c 83       	std	Y+4, r24	; 0x04
    14f6:	89 87       	std	Y+9, r24	; 0x09
    14f8:	83 e0       	ldi	r24, 0x03	; 3
    14fa:	8e 87       	std	Y+14, r24	; 0x0e
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	ce 01       	movw	r24, r28
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <Endpoint_ConfigureEndpointTable>
    1506:	88 23       	and	r24, r24
    1508:	61 f0       	breq	.+24     	; 0x1522 <CDC_Device_ConfigureEndpoints+0x44>
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	ce 01       	movw	r24, r28
    150e:	06 96       	adiw	r24, 0x06	; 6
    1510:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <Endpoint_ConfigureEndpointTable>
    1514:	88 23       	and	r24, r24
    1516:	29 f0       	breq	.+10     	; 0x1522 <CDC_Device_ConfigureEndpoints+0x44>
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	ce 01       	movw	r24, r28
    151c:	0b 96       	adiw	r24, 0x0b	; 11
    151e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <Endpoint_ConfigureEndpointTable>
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	08 95       	ret

00001528 <CDC_Device_Flush>:
    1528:	fc 01       	movw	r30, r24
    152a:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <USB_DeviceState>
    152e:	94 30       	cpi	r25, 0x04	; 4
    1530:	31 f5       	brne	.+76     	; 0x157e <CDC_Device_Flush+0x56>
    1532:	84 89       	ldd	r24, Z+20	; 0x14
    1534:	95 89       	ldd	r25, Z+21	; 0x15
    1536:	a6 89       	ldd	r26, Z+22	; 0x16
    1538:	b7 89       	ldd	r27, Z+23	; 0x17
    153a:	89 2b       	or	r24, r25
    153c:	8a 2b       	or	r24, r26
    153e:	8b 2b       	or	r24, r27
    1540:	01 f1       	breq	.+64     	; 0x1582 <CDC_Device_Flush+0x5a>
    1542:	81 81       	ldd	r24, Z+1	; 0x01
    1544:	8f 70       	andi	r24, 0x0F	; 15
    1546:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    154a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
    154e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	92 2b       	or	r25, r18
    1556:	89 2b       	or	r24, r25
    1558:	b1 f0       	breq	.+44     	; 0x1586 <CDC_Device_Flush+0x5e>
    155a:	e8 ee       	ldi	r30, 0xE8	; 232
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	90 81       	ld	r25, Z
    1560:	80 81       	ld	r24, Z
    1562:	8e 77       	andi	r24, 0x7E	; 126
    1564:	80 83       	st	Z, r24
    1566:	95 fd       	sbrc	r25, 5
    1568:	10 c0       	rjmp	.+32     	; 0x158a <CDC_Device_Flush+0x62>
    156a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <Endpoint_WaitUntilReady>
    156e:	81 11       	cpse	r24, r1
    1570:	0d c0       	rjmp	.+26     	; 0x158c <CDC_Device_Flush+0x64>
    1572:	e8 ee       	ldi	r30, 0xE8	; 232
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	90 81       	ld	r25, Z
    1578:	9e 77       	andi	r25, 0x7E	; 126
    157a:	90 83       	st	Z, r25
    157c:	08 95       	ret
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	08 95       	ret
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	08 95       	ret
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	08 95       	ret
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	08 95       	ret

0000158e <CDC_Device_USBTask>:
    158e:	fc 01       	movw	r30, r24
    1590:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <USB_DeviceState>
    1594:	94 30       	cpi	r25, 0x04	; 4
    1596:	99 f4       	brne	.+38     	; 0x15be <CDC_Device_USBTask+0x30>
    1598:	84 89       	ldd	r24, Z+20	; 0x14
    159a:	95 89       	ldd	r25, Z+21	; 0x15
    159c:	a6 89       	ldd	r26, Z+22	; 0x16
    159e:	b7 89       	ldd	r27, Z+23	; 0x17
    15a0:	89 2b       	or	r24, r25
    15a2:	8a 2b       	or	r24, r26
    15a4:	8b 2b       	or	r24, r27
    15a6:	59 f0       	breq	.+22     	; 0x15be <CDC_Device_USBTask+0x30>
    15a8:	81 81       	ldd	r24, Z+1	; 0x01
    15aa:	8f 70       	andi	r24, 0x0F	; 15
    15ac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    15b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    15b4:	80 ff       	sbrs	r24, 0
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <CDC_Device_USBTask+0x30>
    15b8:	cf 01       	movw	r24, r30
    15ba:	0e 94 94 0a 	call	0x1528	; 0x1528 <CDC_Device_Flush>
    15be:	08 95       	ret

000015c0 <CDC_Device_Event_Stub>:
		return ReceivedByte;
	}
#endif

void CDC_Device_Event_Stub(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    15c0:	08 95       	ret

000015c2 <CDC_Device_Event_Stub_2>:

}

void CDC_Device_Event_Stub_2(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const uint8_t _1)
{
    15c2:	08 95       	ret

000015c4 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15ca:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	if (!(Endpoint_IsSETUPReceived()))
    15ce:	93 ff       	sbrs	r25, 3
    15d0:	9d c0       	rjmp	.+314    	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    15d2:	20 81       	ld	r18, Z
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <USB_ControlRequest+0x4>
    15da:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <USB_ControlRequest+0x5>
    15de:	82 17       	cp	r24, r18
    15e0:	93 07       	cpc	r25, r19
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <CDC_Device_ProcessControlRequest+0x22>
    15e4:	93 c0       	rjmp	.+294    	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
    15e6:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
    15e8:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <USB_ControlRequest+0x1>
    15ec:	81 32       	cpi	r24, 0x21	; 33
    15ee:	59 f0       	breq	.+22     	; 0x1606 <CDC_Device_ProcessControlRequest+0x42>
    15f0:	18 f4       	brcc	.+6      	; 0x15f8 <CDC_Device_ProcessControlRequest+0x34>
    15f2:	80 32       	cpi	r24, 0x20	; 32
    15f4:	c1 f1       	breq	.+112    	; 0x1666 <CDC_Device_ProcessControlRequest+0xa2>
    15f6:	8a c0       	rjmp	.+276    	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
    15f8:	82 32       	cpi	r24, 0x22	; 34
    15fa:	09 f4       	brne	.+2      	; 0x15fe <CDC_Device_ProcessControlRequest+0x3a>
    15fc:	62 c0       	rjmp	.+196    	; 0x16c2 <CDC_Device_ProcessControlRequest+0xfe>
    15fe:	83 32       	cpi	r24, 0x23	; 35
    1600:	09 f4       	brne	.+2      	; 0x1604 <CDC_Device_ProcessControlRequest+0x40>
    1602:	74 c0       	rjmp	.+232    	; 0x16ec <CDC_Device_ProcessControlRequest+0x128>
    1604:	83 c0       	rjmp	.+262    	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1606:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <USB_ControlRequest>
    160a:	81 3a       	cpi	r24, 0xA1	; 161
    160c:	09 f0       	breq	.+2      	; 0x1610 <CDC_Device_ProcessControlRequest+0x4c>
    160e:	7e c0       	rjmp	.+252    	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1610:	e8 ee       	ldi	r30, 0xE8	; 232
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	87 7f       	andi	r24, 0xF7	; 247
    1618:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    161a:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    161c:	80 ff       	sbrs	r24, 0
    161e:	fd cf       	rjmp	.-6      	; 0x161a <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1620:	8c 89       	ldd	r24, Y+20	; 0x14
    1622:	9d 89       	ldd	r25, Y+21	; 0x15
    1624:	ae 89       	ldd	r26, Y+22	; 0x16
    1626:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1628:	e1 ef       	ldi	r30, 0xF1	; 241
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
    162e:	49 2f       	mov	r20, r25
    1630:	5a 2f       	mov	r21, r26
    1632:	6b 2f       	mov	r22, r27
    1634:	77 27       	eor	r23, r23
    1636:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
    1638:	ad 01       	movw	r20, r26
    163a:	66 27       	eor	r22, r22
    163c:	77 27       	eor	r23, r23
    163e:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
    1640:	8b 2f       	mov	r24, r27
    1642:	99 27       	eor	r25, r25
    1644:	aa 27       	eor	r26, r26
    1646:	bb 27       	eor	r27, r27
    1648:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    164a:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    164c:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    164e:	89 8d       	ldd	r24, Y+25	; 0x19
    1650:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1652:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1654:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1656:	e8 ee       	ldi	r30, 0xE8	; 232
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8e 77       	andi	r24, 0x7E	; 126
    165e:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1660:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Endpoint_ClearStatusStage>
    1664:	53 c0       	rjmp	.+166    	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1666:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <USB_ControlRequest>
    166a:	81 32       	cpi	r24, 0x21	; 33
    166c:	09 f0       	breq	.+2      	; 0x1670 <CDC_Device_ProcessControlRequest+0xac>
    166e:	4e c0       	rjmp	.+156    	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1670:	e8 ee       	ldi	r30, 0xE8	; 232
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	87 7f       	andi	r24, 0xF7	; 247
    1678:	80 83       	st	Z, r24
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <CDC_Device_ProcessControlRequest+0xc2>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    167c:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <USB_DeviceState>
    1680:	88 23       	and	r24, r24
    1682:	09 f4       	brne	.+2      	; 0x1686 <CDC_Device_ProcessControlRequest+0xc2>
    1684:	43 c0       	rjmp	.+134    	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1686:	80 81       	ld	r24, Z
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1688:	82 ff       	sbrs	r24, 2
    168a:	f8 cf       	rjmp	.-16     	; 0x167c <CDC_Device_ProcessControlRequest+0xb8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    168c:	e1 ef       	ldi	r30, 0xF1	; 241
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
    1692:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
    1694:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
    1696:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1698:	3c 8b       	std	Y+20, r19	; 0x14
    169a:	2d 8b       	std	Y+21, r18	; 0x15
    169c:	9e 8b       	std	Y+22, r25	; 0x16
    169e:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16a0:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    16a2:	88 8f       	std	Y+24, r24	; 0x18
    16a4:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    16a6:	89 8f       	std	Y+25, r24	; 0x19
    16a8:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    16aa:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16ac:	e8 ee       	ldi	r30, 0xE8	; 232
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	8b 77       	andi	r24, 0x7B	; 123
    16b4:	80 83       	st	Z, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    16b6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    16ba:	ce 01       	movw	r24, r28
    16bc:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <CDC_Device_Event_Stub>
    16c0:	25 c0       	rjmp	.+74     	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16c2:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <USB_ControlRequest>
    16c6:	81 32       	cpi	r24, 0x21	; 33
    16c8:	09 f5       	brne	.+66     	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16ca:	e8 ee       	ldi	r30, 0xE8	; 232
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	87 7f       	andi	r24, 0xF7	; 247
    16d2:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    16d4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    16d8:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <USB_ControlRequest+0x2>
    16dc:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <USB_ControlRequest+0x3>
    16e0:	99 8b       	std	Y+17, r25	; 0x11
    16e2:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    16e4:	ce 01       	movw	r24, r28
    16e6:	0e 94 4a 11 	call	0x2294	; 0x2294 <EVENT_CDC_Device_ControLineStateChanged>
    16ea:	10 c0       	rjmp	.+32     	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16ec:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <USB_ControlRequest>
    16f0:	81 32       	cpi	r24, 0x21	; 33
    16f2:	61 f4       	brne	.+24     	; 0x170c <CDC_Device_ProcessControlRequest+0x148>
    16f4:	e8 ee       	ldi	r30, 0xE8	; 232
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	87 7f       	andi	r24, 0xF7	; 247
    16fc:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    16fe:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1702:	60 91 65 06 	lds	r22, 0x0665	; 0x800665 <USB_ControlRequest+0x2>
    1706:	ce 01       	movw	r24, r28
    1708:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <CDC_Device_Event_Stub_2>
			}

			break;
	}
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret

00001712 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1712:	cf 92       	push	r12
    1714:	df 92       	push	r13
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	20 91 69 06 	lds	r18, 0x0669	; 0x800669 <USB_ControlRequest+0x6>
    1724:	30 91 6a 06 	lds	r19, 0x066A	; 0x80066a <USB_ControlRequest+0x7>
    1728:	26 17       	cp	r18, r22
    172a:	37 07       	cpc	r19, r23
    172c:	58 f0       	brcs	.+22     	; 0x1744 <Endpoint_Write_Control_Stream_LE+0x32>
    172e:	61 15       	cp	r22, r1
    1730:	71 05       	cpc	r23, r1
    1732:	39 f4       	brne	.+14     	; 0x1742 <Endpoint_Write_Control_Stream_LE+0x30>
    1734:	e8 ee       	ldi	r30, 0xE8	; 232
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	20 81       	ld	r18, Z
    173a:	2e 77       	andi	r18, 0x7E	; 126
    173c:	20 83       	st	Z, r18
    173e:	9b 01       	movw	r18, r22
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <Endpoint_Write_Control_Stream_LE+0x32>
    1742:	9b 01       	movw	r18, r22
    1744:	a8 2f       	mov	r26, r24
    1746:	b9 2f       	mov	r27, r25
    1748:	10 e0       	ldi	r17, 0x00	; 0
    174a:	e8 ee       	ldi	r30, 0xE8	; 232
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	63 ef       	ldi	r22, 0xF3	; 243
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	42 ef       	ldi	r20, 0xF2	; 242
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	0f 2e       	mov	r0, r31
    1758:	f1 ef       	ldi	r31, 0xF1	; 241
    175a:	cf 2e       	mov	r12, r31
    175c:	d1 2c       	mov	r13, r1
    175e:	f0 2d       	mov	r31, r0
    1760:	01 e0       	ldi	r16, 0x01	; 1
    1762:	f1 2c       	mov	r15, r1
    1764:	30 c0       	rjmp	.+96     	; 0x17c6 <Endpoint_Write_Control_Stream_LE+0xb4>
    1766:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <USB_DeviceState>
    176a:	88 23       	and	r24, r24
    176c:	09 f4       	brne	.+2      	; 0x1770 <Endpoint_Write_Control_Stream_LE+0x5e>
    176e:	42 c0       	rjmp	.+132    	; 0x17f4 <Endpoint_Write_Control_Stream_LE+0xe2>
    1770:	85 30       	cpi	r24, 0x05	; 5
    1772:	09 f4       	brne	.+2      	; 0x1776 <Endpoint_Write_Control_Stream_LE+0x64>
    1774:	41 c0       	rjmp	.+130    	; 0x17f8 <Endpoint_Write_Control_Stream_LE+0xe6>
    1776:	80 81       	ld	r24, Z
    1778:	83 fd       	sbrc	r24, 3
    177a:	40 c0       	rjmp	.+128    	; 0x17fc <Endpoint_Write_Control_Stream_LE+0xea>
    177c:	80 81       	ld	r24, Z
    177e:	82 fd       	sbrc	r24, 2
    1780:	32 c0       	rjmp	.+100    	; 0x17e6 <Endpoint_Write_Control_Stream_LE+0xd4>
    1782:	80 81       	ld	r24, Z
    1784:	80 ff       	sbrs	r24, 0
    1786:	1f c0       	rjmp	.+62     	; 0x17c6 <Endpoint_Write_Control_Stream_LE+0xb4>
    1788:	eb 01       	movw	r28, r22
    178a:	18 81       	ld	r17, Y
    178c:	ea 01       	movw	r28, r20
    178e:	88 81       	ld	r24, Y
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	91 2b       	or	r25, r17
    1794:	21 15       	cp	r18, r1
    1796:	31 05       	cpc	r19, r1
    1798:	79 f0       	breq	.+30     	; 0x17b8 <Endpoint_Write_Control_Stream_LE+0xa6>
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	91 05       	cpc	r25, r1
    179e:	60 f4       	brcc	.+24     	; 0x17b8 <Endpoint_Write_Control_Stream_LE+0xa6>
    17a0:	1d 91       	ld	r17, X+
    17a2:	e6 01       	movw	r28, r12
    17a4:	18 83       	st	Y, r17
    17a6:	21 50       	subi	r18, 0x01	; 1
    17a8:	31 09       	sbc	r19, r1
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	21 15       	cp	r18, r1
    17ae:	31 05       	cpc	r19, r1
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <Endpoint_Write_Control_Stream_LE+0xa6>
    17b2:	88 30       	cpi	r24, 0x08	; 8
    17b4:	91 05       	cpc	r25, r1
    17b6:	a1 f7       	brne	.-24     	; 0x17a0 <Endpoint_Write_Control_Stream_LE+0x8e>
    17b8:	10 2f       	mov	r17, r16
    17ba:	08 97       	sbiw	r24, 0x08	; 8
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <Endpoint_Write_Control_Stream_LE+0xae>
    17be:	1f 2d       	mov	r17, r15
    17c0:	80 81       	ld	r24, Z
    17c2:	8e 77       	andi	r24, 0x7E	; 126
    17c4:	80 83       	st	Z, r24
    17c6:	21 15       	cp	r18, r1
    17c8:	31 05       	cpc	r19, r1
    17ca:	69 f6       	brne	.-102    	; 0x1766 <Endpoint_Write_Control_Stream_LE+0x54>
    17cc:	11 11       	cpse	r17, r1
    17ce:	cb cf       	rjmp	.-106    	; 0x1766 <Endpoint_Write_Control_Stream_LE+0x54>
    17d0:	0a c0       	rjmp	.+20     	; 0x17e6 <Endpoint_Write_Control_Stream_LE+0xd4>
    17d2:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <USB_DeviceState>
    17d6:	88 23       	and	r24, r24
    17d8:	99 f0       	breq	.+38     	; 0x1800 <Endpoint_Write_Control_Stream_LE+0xee>
    17da:	85 30       	cpi	r24, 0x05	; 5
    17dc:	99 f0       	breq	.+38     	; 0x1804 <Endpoint_Write_Control_Stream_LE+0xf2>
    17de:	80 81       	ld	r24, Z
    17e0:	83 ff       	sbrs	r24, 3
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <Endpoint_Write_Control_Stream_LE+0xd8>
    17e4:	11 c0       	rjmp	.+34     	; 0x1808 <Endpoint_Write_Control_Stream_LE+0xf6>
    17e6:	e8 ee       	ldi	r30, 0xE8	; 232
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	82 ff       	sbrs	r24, 2
    17ee:	f1 cf       	rjmp	.-30     	; 0x17d2 <Endpoint_Write_Control_Stream_LE+0xc0>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	0b c0       	rjmp	.+22     	; 0x180a <Endpoint_Write_Control_Stream_LE+0xf8>
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <Endpoint_Write_Control_Stream_LE+0xf8>
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	07 c0       	rjmp	.+14     	; 0x180a <Endpoint_Write_Control_Stream_LE+0xf8>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <Endpoint_Write_Control_Stream_LE+0xf8>
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	03 c0       	rjmp	.+6      	; 0x180a <Endpoint_Write_Control_Stream_LE+0xf8>
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	01 c0       	rjmp	.+2      	; 0x180a <Endpoint_Write_Control_Stream_LE+0xf8>
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	08 95       	ret

0000181a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1828:	20 91 69 06 	lds	r18, 0x0669	; 0x800669 <USB_ControlRequest+0x6>
    182c:	30 91 6a 06 	lds	r19, 0x066A	; 0x80066a <USB_ControlRequest+0x7>
    1830:	26 17       	cp	r18, r22
    1832:	37 07       	cpc	r19, r23
    1834:	58 f0       	brcs	.+22     	; 0x184c <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1836:	61 15       	cp	r22, r1
    1838:	71 05       	cpc	r23, r1
    183a:	39 f4       	brne	.+14     	; 0x184a <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    183c:	e8 ee       	ldi	r30, 0xE8	; 232
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	20 81       	ld	r18, Z
    1842:	2e 77       	andi	r18, 0x7E	; 126
    1844:	20 83       	st	Z, r18
    1846:	9b 01       	movw	r18, r22
    1848:	01 c0       	rjmp	.+2      	; 0x184c <Endpoint_Write_Control_PStream_LE+0x32>
    184a:	9b 01       	movw	r18, r22
    184c:	e8 2f       	mov	r30, r24
    184e:	f9 2f       	mov	r31, r25
    1850:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1852:	a8 ee       	ldi	r26, 0xE8	; 232
    1854:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1856:	63 ef       	ldi	r22, 0xF3	; 243
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	42 ef       	ldi	r20, 0xF2	; 242
    185c:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    185e:	0f 2e       	mov	r0, r31
    1860:	f1 ef       	ldi	r31, 0xF1	; 241
    1862:	cf 2e       	mov	r12, r31
    1864:	d1 2c       	mov	r13, r1
    1866:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1868:	01 e0       	ldi	r16, 0x01	; 1
    186a:	f1 2c       	mov	r15, r1
    186c:	31 c0       	rjmp	.+98     	; 0x18d0 <Endpoint_Write_Control_PStream_LE+0xb6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    186e:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1872:	88 23       	and	r24, r24
    1874:	09 f4       	brne	.+2      	; 0x1878 <Endpoint_Write_Control_PStream_LE+0x5e>
    1876:	43 c0       	rjmp	.+134    	; 0x18fe <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1878:	85 30       	cpi	r24, 0x05	; 5
    187a:	09 f4       	brne	.+2      	; 0x187e <Endpoint_Write_Control_PStream_LE+0x64>
    187c:	42 c0       	rjmp	.+132    	; 0x1902 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    187e:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1880:	83 fd       	sbrc	r24, 3
    1882:	41 c0       	rjmp	.+130    	; 0x1906 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1884:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1886:	82 fd       	sbrc	r24, 2
    1888:	33 c0       	rjmp	.+102    	; 0x18f0 <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    188a:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    188c:	80 ff       	sbrs	r24, 0
    188e:	20 c0       	rjmp	.+64     	; 0x18d0 <Endpoint_Write_Control_PStream_LE+0xb6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1890:	eb 01       	movw	r28, r22
    1892:	18 81       	ld	r17, Y
    1894:	ea 01       	movw	r28, r20
    1896:	88 81       	ld	r24, Y
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    189c:	21 15       	cp	r18, r1
    189e:	31 05       	cpc	r19, r1
    18a0:	81 f0       	breq	.+32     	; 0x18c2 <Endpoint_Write_Control_PStream_LE+0xa8>
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	91 05       	cpc	r25, r1
    18a6:	68 f4       	brcc	.+26     	; 0x18c2 <Endpoint_Write_Control_PStream_LE+0xa8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18a8:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18aa:	e6 01       	movw	r28, r12
    18ac:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    18ae:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    18b0:	21 50       	subi	r18, 0x01	; 1
    18b2:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    18b4:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18b6:	21 15       	cp	r18, r1
    18b8:	31 05       	cpc	r19, r1
    18ba:	19 f0       	breq	.+6      	; 0x18c2 <Endpoint_Write_Control_PStream_LE+0xa8>
    18bc:	88 30       	cpi	r24, 0x08	; 8
    18be:	91 05       	cpc	r25, r1
    18c0:	99 f7       	brne	.-26     	; 0x18a8 <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18c2:	10 2f       	mov	r17, r16
    18c4:	08 97       	sbiw	r24, 0x08	; 8
    18c6:	09 f0       	breq	.+2      	; 0x18ca <Endpoint_Write_Control_PStream_LE+0xb0>
    18c8:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18ca:	8c 91       	ld	r24, X
    18cc:	8e 77       	andi	r24, 0x7E	; 126
    18ce:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18d0:	21 15       	cp	r18, r1
    18d2:	31 05       	cpc	r19, r1
    18d4:	61 f6       	brne	.-104    	; 0x186e <Endpoint_Write_Control_PStream_LE+0x54>
    18d6:	11 11       	cpse	r17, r1
    18d8:	ca cf       	rjmp	.-108    	; 0x186e <Endpoint_Write_Control_PStream_LE+0x54>
    18da:	0a c0       	rjmp	.+20     	; 0x18f0 <Endpoint_Write_Control_PStream_LE+0xd6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18dc:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18e0:	88 23       	and	r24, r24
    18e2:	99 f0       	breq	.+38     	; 0x190a <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18e4:	85 30       	cpi	r24, 0x05	; 5
    18e6:	99 f0       	breq	.+38     	; 0x190e <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18e8:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18ea:	83 ff       	sbrs	r24, 3
    18ec:	03 c0       	rjmp	.+6      	; 0x18f4 <Endpoint_Write_Control_PStream_LE+0xda>
    18ee:	11 c0       	rjmp	.+34     	; 0x1912 <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18f0:	e8 ee       	ldi	r30, 0xE8	; 232
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    18f6:	82 ff       	sbrs	r24, 2
    18f8:	f1 cf       	rjmp	.-30     	; 0x18dc <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	0b c0       	rjmp	.+22     	; 0x1914 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18fe:	82 e0       	ldi	r24, 0x02	; 2
    1900:	09 c0       	rjmp	.+18     	; 0x1914 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	07 c0       	rjmp	.+14     	; 0x1914 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1912:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	df 90       	pop	r13
    1920:	cf 90       	pop	r12
    1922:	08 95       	ret

00001924 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1924:	8f 92       	push	r8
    1926:	9f 92       	push	r9
    1928:	bf 92       	push	r11
    192a:	cf 92       	push	r12
    192c:	df 92       	push	r13
    192e:	ef 92       	push	r14
    1930:	ff 92       	push	r15
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	87 30       	cpi	r24, 0x07	; 7
    193c:	70 f1       	brcs	.+92     	; 0x199a <Endpoint_ConfigureEndpoint_Prv+0x76>
    193e:	26 c0       	rjmp	.+76     	; 0x198c <Endpoint_ConfigureEndpoint_Prv+0x68>
    1940:	29 2f       	mov	r18, r25
    1942:	2f 70       	andi	r18, 0x0F	; 15
    1944:	e7 01       	movw	r28, r14
    1946:	28 83       	st	Y, r18
    1948:	89 17       	cp	r24, r25
    194a:	31 f0       	breq	.+12     	; 0x1958 <Endpoint_ConfigureEndpoint_Prv+0x34>
    194c:	e8 01       	movw	r28, r16
    194e:	78 81       	ld	r23, Y
    1950:	20 81       	ld	r18, Z
    1952:	e4 01       	movw	r28, r8
    1954:	58 81       	ld	r21, Y
    1956:	03 c0       	rjmp	.+6      	; 0x195e <Endpoint_ConfigureEndpoint_Prv+0x3a>
    1958:	24 2f       	mov	r18, r20
    195a:	76 2f       	mov	r23, r22
    195c:	5b 2d       	mov	r21, r11
    195e:	21 ff       	sbrs	r18, 1
    1960:	12 c0       	rjmp	.+36     	; 0x1986 <Endpoint_ConfigureEndpoint_Prv+0x62>
    1962:	3c 91       	ld	r19, X
    1964:	3e 7f       	andi	r19, 0xFE	; 254
    1966:	3c 93       	st	X, r19
    1968:	30 81       	ld	r19, Z
    196a:	3d 7f       	andi	r19, 0xFD	; 253
    196c:	30 83       	st	Z, r19
    196e:	3c 91       	ld	r19, X
    1970:	31 60       	ori	r19, 0x01	; 1
    1972:	3c 93       	st	X, r19
    1974:	e8 01       	movw	r28, r16
    1976:	78 83       	st	Y, r23
    1978:	20 83       	st	Z, r18
    197a:	e4 01       	movw	r28, r8
    197c:	58 83       	st	Y, r21
    197e:	e6 01       	movw	r28, r12
    1980:	28 81       	ld	r18, Y
    1982:	22 23       	and	r18, r18
    1984:	44 f4       	brge	.+16     	; 0x1996 <Endpoint_ConfigureEndpoint_Prv+0x72>
    1986:	9f 5f       	subi	r25, 0xFF	; 255
    1988:	97 30       	cpi	r25, 0x07	; 7
    198a:	d1 f6       	brne	.-76     	; 0x1940 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    198c:	8f 70       	andi	r24, 0x0F	; 15
    198e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	21 c0       	rjmp	.+66     	; 0x19d8 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	1f c0       	rjmp	.+62     	; 0x19d8 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    199a:	98 2f       	mov	r25, r24
    199c:	9f 70       	andi	r25, 0x0F	; 15
    199e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    19a2:	98 2f       	mov	r25, r24
    19a4:	24 2f       	mov	r18, r20
    19a6:	76 2f       	mov	r23, r22
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	ab ee       	ldi	r26, 0xEB	; 235
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ed ee       	ldi	r30, 0xED	; 237
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	0c ee       	ldi	r16, 0xEC	; 236
    19b4:	10 e0       	ldi	r17, 0x00	; 0
    19b6:	0f 2e       	mov	r0, r31
    19b8:	f0 ef       	ldi	r31, 0xF0	; 240
    19ba:	8f 2e       	mov	r8, r31
    19bc:	91 2c       	mov	r9, r1
    19be:	f0 2d       	mov	r31, r0
    19c0:	0f 2e       	mov	r0, r31
    19c2:	fe ee       	ldi	r31, 0xEE	; 238
    19c4:	cf 2e       	mov	r12, r31
    19c6:	d1 2c       	mov	r13, r1
    19c8:	f0 2d       	mov	r31, r0
    19ca:	0f 2e       	mov	r0, r31
    19cc:	f9 ee       	ldi	r31, 0xE9	; 233
    19ce:	ef 2e       	mov	r14, r31
    19d0:	f1 2c       	mov	r15, r1
    19d2:	f0 2d       	mov	r31, r0
    19d4:	b1 2c       	mov	r11, r1
    19d6:	c3 cf       	rjmp	.-122    	; 0x195e <Endpoint_ConfigureEndpoint_Prv+0x3a>
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	cf 90       	pop	r12
    19e8:	bf 90       	pop	r11
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	08 95       	ret

000019f0 <Endpoint_ConfigureEndpointTable>:
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	66 23       	and	r22, r22
    19fe:	f1 f1       	breq	.+124    	; 0x1a7c <Endpoint_ConfigureEndpointTable+0x8c>
    1a00:	06 2f       	mov	r16, r22
    1a02:	c8 2f       	mov	r28, r24
    1a04:	d9 2f       	mov	r29, r25
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	0f 2e       	mov	r0, r31
    1a0a:	f6 e0       	ldi	r31, 0x06	; 6
    1a0c:	ff 2e       	mov	r15, r31
    1a0e:	f0 2d       	mov	r31, r0
    1a10:	68 94       	set
    1a12:	ee 24       	eor	r14, r14
    1a14:	e1 f8       	bld	r14, 1
    1a16:	58 81       	ld	r21, Y
    1a18:	55 23       	and	r21, r21
    1a1a:	51 f1       	breq	.+84     	; 0x1a70 <Endpoint_ConfigureEndpointTable+0x80>
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a20:	fa 81       	ldd	r31, Y+2	; 0x02
    1a22:	6b 81       	ldd	r22, Y+3	; 0x03
    1a24:	85 2f       	mov	r24, r21
    1a26:	8f 70       	andi	r24, 0x0F	; 15
    1a28:	87 30       	cpi	r24, 0x07	; 7
    1a2a:	50 f5       	brcc	.+84     	; 0x1a80 <Endpoint_ConfigureEndpointTable+0x90>
    1a2c:	92 30       	cpi	r25, 0x02	; 2
    1a2e:	10 f4       	brcc	.+4      	; 0x1a34 <Endpoint_ConfigureEndpointTable+0x44>
    1a30:	4e 2d       	mov	r20, r14
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <Endpoint_ConfigureEndpointTable+0x46>
    1a34:	4f 2d       	mov	r20, r15
    1a36:	e9 30       	cpi	r30, 0x09	; 9
    1a38:	f1 05       	cpc	r31, r1
    1a3a:	50 f0       	brcs	.+20     	; 0x1a50 <Endpoint_ConfigureEndpointTable+0x60>
    1a3c:	28 e0       	ldi	r18, 0x08	; 8
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9f 5f       	subi	r25, 0xFF	; 255
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	2e 17       	cp	r18, r30
    1a4a:	3f 07       	cpc	r19, r31
    1a4c:	d0 f3       	brcs	.-12     	; 0x1a42 <Endpoint_ConfigureEndpointTable+0x52>
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <Endpoint_ConfigureEndpointTable+0x62>
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	92 95       	swap	r25
    1a54:	90 7f       	andi	r25, 0xF0	; 240
    1a56:	49 2b       	or	r20, r25
    1a58:	90 e4       	ldi	r25, 0x40	; 64
    1a5a:	69 9f       	mul	r22, r25
    1a5c:	b0 01       	movw	r22, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	55 1f       	adc	r21, r21
    1a62:	55 27       	eor	r21, r21
    1a64:	55 1f       	adc	r21, r21
    1a66:	65 2b       	or	r22, r21
    1a68:	0e 94 92 0c 	call	0x1924	; 0x1924 <Endpoint_ConfigureEndpoint_Prv>
    1a6c:	88 23       	and	r24, r24
    1a6e:	49 f0       	breq	.+18     	; 0x1a82 <Endpoint_ConfigureEndpointTable+0x92>
    1a70:	1f 5f       	subi	r17, 0xFF	; 255
    1a72:	25 96       	adiw	r28, 0x05	; 5
    1a74:	01 13       	cpse	r16, r17
    1a76:	cf cf       	rjmp	.-98     	; 0x1a16 <Endpoint_ConfigureEndpointTable+0x26>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <Endpoint_ConfigureEndpointTable+0x92>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <Endpoint_ConfigureEndpointTable+0x92>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	08 95       	ret

00001a90 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1a90:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <USB_ControlRequest>
    1a94:	88 23       	and	r24, r24
    1a96:	44 f0       	brlt	.+16     	; 0x1aa8 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a98:	e8 ee       	ldi	r30, 0xE8	; 232
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	14 c0       	rjmp	.+40     	; 0x1ac6 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a9e:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <USB_DeviceState>
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <Endpoint_ClearStatusStage+0x1c>
    1aa6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aa8:	e8 ee       	ldi	r30, 0xE8	; 232
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1aae:	82 ff       	sbrs	r24, 2
    1ab0:	f6 cf       	rjmp	.-20     	; 0x1a9e <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ab2:	e8 ee       	ldi	r30, 0xE8	; 232
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8b 77       	andi	r24, 0x7B	; 123
    1aba:	80 83       	st	Z, r24
    1abc:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1abe:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <USB_DeviceState>
    1ac2:	88 23       	and	r24, r24
    1ac4:	41 f0       	breq	.+16     	; 0x1ad6 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ac6:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1ac8:	80 ff       	sbrs	r24, 0
    1aca:	f9 cf       	rjmp	.-14     	; 0x1abe <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1acc:	e8 ee       	ldi	r30, 0xE8	; 232
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8e 77       	andi	r24, 0x7E	; 126
    1ad4:	80 83       	st	Z, r24
    1ad6:	08 95       	ret

00001ad8 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1ae0:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
    1ae4:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
    1ae8:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1aea:	ac ee       	ldi	r26, 0xEC	; 236
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aee:	e8 ee       	ldi	r30, 0xE8	; 232
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1af2:	0b ee       	ldi	r16, 0xEB	; 235
    1af4:	10 e0       	ldi	r17, 0x00	; 0
    1af6:	44 ee       	ldi	r20, 0xE4	; 228
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <Endpoint_WaitUntilReady+0x26>
    1afc:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1afe:	9c 91       	ld	r25, X
    1b00:	89 2f       	mov	r24, r25
    1b02:	81 70       	andi	r24, 0x01	; 1
    1b04:	90 fd       	sbrc	r25, 0
    1b06:	1d c0       	rjmp	.+58     	; 0x1b42 <Endpoint_WaitUntilReady+0x6a>
    1b08:	20 c0       	rjmp	.+64     	; 0x1b4a <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b0a:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b0e:	88 23       	and	r24, r24
    1b10:	81 f0       	breq	.+32     	; 0x1b32 <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b12:	85 30       	cpi	r24, 0x05	; 5
    1b14:	81 f0       	breq	.+32     	; 0x1b36 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b16:	e8 01       	movw	r28, r16
    1b18:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b1a:	85 fd       	sbrc	r24, 5
    1b1c:	0e c0       	rjmp	.+28     	; 0x1b3a <Endpoint_WaitUntilReady+0x62>
    1b1e:	ea 01       	movw	r28, r20
    1b20:	88 81       	ld	r24, Y
    1b22:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b24:	28 17       	cp	r18, r24
    1b26:	39 07       	cpc	r19, r25
    1b28:	51 f3       	breq	.-44     	; 0x1afe <Endpoint_WaitUntilReady+0x26>
    1b2a:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b2c:	39 f7       	brne	.-50     	; 0x1afc <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    1b2e:	84 e0       	ldi	r24, 0x04	; 4
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	0d c0       	rjmp	.+26     	; 0x1b50 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	0b c0       	rjmp	.+22     	; 0x1b50 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	09 c0       	rjmp	.+18     	; 0x1b50 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	07 c0       	rjmp	.+14     	; 0x1b50 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b42:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b44:	80 ff       	sbrs	r24, 0
    1b46:	e1 cf       	rjmp	.-62     	; 0x1b0a <Endpoint_WaitUntilReady+0x32>
    1b48:	fa cf       	rjmp	.-12     	; 0x1b3e <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b4a:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b4c:	92 ff       	sbrs	r25, 2
    1b4e:	dd cf       	rjmp	.-70     	; 0x1b0a <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1b5a:	1f 92       	push	r1
    1b5c:	0f 92       	push	r0
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	0f 92       	push	r0
    1b62:	11 24       	eor	r1, r1
    1b64:	2f 93       	push	r18
    1b66:	3f 93       	push	r19
    1b68:	4f 93       	push	r20
    1b6a:	5f 93       	push	r21
    1b6c:	6f 93       	push	r22
    1b6e:	7f 93       	push	r23
    1b70:	8f 93       	push	r24
    1b72:	9f 93       	push	r25
    1b74:	af 93       	push	r26
    1b76:	bf 93       	push	r27
    1b78:	ef 93       	push	r30
    1b7a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1b7c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1b80:	82 ff       	sbrs	r24, 2
    1b82:	0b c0       	rjmp	.+22     	; 0x1b9a <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1b84:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1b88:	82 ff       	sbrs	r24, 2
    1b8a:	07 c0       	rjmp	.+14     	; 0x1b9a <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1b8c:	e1 ee       	ldi	r30, 0xE1	; 225
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8b 7f       	andi	r24, 0xFB	; 251
    1b94:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1b96:	0e 94 43 10 	call	0x2086	; 0x2086 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1b9a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1b9e:	80 ff       	sbrs	r24, 0
    1ba0:	1f c0       	rjmp	.+62     	; 0x1be0 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1ba2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    1ba6:	80 ff       	sbrs	r24, 0
    1ba8:	1b c0       	rjmp	.+54     	; 0x1be0 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1baa:	ea ed       	ldi	r30, 0xDA	; 218
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8e 7f       	andi	r24, 0xFE	; 254
    1bb2:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1bb4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1bb8:	80 ff       	sbrs	r24, 0
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1bbc:	80 e1       	ldi	r24, 0x10	; 16
    1bbe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bc0:	82 e1       	ldi	r24, 0x12	; 18
    1bc2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1bc4:	09 b4       	in	r0, 0x29	; 41
    1bc6:	00 fe       	sbrs	r0, 0
    1bc8:	fd cf       	rjmp	.-6      	; 0x1bc4 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1bd0:	0e 94 3e 11 	call	0x227c	; 0x227c <EVENT_USB_Device_Connect>
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bd6:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1bd8:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1bdc:	0e 94 3f 11 	call	0x227e	; 0x227e <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1be0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1be4:	80 ff       	sbrs	r24, 0
    1be6:	17 c0       	rjmp	.+46     	; 0x1c16 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1be8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1bec:	80 ff       	sbrs	r24, 0
    1bee:	13 c0       	rjmp	.+38     	; 0x1c16 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1bf0:	e2 ee       	ldi	r30, 0xE2	; 226
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8e 7f       	andi	r24, 0xFE	; 254
    1bf8:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1bfa:	80 81       	ld	r24, Z
    1bfc:	80 61       	ori	r24, 0x10	; 16
    1bfe:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c00:	e8 ed       	ldi	r30, 0xD8	; 216
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	80 62       	ori	r24, 0x20	; 32
    1c08:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c0a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1c0c:	85 e0       	ldi	r24, 0x05	; 5
    1c0e:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1c12:	0e 94 43 10 	call	0x2086	; 0x2086 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c16:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c1a:	84 ff       	sbrs	r24, 4
    1c1c:	30 c0       	rjmp	.+96     	; 0x1c7e <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c1e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1c22:	84 ff       	sbrs	r24, 4
    1c24:	2c c0       	rjmp	.+88     	; 0x1c7e <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c26:	80 e1       	ldi	r24, 0x10	; 16
    1c28:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c2a:	82 e1       	ldi	r24, 0x12	; 18
    1c2c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c2e:	09 b4       	in	r0, 0x29	; 41
    1c30:	00 fe       	sbrs	r0, 0
    1c32:	fd cf       	rjmp	.-6      	; 0x1c2e <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c34:	e8 ed       	ldi	r30, 0xD8	; 216
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8f 7d       	andi	r24, 0xDF	; 223
    1c3c:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1c3e:	e1 ee       	ldi	r30, 0xE1	; 225
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 7e       	andi	r24, 0xEF	; 239
    1c46:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1c48:	e2 ee       	ldi	r30, 0xE2	; 226
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 7e       	andi	r24, 0xEF	; 239
    1c50:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c52:	80 81       	ld	r24, Z
    1c54:	81 60       	ori	r24, 0x01	; 1
    1c56:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1c58:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <USB_Device_ConfigurationNumber>
    1c5c:	88 23       	and	r24, r24
    1c5e:	21 f0       	breq	.+8      	; 0x1c68 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <USB_DeviceState>
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c68:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c6c:	88 23       	and	r24, r24
    1c6e:	14 f0       	brlt	.+4      	; 0x1c74 <__vector_10+0x11a>
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <__vector_10+0x11c>
    1c74:	83 e0       	ldi	r24, 0x03	; 3
    1c76:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1c7a:	0e 94 43 10 	call	0x2086	; 0x2086 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1c7e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1c82:	83 ff       	sbrs	r24, 3
    1c84:	25 c0       	rjmp	.+74     	; 0x1cd0 <__vector_10+0x176>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1c86:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1c8a:	83 ff       	sbrs	r24, 3
    1c8c:	21 c0       	rjmp	.+66     	; 0x1cd0 <__vector_10+0x176>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1c8e:	e1 ee       	ldi	r30, 0xE1	; 225
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	87 7f       	andi	r24, 0xF7	; 247
    1c96:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1c9e:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8e 7f       	andi	r24, 0xFE	; 254
    1ca6:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ca8:	e2 ee       	ldi	r30, 0xE2	; 226
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	8e 7f       	andi	r24, 0xFE	; 254
    1cb0:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 61       	ori	r24, 0x10	; 16
    1cb6:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1cb8:	42 e0       	ldi	r20, 0x02	; 2
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	0e 94 92 0c 	call	0x1924	; 0x1924 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1cc2:	e0 ef       	ldi	r30, 0xF0	; 240
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	88 60       	ori	r24, 0x08	; 8
    1cca:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ccc:	0e 94 43 10 	call	0x2086	; 0x2086 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	bf 91       	pop	r27
    1cd6:	af 91       	pop	r26
    1cd8:	9f 91       	pop	r25
    1cda:	8f 91       	pop	r24
    1cdc:	7f 91       	pop	r23
    1cde:	6f 91       	pop	r22
    1ce0:	5f 91       	pop	r21
    1ce2:	4f 91       	pop	r20
    1ce4:	3f 91       	pop	r19
    1ce6:	2f 91       	pop	r18
    1ce8:	0f 90       	pop	r0
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	0f 90       	pop	r0
    1cee:	1f 90       	pop	r1
    1cf0:	18 95       	reti

00001cf2 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1cf2:	1f 92       	push	r1
    1cf4:	0f 92       	push	r0
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	0f 92       	push	r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	af 93       	push	r26
    1d16:	bf 93       	push	r27
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	ef 93       	push	r30
    1d1e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d20:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1d24:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d26:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1d2a:	d8 2f       	mov	r29, r24
    1d2c:	d1 70       	andi	r29, 0x01	; 1
    1d2e:	80 fd       	sbrc	r24, 0
    1d30:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d32:	0f 2e       	mov	r0, r31
    1d34:	f9 ee       	ldi	r31, 0xE9	; 233
    1d36:	ef 2e       	mov	r14, r31
    1d38:	f1 2c       	mov	r15, r1
    1d3a:	f0 2d       	mov	r31, r0
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1d40:	00 ef       	ldi	r16, 0xF0	; 240
    1d42:	10 e0       	ldi	r17, 0x00	; 0
    1d44:	f8 01       	movw	r30, r16
    1d46:	80 81       	ld	r24, Z
    1d48:	87 7f       	andi	r24, 0xF7	; 247
    1d4a:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1d4c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1d4e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <USB_Device_ProcessControlRequest>
    1d52:	f7 01       	movw	r30, r14
    1d54:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d56:	f8 01       	movw	r30, r16
    1d58:	80 81       	ld	r24, Z
    1d5a:	88 60       	ori	r24, 0x08	; 8
    1d5c:	80 83       	st	Z, r24
    1d5e:	cd 2b       	or	r28, r29
    1d60:	cf 70       	andi	r28, 0x0F	; 15
    1d62:	f7 01       	movw	r30, r14
    1d64:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1d66:	ff 91       	pop	r31
    1d68:	ef 91       	pop	r30
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	bf 91       	pop	r27
    1d70:	af 91       	pop	r26
    1d72:	9f 91       	pop	r25
    1d74:	8f 91       	pop	r24
    1d76:	7f 91       	pop	r23
    1d78:	6f 91       	pop	r22
    1d7a:	5f 91       	pop	r21
    1d7c:	4f 91       	pop	r20
    1d7e:	3f 91       	pop	r19
    1d80:	2f 91       	pop	r18
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	0f 90       	pop	r0
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	0f 90       	pop	r0
    1d90:	1f 90       	pop	r1
    1d92:	18 95       	reti

00001d94 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	aa 97       	sbiw	r28, 0x2a	; 42
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	e3 e6       	ldi	r30, 0x63	; 99
    1dae:	f6 e0       	ldi	r31, 0x06	; 6
    1db0:	2b e6       	ldi	r18, 0x6B	; 107
    1db2:	36 e0       	ldi	r19, 0x06	; 6
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1db4:	a1 ef       	ldi	r26, 0xF1	; 241
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1dba:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1dbc:	2e 17       	cp	r18, r30
    1dbe:	3f 07       	cpc	r19, r31
    1dc0:	d9 f7       	brne	.-10     	; 0x1db8 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1dc2:	0e 94 45 11 	call	0x228a	; 0x228a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1dc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
    1dca:	83 ff       	sbrs	r24, 3
    1dcc:	37 c1       	rjmp	.+622    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1dce:	e3 e6       	ldi	r30, 0x63	; 99
    1dd0:	f6 e0       	ldi	r31, 0x06	; 6
    1dd2:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    1dd4:	31 81       	ldd	r19, Z+1	; 0x01
    1dd6:	83 2f       	mov	r24, r19
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	8a 30       	cpi	r24, 0x0A	; 10
    1ddc:	91 05       	cpc	r25, r1
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <USB_Device_ProcessControlRequest+0x4e>
    1de0:	2d c1       	rjmp	.+602    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
    1de2:	fc 01       	movw	r30, r24
    1de4:	e9 55       	subi	r30, 0x59	; 89
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1dec:	20 38       	cpi	r18, 0x80	; 128
    1dee:	21 f0       	breq	.+8      	; 0x1df8 <USB_Device_ProcessControlRequest+0x64>
    1df0:	22 38       	cpi	r18, 0x82	; 130
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <USB_Device_ProcessControlRequest+0x62>
    1df4:	23 c1       	rjmp	.+582    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <USB_Device_ProcessControlRequest+0x74>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1df8:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1dfc:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <USB_Device_RemoteWakeupEnabled>
    1e00:	99 23       	and	r25, r25
    1e02:	89 f0       	breq	.+34     	; 0x1e26 <USB_Device_ProcessControlRequest+0x92>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1e04:	82 60       	ori	r24, 0x02	; 2
    1e06:	0f c0       	rjmp	.+30     	; 0x1e26 <USB_Device_ProcessControlRequest+0x92>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e08:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <USB_ControlRequest+0x4>
    1e0c:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1e0e:	87 30       	cpi	r24, 0x07	; 7
    1e10:	08 f0       	brcs	.+2      	; 0x1e14 <USB_Device_ProcessControlRequest+0x80>
    1e12:	14 c1       	rjmp	.+552    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e14:	e9 ee       	ldi	r30, 0xE9	; 233
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e1a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1e1e:	85 fb       	bst	r24, 5
    1e20:	88 27       	eor	r24, r24
    1e22:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e24:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e26:	e8 ee       	ldi	r30, 0xE8	; 232
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	90 81       	ld	r25, Z
    1e2c:	97 7f       	andi	r25, 0xF7	; 247
    1e2e:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e30:	a1 ef       	ldi	r26, 0xF1	; 241
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    1e36:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e38:	80 81       	ld	r24, Z
    1e3a:	8e 77       	andi	r24, 0x7E	; 126
    1e3c:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1e3e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Endpoint_ClearStatusStage>
    1e42:	fc c0       	rjmp	.+504    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e44:	22 23       	and	r18, r18
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <USB_Device_ProcessControlRequest+0xb6>
    1e48:	08 c1       	rjmp	.+528    	; 0x205a <USB_Device_ProcessControlRequest+0x2c6>
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <USB_Device_ProcessControlRequest+0xbc>
    1e4e:	f6 c0       	rjmp	.+492    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
    1e50:	09 c1       	rjmp	.+530    	; 0x2064 <USB_Device_ProcessControlRequest+0x2d0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	33 30       	cpi	r19, 0x03	; 3
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <USB_Device_ProcessControlRequest+0xc6>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <USB_Device_RemoteWakeupEnabled>
    1e5e:	2c c0       	rjmp	.+88     	; 0x1eb8 <USB_Device_ProcessControlRequest+0x124>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e60:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <USB_ControlRequest+0x4>
    1e64:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1e66:	9f ef       	ldi	r25, 0xFF	; 255
    1e68:	98 0f       	add	r25, r24
    1e6a:	96 30       	cpi	r25, 0x06	; 6
    1e6c:	08 f0       	brcs	.+2      	; 0x1e70 <USB_Device_ProcessControlRequest+0xdc>
    1e6e:	e6 c0       	rjmp	.+460    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e70:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e74:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1e78:	90 ff       	sbrs	r25, 0
    1e7a:	1e c0       	rjmp	.+60     	; 0x1eb8 <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1e7c:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <USB_ControlRequest+0x1>
    1e80:	93 30       	cpi	r25, 0x03	; 3
    1e82:	31 f4       	brne	.+12     	; 0x1e90 <USB_Device_ProcessControlRequest+0xfc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e84:	eb ee       	ldi	r30, 0xEB	; 235
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	80 62       	ori	r24, 0x20	; 32
    1e8c:	80 83       	st	Z, r24
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <USB_Device_ProcessControlRequest+0x124>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e90:	eb ee       	ldi	r30, 0xEB	; 235
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	90 81       	ld	r25, Z
    1e96:	90 61       	ori	r25, 0x10	; 16
    1e98:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	a9 01       	movw	r20, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <USB_Device_ProcessControlRequest+0x112>
    1ea2:	44 0f       	add	r20, r20
    1ea4:	55 1f       	adc	r21, r21
    1ea6:	8a 95       	dec	r24
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <USB_Device_ProcessControlRequest+0x10e>
    1eaa:	aa ee       	ldi	r26, 0xEA	; 234
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	4c 93       	st	X, r20
				UERST = 0;
    1eb0:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 60       	ori	r24, 0x08	; 8
    1eb6:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eb8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ebc:	e8 ee       	ldi	r30, 0xE8	; 232
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	87 7f       	andi	r24, 0xF7	; 247
    1ec4:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ec6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Endpoint_ClearStatusStage>
    1eca:	b8 c0       	rjmp	.+368    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ecc:	21 11       	cpse	r18, r1
    1ece:	b6 c0       	rjmp	.+364    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1ed0:	10 91 65 06 	lds	r17, 0x0665	; 0x800665 <USB_ControlRequest+0x2>
    1ed4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1ed6:	e3 ee       	ldi	r30, 0xE3	; 227
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	80 78       	andi	r24, 0x80	; 128
    1ede:	81 2b       	or	r24, r17
    1ee0:	80 83       	st	Z, r24
    1ee2:	e8 ee       	ldi	r30, 0xE8	; 232
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	87 7f       	andi	r24, 0xF7	; 247
    1eea:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1eec:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ef0:	e8 ee       	ldi	r30, 0xE8	; 232
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1ef6:	80 ff       	sbrs	r24, 0
    1ef8:	fd cf       	rjmp	.-6      	; 0x1ef4 <USB_Device_ProcessControlRequest+0x160>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1efa:	e3 ee       	ldi	r30, 0xE3	; 227
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	80 68       	ori	r24, 0x80	; 128
    1f02:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f04:	11 11       	cpse	r17, r1
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <USB_Device_ProcessControlRequest+0x178>
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <USB_Device_ProcessControlRequest+0x17a>
    1f0c:	83 e0       	ldi	r24, 0x03	; 3
    1f0e:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <USB_DeviceState>
    1f12:	94 c0       	rjmp	.+296    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f14:	20 58       	subi	r18, 0x80	; 128
    1f16:	22 30       	cpi	r18, 0x02	; 2
    1f18:	08 f0       	brcs	.+2      	; 0x1f1c <USB_Device_ProcessControlRequest+0x188>
    1f1a:	90 c0       	rjmp	.+288    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f1c:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <USB_ControlRequest+0x2>
    1f20:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <USB_ControlRequest+0x3>
    1f24:	8c 3d       	cpi	r24, 0xDC	; 220
    1f26:	53 e0       	ldi	r21, 0x03	; 3
    1f28:	95 07       	cpc	r25, r21
    1f2a:	a1 f5       	brne	.+104    	; 0x1f94 <USB_Device_ProcessControlRequest+0x200>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f30:	8a e2       	ldi	r24, 0x2A	; 42
    1f32:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f34:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f36:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1f38:	de 01       	movw	r26, r28
    1f3a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f3e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f40:	41 e2       	ldi	r20, 0x21	; 33
    1f42:	e3 2f       	mov	r30, r19
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1f4a:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    1f4c:	20 ff       	sbrs	r18, 0
    1f4e:	03 c0       	rjmp	.+6      	; 0x1f56 <USB_Device_ProcessControlRequest+0x1c2>
					{
						SerialByte >>= 4;
    1f50:	82 95       	swap	r24
    1f52:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1f54:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1f56:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f58:	8a 30       	cpi	r24, 0x0A	; 10
    1f5a:	18 f0       	brcs	.+6      	; 0x1f62 <USB_Device_ProcessControlRequest+0x1ce>
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	c7 96       	adiw	r24, 0x37	; 55
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <USB_Device_ProcessControlRequest+0x1d2>
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	c0 96       	adiw	r24, 0x30	; 48
    1f66:	8d 93       	st	X+, r24
    1f68:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f6a:	2f 5f       	subi	r18, 0xFF	; 255
    1f6c:	24 31       	cpi	r18, 0x14	; 20
    1f6e:	49 f7       	brne	.-46     	; 0x1f42 <USB_Device_ProcessControlRequest+0x1ae>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1f70:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f72:	08 ee       	ldi	r16, 0xE8	; 232
    1f74:	10 e0       	ldi	r17, 0x00	; 0
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 81       	ld	r24, Z
    1f7a:	87 7f       	andi	r24, 0xF7	; 247
    1f7c:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f7e:	6a e2       	ldi	r22, 0x2A	; 42
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	ce 01       	movw	r24, r28
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	0e 94 89 0b 	call	0x1712	; 0x1712 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8b 77       	andi	r24, 0x7B	; 123
    1f90:	80 83       	st	Z, r24
    1f92:	54 c0       	rjmp	.+168    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f94:	60 91 67 06 	lds	r22, 0x0667	; 0x800667 <USB_ControlRequest+0x4>
    1f98:	70 91 68 06 	lds	r23, 0x0668	; 0x800668 <USB_ControlRequest+0x5>
    1f9c:	ae 01       	movw	r20, r28
    1f9e:	4f 5f       	subi	r20, 0xFF	; 255
    1fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa2:	0e 94 33 0a 	call	0x1466	; 0x1466 <CALLBACK_USB_GetDescriptor>
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	89 2b       	or	r24, r25
    1faa:	09 f4       	brne	.+2      	; 0x1fae <USB_Device_ProcessControlRequest+0x21a>
    1fac:	47 c0       	rjmp	.+142    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fae:	08 ee       	ldi	r16, 0xE8	; 232
    1fb0:	10 e0       	ldi	r17, 0x00	; 0
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	90 81       	ld	r25, Z
    1fb6:	97 7f       	andi	r25, 0xF7	; 247
    1fb8:	90 83       	st	Z, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	0e 94 0d 0c 	call	0x181a	; 0x181a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8b 77       	andi	r24, 0x7B	; 123
    1fc8:	80 83       	st	Z, r24
    1fca:	38 c0       	rjmp	.+112    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1fcc:	20 38       	cpi	r18, 0x80	; 128
    1fce:	b1 f5       	brne	.+108    	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd0:	e8 ee       	ldi	r30, 0xE8	; 232
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	87 7f       	andi	r24, 0xF7	; 247
    1fd8:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1fda:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fde:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8e 77       	andi	r24, 0x7E	; 126
    1fe6:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1fe8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Endpoint_ClearStatusStage>
    1fec:	27 c0       	rjmp	.+78     	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fee:	21 11       	cpse	r18, r1
    1ff0:	25 c0       	rjmp	.+74     	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1ff2:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <USB_ControlRequest+0x2>
    1ff6:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <USB_ControlRequest+0x3>
    1ffa:	99 27       	eor	r25, r25
    1ffc:	02 97       	sbiw	r24, 0x02	; 2
    1ffe:	f4 f4       	brge	.+60     	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2000:	e8 ee       	ldi	r30, 0xE8	; 232
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	87 7f       	andi	r24, 0xF7	; 247
    2008:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    200a:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <USB_ControlRequest+0x2>
    200e:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    2012:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2016:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <USB_Device_ConfigurationNumber>
    201a:	88 23       	and	r24, r24
    201c:	21 f0       	breq	.+8      	; 0x2026 <USB_Device_ProcessControlRequest+0x292>
	  USB_DeviceState = DEVICE_STATE_Configured;
    201e:	84 e0       	ldi	r24, 0x04	; 4
    2020:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <USB_DeviceState>
    2024:	09 c0       	rjmp	.+18     	; 0x2038 <USB_Device_ProcessControlRequest+0x2a4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2026:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    202a:	88 23       	and	r24, r24
    202c:	14 f0       	brlt	.+4      	; 0x2032 <USB_Device_ProcessControlRequest+0x29e>
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	01 c0       	rjmp	.+2      	; 0x2034 <USB_Device_ProcessControlRequest+0x2a0>
    2032:	84 e0       	ldi	r24, 0x04	; 4
    2034:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    2038:	0e 94 40 11 	call	0x2280	; 0x2280 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    203c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2040:	83 ff       	sbrs	r24, 3
    2042:	16 c0       	rjmp	.+44     	; 0x2070 <USB_Device_ProcessControlRequest+0x2dc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2044:	e8 ee       	ldi	r30, 0xE8	; 232
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	87 7f       	andi	r24, 0xF7	; 247
    204c:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    204e:	eb ee       	ldi	r30, 0xEB	; 235
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	80 62       	ori	r24, 0x20	; 32
    2056:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2058:	0b c0       	rjmp	.+22     	; 0x2070 <USB_Device_ProcessControlRequest+0x2dc>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    205a:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <USB_ControlRequest+0x2>
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	69 f7       	brne	.-38     	; 0x203c <USB_Device_ProcessControlRequest+0x2a8>
    2062:	f7 ce       	rjmp	.-530    	; 0x1e52 <USB_Device_ProcessControlRequest+0xbe>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2064:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <USB_ControlRequest+0x2>
    2068:	88 23       	and	r24, r24
    206a:	09 f4       	brne	.+2      	; 0x206e <USB_Device_ProcessControlRequest+0x2da>
    206c:	f9 ce       	rjmp	.-526    	; 0x1e60 <USB_Device_ProcessControlRequest+0xcc>
    206e:	24 cf       	rjmp	.-440    	; 0x1eb8 <USB_Device_ProcessControlRequest+0x124>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2070:	aa 96       	adiw	r28, 0x2a	; 42
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	08 95       	ret

00002086 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    2086:	08 95       	ret

00002088 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2088:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    208a:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <USB_DeviceState>
    208e:	88 23       	and	r24, r24
    2090:	a1 f0       	breq	.+40     	; 0x20ba <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2092:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    2096:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2098:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    209c:	98 2f       	mov	r25, r24
    209e:	91 70       	andi	r25, 0x01	; 1
    20a0:	80 fd       	sbrc	r24, 0
    20a2:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    20a4:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20a6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    20ae:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    20b0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20b4:	cf 70       	andi	r28, 0x0F	; 15
    20b6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <addByteToUsartWriteBuffer>:
}

int getUsartWriteBufferSize()
{
	return g_size;
}
    20be:	20 91 02 06 	lds	r18, 0x0602	; 0x800602 <g_size>
    20c2:	30 91 03 06 	lds	r19, 0x0603	; 0x800603 <g_size+0x1>
    20c6:	20 34       	cpi	r18, 0x40	; 64
    20c8:	31 05       	cpc	r19, r1
    20ca:	fc f4       	brge	.+62     	; 0x210a <addByteToUsartWriteBuffer+0x4c>
    20cc:	40 91 44 06 	lds	r20, 0x0644	; 0x800644 <g_wr_Ptr>
    20d0:	50 91 45 06 	lds	r21, 0x0645	; 0x800645 <g_wr_Ptr+0x1>
    20d4:	fa 01       	movw	r30, r20
    20d6:	ec 5f       	subi	r30, 0xFC	; 252
    20d8:	f9 4f       	sbci	r31, 0xF9	; 249
    20da:	80 83       	st	Z, r24
    20dc:	4f 5f       	subi	r20, 0xFF	; 255
    20de:	5f 4f       	sbci	r21, 0xFF	; 255
    20e0:	40 34       	cpi	r20, 0x40	; 64
    20e2:	51 05       	cpc	r21, r1
    20e4:	2c f4       	brge	.+10     	; 0x20f0 <addByteToUsartWriteBuffer+0x32>
    20e6:	50 93 45 06 	sts	0x0645, r21	; 0x800645 <g_wr_Ptr+0x1>
    20ea:	40 93 44 06 	sts	0x0644, r20	; 0x800644 <g_wr_Ptr>
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <addByteToUsartWriteBuffer+0x3a>
    20f0:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <g_wr_Ptr+0x1>
    20f4:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <g_wr_Ptr>
    20f8:	2f 5f       	subi	r18, 0xFF	; 255
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
    20fc:	30 93 03 06 	sts	0x0603, r19	; 0x800603 <g_size+0x1>
    2100:	20 93 02 06 	sts	0x0602, r18	; 0x800602 <g_size>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	08 95       	ret
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	08 95       	ret

00002110 <addStringToUsartWriteBuffer>:
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	ec 01       	movw	r28, r24
    2116:	88 81       	ld	r24, Y
    2118:	88 23       	and	r24, r24
    211a:	31 f0       	breq	.+12     	; 0x2128 <addStringToUsartWriteBuffer+0x18>
    211c:	21 96       	adiw	r28, 0x01	; 1
    211e:	0e 94 5f 10 	call	0x20be	; 0x20be <addByteToUsartWriteBuffer>
    2122:	89 91       	ld	r24, Y+
    2124:	81 11       	cpse	r24, r1
    2126:	fb cf       	rjmp	.-10     	; 0x211e <addStringToUsartWriteBuffer+0xe>
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	08 95       	ret

0000212e <__vector_25>:
	END Usart Write Buffer ADT

*/

ISR(USART1_RX_vect)
{
    212e:	1f 92       	push	r1
    2130:	0f 92       	push	r0
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	0f 92       	push	r0
    2136:	11 24       	eor	r1, r1
    2138:	2f 93       	push	r18
    213a:	3f 93       	push	r19
    213c:	4f 93       	push	r20
    213e:	5f 93       	push	r21
    2140:	6f 93       	push	r22
    2142:	7f 93       	push	r23
    2144:	8f 93       	push	r24
    2146:	9f 93       	push	r25
    2148:	af 93       	push	r26
    214a:	bf 93       	push	r27
    214c:	ef 93       	push	r30
    214e:	ff 93       	push	r31
	if (UDR1 == '~')
    2150:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
    2154:	8e 37       	cpi	r24, 0x7E	; 126
    2156:	11 f4       	brne	.+4      	; 0x215c <__vector_25+0x2e>
	{
		stopMoving();
    2158:	0e 94 97 04 	call	0x92e	; 0x92e <stopMoving>
	}
}
    215c:	ff 91       	pop	r31
    215e:	ef 91       	pop	r30
    2160:	bf 91       	pop	r27
    2162:	af 91       	pop	r26
    2164:	9f 91       	pop	r25
    2166:	8f 91       	pop	r24
    2168:	7f 91       	pop	r23
    216a:	6f 91       	pop	r22
    216c:	5f 91       	pop	r21
    216e:	4f 91       	pop	r20
    2170:	3f 91       	pop	r19
    2172:	2f 91       	pop	r18
    2174:	0f 90       	pop	r0
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	0f 90       	pop	r0
    217a:	1f 90       	pop	r1
    217c:	18 95       	reti

0000217e <__vector_27>:

ISR(USART1_TX_vect)
{
    217e:	1f 92       	push	r1
    2180:	0f 92       	push	r0
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	0f 92       	push	r0
    2186:	11 24       	eor	r1, r1
    2188:	8f 93       	push	r24
    218a:	9f 93       	push	r25
    218c:	ef 93       	push	r30
    218e:	ff 93       	push	r31
	if (getUsartWriteBufferSize())
    2190:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <g_size>
    2194:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <g_size+0x1>
    2198:	89 2b       	or	r24, r25
    219a:	19 f1       	breq	.+70     	; 0x21e2 <__vector_27+0x64>
	{
		UDR1 = g_writeBuffer[g_r_Ptr];
    219c:	e0 91 46 06 	lds	r30, 0x0646	; 0x800646 <g_r_Ptr>
    21a0:	f0 91 47 06 	lds	r31, 0x0647	; 0x800647 <g_r_Ptr+0x1>
    21a4:	ec 5f       	subi	r30, 0xFC	; 252
    21a6:	f9 4f       	sbci	r31, 0xF9	; 249
    21a8:	80 81       	ld	r24, Z
    21aa:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
		g_r_Ptr++;
    21ae:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <g_r_Ptr>
    21b2:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <g_r_Ptr+0x1>
    21b6:	01 96       	adiw	r24, 0x01	; 1
		if(g_r_Ptr >= g_maxSize)
    21b8:	80 34       	cpi	r24, 0x40	; 64
    21ba:	91 05       	cpc	r25, r1
    21bc:	2c f4       	brge	.+10     	; 0x21c8 <__vector_27+0x4a>
ISR(USART1_TX_vect)
{
	if (getUsartWriteBufferSize())
	{
		UDR1 = g_writeBuffer[g_r_Ptr];
		g_r_Ptr++;
    21be:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <g_r_Ptr+0x1>
    21c2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <g_r_Ptr>
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <__vector_27+0x52>
		if(g_r_Ptr >= g_maxSize)
		{
			g_r_Ptr = 0;
    21c8:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <g_r_Ptr+0x1>
    21cc:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <g_r_Ptr>
		}
		g_size--;
    21d0:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <g_size>
    21d4:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <g_size+0x1>
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <g_size+0x1>
    21de:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <g_size>
	}
}
    21e2:	ff 91       	pop	r31
    21e4:	ef 91       	pop	r30
    21e6:	9f 91       	pop	r25
    21e8:	8f 91       	pop	r24
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	0f 90       	pop	r0
    21f0:	1f 90       	pop	r1
    21f2:	18 95       	reti

000021f4 <usartInit>:

void usartInit()
{
	// Set the baud rate
	UBRR1 = 8;
    21f4:	88 e0       	ldi	r24, 0x08	; 8
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
    21fc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	
	// Enable interrupts on receiving and finishing a transmit
	UCSR1B |= (1<<RXCIE1) | (1<<TXCIE1);	// We don't interrupt on empty buffer because we may not always have something we want to write.
    2200:	e9 ec       	ldi	r30, 0xC9	; 201
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	80 6c       	ori	r24, 0xC0	; 192
    2208:	80 83       	st	Z, r24
	
	// Enable both the receiver and transmitter
	UCSR1B |= (1<<RXEN1) | (1<<TXEN1);
    220a:	80 81       	ld	r24, Z
    220c:	88 61       	ori	r24, 0x18	; 24
    220e:	80 83       	st	Z, r24
    2210:	08 95       	ret

00002212 <usartTask>:
	
}

void usartTask()
{
	if (getUsartWriteBufferSize())
    2212:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <g_size>
    2216:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <g_size+0x1>
    221a:	89 2b       	or	r24, r25
    221c:	39 f1       	breq	.+78     	; 0x226c <usartTask+0x5a>
	{
		if (UCSR1A & (1<<UDRE1))
    221e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
    2222:	85 ff       	sbrs	r24, 5
    2224:	23 c0       	rjmp	.+70     	; 0x226c <usartTask+0x5a>
		{
			UDR1 = g_writeBuffer[g_r_Ptr];
    2226:	e0 91 46 06 	lds	r30, 0x0646	; 0x800646 <g_r_Ptr>
    222a:	f0 91 47 06 	lds	r31, 0x0647	; 0x800647 <g_r_Ptr+0x1>
    222e:	ec 5f       	subi	r30, 0xFC	; 252
    2230:	f9 4f       	sbci	r31, 0xF9	; 249
    2232:	80 81       	ld	r24, Z
    2234:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
			g_r_Ptr++;
    2238:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <g_r_Ptr>
    223c:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <g_r_Ptr+0x1>
    2240:	01 96       	adiw	r24, 0x01	; 1
			if(g_r_Ptr >= g_maxSize)
    2242:	80 34       	cpi	r24, 0x40	; 64
    2244:	91 05       	cpc	r25, r1
    2246:	2c f4       	brge	.+10     	; 0x2252 <usartTask+0x40>
	if (getUsartWriteBufferSize())
	{
		if (UCSR1A & (1<<UDRE1))
		{
			UDR1 = g_writeBuffer[g_r_Ptr];
			g_r_Ptr++;
    2248:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <g_r_Ptr+0x1>
    224c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <g_r_Ptr>
    2250:	04 c0       	rjmp	.+8      	; 0x225a <usartTask+0x48>
			if(g_r_Ptr >= g_maxSize)
			{
				g_r_Ptr = 0;
    2252:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <g_r_Ptr+0x1>
    2256:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <g_r_Ptr>
			}
			g_size--;
    225a:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <g_size>
    225e:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <g_size+0x1>
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <g_size+0x1>
    2268:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <g_size>
    226c:	08 95       	ret

0000226e <vsTask>:

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
    226e:	8a e0       	ldi	r24, 0x0A	; 10
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	0e 94 c7 0a 	call	0x158e	; 0x158e <CDC_Device_USBTask>
    2276:	0e 94 44 10 	call	0x2088	; 0x2088 <USB_USBTask>
    227a:	08 95       	ret

0000227c <EVENT_USB_Device_Connect>:
}


/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    227c:	08 95       	ret

0000227e <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    227e:	08 95       	ret

00002280 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    2280:	8a e0       	ldi	r24, 0x0A	; 10
    2282:	91 e0       	ldi	r25, 0x01	; 1
    2284:	0e 94 6f 0a 	call	0x14de	; 0x14de <CDC_Device_ConfigureEndpoints>
    2288:	08 95       	ret

0000228a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    228a:	8a e0       	ldi	r24, 0x0A	; 10
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <CDC_Device_ProcessControlRequest>
    2292:	08 95       	ret

00002294 <EVENT_CDC_Device_ControLineStateChanged>:
 *  control lines sent from the host..
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
    2294:	08 95       	ret

00002296 <getDistSensorDist>:
{
	// Math could prob be more efficient
	*(str + 3) = '\0';						// Sets the final byte to the null terminator
	*(str + 2) = ((raw % 100) % 10) + 48;	// Sets the 1's place
	*(str + 1) = (raw % 100 / 10) + 48;		// Sets the 10's place
	*str = (raw / 100) + 48;				// Sets the 100's place
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	fc 01       	movw	r30, r24
    229c:	e2 5b       	subi	r30, 0xB2	; 178
    229e:	f9 4f       	sbci	r31, 0xF9	; 249
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	08 95       	ret

000022a6 <VL6180XInit>:
static uint8_t whoAmIRegAdd[2] = {0x00, 0x00};
static uint8_t addressReg[3] = {0x02, 0x12, 0x29};

// Initializes a VL6180x sensor
void VL6180XInit(int index)
{
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	ec 01       	movw	r28, r24
	shiftInBit(1);
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	0e 94 59 08 	call	0x10b2	; 0x10b2 <shiftInBit>
    22ba:	8f e3       	ldi	r24, 0x3F	; 63
    22bc:	9f e1       	ldi	r25, 0x1F	; 31
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <VL6180XInit+0x18>
    22c2:	00 c0       	rjmp	.+0      	; 0x22c4 <VL6180XInit+0x1e>
    22c4:	00 00       	nop
	_delay_ms(2);
	setSensorData(index, 0);								// Set the sensor lastData to 0
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	ce 01       	movw	r24, r28
    22cc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <setSensorData>
	setSensorDeviceAddress(index, 0x30 + index);
    22d0:	be 01       	movw	r22, r28
    22d2:	60 5d       	subi	r22, 0xD0	; 208
    22d4:	7f 4f       	sbci	r23, 0xFF	; 255
    22d6:	ce 01       	movw	r24, r28
    22d8:	0e 94 3a 07 	call	0xe74	; 0xe74 <setSensorDeviceAddress>
	setSensorShouldRead(index, 0b00000100);	
    22dc:	64 e0       	ldi	r22, 0x04	; 4
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	ce 01       	movw	r24, r28
    22e2:	0e 94 28 07 	call	0xe50	; 0xe50 <setSensorShouldRead>
			
 	addInstruction(NUM_OF_TOTAL_SENSORS, 0, &(whoAmIRegAdd[0]), 2);		// Tell the sensor we want to read an ID reg
    22e6:	22 e0       	ldi	r18, 0x02	; 2
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4c e4       	ldi	r20, 0x4C	; 76
    22ec:	56 e0       	ldi	r21, 0x06	; 6
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	8a e0       	ldi	r24, 0x0A	; 10
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
 	addInstruction(NUM_OF_TOTAL_SENSORS, 1, getSensorDataPtr(NUM_OF_TOTAL_SENSORS), 1);	// Read the ID reg
    22fa:	8a e0       	ldi	r24, 0x0A	; 10
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 ed 06 	call	0xdda	; 0xdda <getSensorDataPtr>
    2302:	21 e0       	ldi	r18, 0x01	; 1
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	ac 01       	movw	r20, r24
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	8a e0       	ldi	r24, 0x0A	; 10
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
 	while (getSensorData(NUM_OF_TOTAL_SENSORS) != 0xb4)					// Wait until the last two instructions finish or get stuck forever
    2314:	02 c0       	rjmp	.+4      	; 0x231a <VL6180XInit+0x74>
 	{
		I2CTask();							
    2316:	0e 94 43 08 	call	0x1086	; 0x1086 <I2CTask>
	setSensorDeviceAddress(index, 0x30 + index);
	setSensorShouldRead(index, 0b00000100);	
			
 	addInstruction(NUM_OF_TOTAL_SENSORS, 0, &(whoAmIRegAdd[0]), 2);		// Tell the sensor we want to read an ID reg
 	addInstruction(NUM_OF_TOTAL_SENSORS, 1, getSensorDataPtr(NUM_OF_TOTAL_SENSORS), 1);	// Read the ID reg
 	while (getSensorData(NUM_OF_TOTAL_SENSORS) != 0xb4)					// Wait until the last two instructions finish or get stuck forever
    231a:	8a e0       	ldi	r24, 0x0A	; 10
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	0e 94 f4 06 	call	0xde8	; 0xde8 <getSensorData>
    2322:	84 3b       	cpi	r24, 0xB4	; 180
    2324:	91 05       	cpc	r25, r1
    2326:	b9 f7       	brne	.-18     	; 0x2316 <VL6180XInit+0x70>
 	{
		I2CTask();							
 	}
	setSensorData(NUM_OF_TOTAL_SENSORS, 0);								// Set the sensor lastData to 0 again (to check for failed initialization)
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	8a e0       	ldi	r24, 0x0A	; 10
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 1e 07 	call	0xe3c	; 0xe3c <setSensorData>
	
	addressReg[2] = getSensorDeviceAddress(index);
    2334:	ce 01       	movw	r24, r28
    2336:	0e 94 14 07 	call	0xe28	; 0xe28 <getSensorDeviceAddress>
    233a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <addressReg+0x2>
	addInstruction(NUM_OF_TOTAL_SENSORS, 0, &(addressReg[0]), 3);
    233e:	23 e0       	ldi	r18, 0x03	; 3
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4c e2       	ldi	r20, 0x2C	; 44
    2344:	51 e0       	ldi	r21, 0x01	; 1
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	70 e0       	ldi	r23, 0x00	; 0
    234a:	8a e0       	ldi	r24, 0x0A	; 10
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
	addInstruction(index, 0, &(addressReg[0]), 2);
    2352:	22 e0       	ldi	r18, 0x02	; 2
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4c e2       	ldi	r20, 0x2C	; 44
    2358:	51 e0       	ldi	r21, 0x01	; 1
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	ce 01       	movw	r24, r28
    2360:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
	addInstruction(index, 1, getSensorDataPtr(index), 1);
    2364:	ce 01       	movw	r24, r28
    2366:	0e 94 ed 06 	call	0xdda	; 0xdda <getSensorDataPtr>
    236a:	21 e0       	ldi	r18, 0x01	; 1
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	ac 01       	movw	r20, r24
    2370:	61 e0       	ldi	r22, 0x01	; 1
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	ce 01       	movw	r24, r28
    2376:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
	while (getSensorData(index) != addressReg[2])
    237a:	0c e2       	ldi	r16, 0x2C	; 44
    237c:	11 e0       	ldi	r17, 0x01	; 1
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <VL6180XInit+0xde>
	{
		I2CTask();
    2380:	0e 94 43 08 	call	0x1086	; 0x1086 <I2CTask>
	
	addressReg[2] = getSensorDeviceAddress(index);
	addInstruction(NUM_OF_TOTAL_SENSORS, 0, &(addressReg[0]), 3);
	addInstruction(index, 0, &(addressReg[0]), 2);
	addInstruction(index, 1, getSensorDataPtr(index), 1);
	while (getSensorData(index) != addressReg[2])
    2384:	ce 01       	movw	r24, r28
    2386:	0e 94 f4 06 	call	0xde8	; 0xde8 <getSensorData>
    238a:	f8 01       	movw	r30, r16
    238c:	22 81       	ldd	r18, Z+2	; 0x02
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	82 17       	cp	r24, r18
    2392:	93 07       	cpc	r25, r19
    2394:	a9 f7       	brne	.-22     	; 0x2380 <VL6180XInit+0xda>
	{
		I2CTask();
	}
	setSensorData(index, 0);
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	70 e0       	ldi	r23, 0x00	; 0
    239a:	ce 01       	movw	r24, r28
    239c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <setSensorData>
    23a0:	03 e5       	ldi	r16, 0x53	; 83
    23a2:	11 e0       	ldi	r17, 0x01	; 1
    23a4:	0f 2e       	mov	r0, r31
    23a6:	fd ea       	ldi	r31, 0xAD	; 173
    23a8:	ef 2e       	mov	r14, r31
    23aa:	f1 e0       	ldi	r31, 0x01	; 1
    23ac:	ff 2e       	mov	r15, r31
    23ae:	f0 2d       	mov	r31, r0
	
	// For each of the private registers
	for(int i = 0; i < NUM_PRIVATE_REGS; i++)
	{
		// Write the correct values
		while(!addInstruction(index, 0, &(VL6180XRequiredInitData[i][0]), 3));
    23b0:	23 e0       	ldi	r18, 0x03	; 3
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	a8 01       	movw	r20, r16
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	ce 01       	movw	r24, r28
    23bc:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
    23c0:	89 2b       	or	r24, r25
    23c2:	b1 f3       	breq	.-20     	; 0x23b0 <VL6180XInit+0x10a>
    23c4:	0d 5f       	subi	r16, 0xFD	; 253
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
		I2CTask();
	}
	setSensorData(index, 0);
	
	// For each of the private registers
	for(int i = 0; i < NUM_PRIVATE_REGS; i++)
    23c8:	e0 16       	cp	r14, r16
    23ca:	f1 06       	cpc	r15, r17
    23cc:	89 f7       	brne	.-30     	; 0x23b0 <VL6180XInit+0x10a>
    23ce:	0f e2       	ldi	r16, 0x2F	; 47
    23d0:	11 e0       	ldi	r17, 0x01	; 1
    23d2:	0f 2e       	mov	r0, r31
    23d4:	f3 e5       	ldi	r31, 0x53	; 83
    23d6:	ef 2e       	mov	r14, r31
    23d8:	f1 e0       	ldi	r31, 0x01	; 1
    23da:	ff 2e       	mov	r15, r31
    23dc:	f0 2d       	mov	r31, r0
	
	// For each of the public regs
	for(int i = 0; i < NUM_PUBLIC_REGS; i++)
	{
		// Write the correct values
		while(!addInstruction(index, 0, &(VL6180XCustomInitData[i][0]), 3));
    23de:	23 e0       	ldi	r18, 0x03	; 3
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	a8 01       	movw	r20, r16
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	70 e0       	ldi	r23, 0x00	; 0
    23e8:	ce 01       	movw	r24, r28
    23ea:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
    23ee:	89 2b       	or	r24, r25
    23f0:	b1 f3       	breq	.-20     	; 0x23de <VL6180XInit+0x138>
    23f2:	0d 5f       	subi	r16, 0xFD	; 253
    23f4:	1f 4f       	sbci	r17, 0xFF	; 255
		// Write the correct values
		while(!addInstruction(index, 0, &(VL6180XRequiredInitData[i][0]), 3));
	}
	
	// For each of the public regs
	for(int i = 0; i < NUM_PUBLIC_REGS; i++)
    23f6:	e0 16       	cp	r14, r16
    23f8:	f1 06       	cpc	r15, r17
    23fa:	89 f7       	brne	.-30     	; 0x23de <VL6180XInit+0x138>
	{
		// Write the correct values
		while(!addInstruction(index, 0, &(VL6180XCustomInitData[i][0]), 3));
	}
}
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	08 95       	ret

0000240a <VL6180XAddReadInstruction>:
static uint8_t VL6180XRangeResultLocation[2] = {0x00, 0x62};
static uint8_t VL6180XIntClear[3] = {0x00, 0x15, 0x07};
	
// This adds the instructions for a VL6180X Read
void VL6180XAddReadInstruction(int index)
{
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	ec 01       	movw	r28, r24
	while(!addInstruction(index, 0, &(VL6180XRangeResultLocation[0]), 2));
    2410:	22 e0       	ldi	r18, 0x02	; 2
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a e2       	ldi	r20, 0x2A	; 42
    2416:	51 e0       	ldi	r21, 0x01	; 1
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	ce 01       	movw	r24, r28
    241e:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
    2422:	89 2b       	or	r24, r25
    2424:	a9 f3       	breq	.-22     	; 0x2410 <VL6180XAddReadInstruction+0x6>
	while(!addInstruction(index, 1, getSensorDataPtr(index), 1));
    2426:	ce 01       	movw	r24, r28
    2428:	0e 94 ed 06 	call	0xdda	; 0xdda <getSensorDataPtr>
    242c:	21 e0       	ldi	r18, 0x01	; 1
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	ac 01       	movw	r20, r24
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	70 e0       	ldi	r23, 0x00	; 0
    2436:	ce 01       	movw	r24, r28
    2438:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
    243c:	89 2b       	or	r24, r25
    243e:	99 f3       	breq	.-26     	; 0x2426 <VL6180XAddReadInstruction+0x1c>
	while(!addInstruction(index, 0, &VL6180XIntClear[0], 3));
    2440:	23 e0       	ldi	r18, 0x03	; 3
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	47 e2       	ldi	r20, 0x27	; 39
    2446:	51 e0       	ldi	r21, 0x01	; 1
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	ce 01       	movw	r24, r28
    244e:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
    2452:	89 2b       	or	r24, r25
    2454:	a9 f3       	breq	.-22     	; 0x2440 <VL6180XAddReadInstruction+0x36>
}
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	08 95       	ret

0000245c <VL6180XCheckForRangeData>:
// This location stores information about the RangeData
static uint8_t VL6180XRangeDataLocation[2] = {0x00, 0x4F};
	
// This checks for range data availability (used to poll after receiving interrupt)
void VL6180XCheckForRangeData(int index)
{
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	ec 01       	movw	r28, r24
	while(!addInstruction(index, 0, &(VL6180XRangeDataLocation[0]), 2));
    2462:	22 e0       	ldi	r18, 0x02	; 2
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	45 e2       	ldi	r20, 0x25	; 37
    2468:	51 e0       	ldi	r21, 0x01	; 1
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	70 e0       	ldi	r23, 0x00	; 0
    246e:	ce 01       	movw	r24, r28
    2470:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
    2474:	89 2b       	or	r24, r25
    2476:	a9 f3       	breq	.-22     	; 0x2462 <VL6180XCheckForRangeData+0x6>
	while(!addInstruction(index, 1, getSensorShouldReadPtr(index), 1));
    2478:	ce 01       	movw	r24, r28
    247a:	0e 94 03 07 	call	0xe06	; 0xe06 <getSensorShouldReadPtr>
    247e:	21 e0       	ldi	r18, 0x01	; 1
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	ac 01       	movw	r20, r24
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	ce 01       	movw	r24, r28
    248a:	0e 94 03 03 	call	0x606	; 0x606 <addInstruction>
    248e:	89 2b       	or	r24, r25
    2490:	99 f3       	breq	.-26     	; 0x2478 <VL6180XCheckForRangeData+0x1c>
}
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <VL6180XInterruptTask>:

// Should be called each time EXTINT sets the VL6180x flag
void VL6180XInterruptTask()
{
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
	// Checks each dist sensor to see if we should update our range data for it
	for(int i = 0; i < NUM_OF_DIST_SENSORS; i++)
    249c:	c0 e0       	ldi	r28, 0x00	; 0
    249e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		VL6180XCheckForRangeData(i);
    24a0:	ce 01       	movw	r24, r28
    24a2:	0e 94 2e 12 	call	0x245c	; 0x245c <VL6180XCheckForRangeData>

// Should be called each time EXTINT sets the VL6180x flag
void VL6180XInterruptTask()
{
	// Checks each dist sensor to see if we should update our range data for it
	for(int i = 0; i < NUM_OF_DIST_SENSORS; i++)
    24a6:	21 96       	adiw	r28, 0x01	; 1
    24a8:	c8 30       	cpi	r28, 0x08	; 8
    24aa:	d1 05       	cpc	r29, r1
    24ac:	c9 f7       	brne	.-14     	; 0x24a0 <VL6180XInterruptTask+0x8>
	{
		VL6180XCheckForRangeData(i);
		//setSensorShouldRead(i, 0b00000100);
	}
}
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	08 95       	ret

000024b4 <VL6180XCheckForFailures>:
	
}

// This MUST happen LESS than every 65 ms (right now its 200 :) )
void VL6180XCheckForFailures()
{
    24b4:	1f 93       	push	r17
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
	for (int i = 0; i < NUM_OF_DIST_SENSORS; i++)
    24ba:	c0 e0       	ldi	r28, 0x00	; 0
    24bc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(!(getSensorData(i)))
    24be:	ce 01       	movw	r24, r28
    24c0:	0e 94 f4 06 	call	0xde8	; 0xde8 <getSensorData>
    24c4:	89 2b       	or	r24, r25
    24c6:	79 f4       	brne	.+30     	; 0x24e6 <VL6180XCheckForFailures+0x32>
 		{
// 			fputc('0'+i, &USBSerialStream);
//			setMotorDir(BOTH_MOTORS_PASS, !getMotorDir(RIGHT_MOTOR_PASS));
			shiftRegInit();
    24c8:	0e 94 6d 08 	call	0x10da	; 0x10da <shiftRegInit>
			for (int j = 0; j < NUM_OF_DIST_SENSORS; j++)
    24cc:	c0 e0       	ldi	r28, 0x00	; 0
    24ce:	d0 e0       	ldi	r29, 0x00	; 0
			{
				PINC |= 0xff;		//Debugging
    24d0:	1f ef       	ldi	r17, 0xFF	; 255
    24d2:	86 b1       	in	r24, 0x06	; 6
    24d4:	16 b9       	out	0x06, r17	; 6
				VL6180XInit(j);
    24d6:	ce 01       	movw	r24, r28
    24d8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <VL6180XInit>
		if(!(getSensorData(i)))
 		{
// 			fputc('0'+i, &USBSerialStream);
//			setMotorDir(BOTH_MOTORS_PASS, !getMotorDir(RIGHT_MOTOR_PASS));
			shiftRegInit();
			for (int j = 0; j < NUM_OF_DIST_SENSORS; j++)
    24dc:	21 96       	adiw	r28, 0x01	; 1
    24de:	c8 30       	cpi	r28, 0x08	; 8
    24e0:	d1 05       	cpc	r29, r1
    24e2:	b9 f7       	brne	.-18     	; 0x24d2 <VL6180XCheckForFailures+0x1e>
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <VL6180XCheckForFailures+0x50>
}

// This MUST happen LESS than every 65 ms (right now its 200 :) )
void VL6180XCheckForFailures()
{
	for (int i = 0; i < NUM_OF_DIST_SENSORS; i++)
    24e6:	21 96       	adiw	r28, 0x01	; 1
    24e8:	c8 30       	cpi	r28, 0x08	; 8
    24ea:	d1 05       	cpc	r29, r1
    24ec:	41 f7       	brne	.-48     	; 0x24be <VL6180XCheckForFailures+0xa>
    24ee:	0a c0       	rjmp	.+20     	; 0x2504 <VL6180XCheckForFailures+0x50>
			break;
		}
	}
	for (int i = 0; i < NUM_OF_DIST_SENSORS; i++)
	{
		setSensorData(i, 0);
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	ce 01       	movw	r24, r28
    24f6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <setSensorData>
				VL6180XInit(j);
			}
			break;
		}
	}
	for (int i = 0; i < NUM_OF_DIST_SENSORS; i++)
    24fa:	21 96       	adiw	r28, 0x01	; 1
    24fc:	c8 30       	cpi	r28, 0x08	; 8
    24fe:	d1 05       	cpc	r29, r1
    2500:	b9 f7       	brne	.-18     	; 0x24f0 <VL6180XCheckForFailures+0x3c>
    2502:	03 c0       	rjmp	.+6      	; 0x250a <VL6180XCheckForFailures+0x56>
		if(!(getSensorData(i)))
 		{
// 			fputc('0'+i, &USBSerialStream);
//			setMotorDir(BOTH_MOTORS_PASS, !getMotorDir(RIGHT_MOTOR_PASS));
			shiftRegInit();
			for (int j = 0; j < NUM_OF_DIST_SENSORS; j++)
    2504:	c0 e0       	ldi	r28, 0x00	; 0
    2506:	d0 e0       	ldi	r29, 0x00	; 0
    2508:	f3 cf       	rjmp	.-26     	; 0x24f0 <VL6180XCheckForFailures+0x3c>
	}
	for (int i = 0; i < NUM_OF_DIST_SENSORS; i++)
	{
		setSensorData(i, 0);
	}
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	1f 91       	pop	r17
    2510:	08 95       	ret

00002512 <VL6180XTask>:
	}
}

// Handles VL6180x periodic things
void VL6180XTask()
{
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
	static int lastMillis = 0;
	static int failureCounter = 0;
	
	if (abs(getMillis() - lastMillis) > 25)
    251a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
    251e:	20 91 4a 06 	lds	r18, 0x064A	; 0x80064a <lastMillis.2060>
    2522:	30 91 4b 06 	lds	r19, 0x064B	; 0x80064b <lastMillis.2060+0x1>
    2526:	82 1b       	sub	r24, r18
    2528:	93 0b       	sbc	r25, r19
    252a:	9c 01       	movw	r18, r24
    252c:	22 f4       	brpl	.+8      	; 0x2536 <VL6180XTask+0x24>
    252e:	22 27       	eor	r18, r18
    2530:	33 27       	eor	r19, r19
    2532:	28 1b       	sub	r18, r24
    2534:	39 0b       	sbc	r19, r25
    2536:	2a 31       	cpi	r18, 0x1A	; 26
    2538:	31 05       	cpc	r19, r1
    253a:	0c f4       	brge	.+2      	; 0x253e <VL6180XTask+0x2c>
    253c:	44 c0       	rjmp	.+136    	; 0x25c6 <VL6180XTask+0xb4>
	{
		lastMillis = getMillis();
    253e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
    2542:	90 93 4b 06 	sts	0x064B, r25	; 0x80064b <lastMillis.2060+0x1>
    2546:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <lastMillis.2060>
		VL6180XInterruptTask();
    254a:	0e 94 4c 12 	call	0x2498	; 0x2498 <VL6180XInterruptTask>
    254e:	3b c0       	rjmp	.+118    	; 0x25c6 <VL6180XTask+0xb4>
	}
	
	// Adds a read instruction for each sensor that should be read
	for(int i = 0; i < NUM_OF_DIST_SENSORS; i++)
	{
		if(getSensorShouldRead(i) & 0b00000100)
    2550:	ce 01       	movw	r24, r28
    2552:	0e 94 0a 07 	call	0xe14	; 0xe14 <getSensorShouldRead>
    2556:	82 ff       	sbrs	r24, 2
    2558:	06 c0       	rjmp	.+12     	; 0x2566 <VL6180XTask+0x54>
		{	
			VL6180XAddReadInstruction(i);
    255a:	ce 01       	movw	r24, r28
    255c:	0e 94 05 12 	call	0x240a	; 0x240a <VL6180XAddReadInstruction>
			clearSensorShouldRead(i);
    2560:	ce 01       	movw	r24, r28
    2562:	0e 94 31 07 	call	0xe62	; 0xe62 <clearSensorShouldRead>
		}
		if (getSensorData(i))
    2566:	ce 01       	movw	r24, r28
    2568:	0e 94 f4 06 	call	0xde8	; 0xde8 <getSensorData>
    256c:	89 2b       	or	r24, r25
    256e:	31 f0       	breq	.+12     	; 0x257c <VL6180XTask+0x6a>
		{
			g_distances[i] = getSensorData(i);
    2570:	ce 01       	movw	r24, r28
    2572:	0e 94 f4 06 	call	0xde8	; 0xde8 <getSensorData>
    2576:	f8 01       	movw	r30, r16
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	80 83       	st	Z, r24
		lastMillis = getMillis();
		VL6180XInterruptTask();
	}
	
	// Adds a read instruction for each sensor that should be read
	for(int i = 0; i < NUM_OF_DIST_SENSORS; i++)
    257c:	21 96       	adiw	r28, 0x01	; 1
    257e:	0e 5f       	subi	r16, 0xFE	; 254
    2580:	1f 4f       	sbci	r17, 0xFF	; 255
    2582:	c8 30       	cpi	r28, 0x08	; 8
    2584:	d1 05       	cpc	r29, r1
    2586:	21 f7       	brne	.-56     	; 0x2550 <VL6180XTask+0x3e>
		{
			g_distances[i] = getSensorData(i);
		}
	}
	
	if (getMillis() - failureCounter > 125 || failureCounter - getMillis() > getLastOVF() - 125)
    2588:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
    258c:	c0 91 48 06 	lds	r28, 0x0648	; 0x800648 <failureCounter.2061>
    2590:	d0 91 49 06 	lds	r29, 0x0649	; 0x800649 <failureCounter.2061+0x1>
    2594:	8c 1b       	sub	r24, r28
    2596:	9d 0b       	sbc	r25, r29
    2598:	8e 37       	cpi	r24, 0x7E	; 126
    259a:	91 05       	cpc	r25, r1
    259c:	5c f4       	brge	.+22     	; 0x25b4 <VL6180XTask+0xa2>
    259e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
    25a2:	c8 1b       	sub	r28, r24
    25a4:	d9 0b       	sbc	r29, r25
    25a6:	0e 94 67 03 	call	0x6ce	; 0x6ce <getLastOVF>
    25aa:	8d 57       	subi	r24, 0x7D	; 125
    25ac:	91 09       	sbc	r25, r1
    25ae:	8c 17       	cp	r24, r28
    25b0:	9d 07       	cpc	r25, r29
    25b2:	74 f4       	brge	.+28     	; 0x25d0 <VL6180XTask+0xbe>
	{
		failureCounter = getMillis();
    25b4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <getMillis>
    25b8:	90 93 49 06 	sts	0x0649, r25	; 0x800649 <failureCounter.2061+0x1>
    25bc:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <failureCounter.2061>
		VL6180XCheckForFailures();
    25c0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <VL6180XCheckForFailures>
	}
	
}
    25c4:	05 c0       	rjmp	.+10     	; 0x25d0 <VL6180XTask+0xbe>
    25c6:	0e e4       	ldi	r16, 0x4E	; 78
    25c8:	16 e0       	ldi	r17, 0x06	; 6
	}
}

// Handles VL6180x periodic things
void VL6180XTask()
{
    25ca:	c0 e0       	ldi	r28, 0x00	; 0
    25cc:	d0 e0       	ldi	r29, 0x00	; 0
    25ce:	c0 cf       	rjmp	.-128    	; 0x2550 <VL6180XTask+0x3e>
	{
		failureCounter = getMillis();
		VL6180XCheckForFailures();
	}
	
}
    25d0:	df 91       	pop	r29
    25d2:	cf 91       	pop	r28
    25d4:	1f 91       	pop	r17
    25d6:	0f 91       	pop	r16
    25d8:	08 95       	ret

000025da <__subsf3>:
    25da:	50 58       	subi	r21, 0x80	; 128

000025dc <__addsf3>:
    25dc:	bb 27       	eor	r27, r27
    25de:	aa 27       	eor	r26, r26
    25e0:	0e 94 05 13 	call	0x260a	; 0x260a <__addsf3x>
    25e4:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_round>
    25e8:	0e 94 12 14 	call	0x2824	; 0x2824 <__fp_pscA>
    25ec:	38 f0       	brcs	.+14     	; 0x25fc <__addsf3+0x20>
    25ee:	0e 94 19 14 	call	0x2832	; 0x2832 <__fp_pscB>
    25f2:	20 f0       	brcs	.+8      	; 0x25fc <__addsf3+0x20>
    25f4:	39 f4       	brne	.+14     	; 0x2604 <__addsf3+0x28>
    25f6:	9f 3f       	cpi	r25, 0xFF	; 255
    25f8:	19 f4       	brne	.+6      	; 0x2600 <__addsf3+0x24>
    25fa:	26 f4       	brtc	.+8      	; 0x2604 <__addsf3+0x28>
    25fc:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__fp_nan>
    2600:	0e f4       	brtc	.+2      	; 0x2604 <__addsf3+0x28>
    2602:	e0 95       	com	r30
    2604:	e7 fb       	bst	r30, 7
    2606:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__fp_inf>

0000260a <__addsf3x>:
    260a:	e9 2f       	mov	r30, r25
    260c:	0e 94 31 14 	call	0x2862	; 0x2862 <__fp_split3>
    2610:	58 f3       	brcs	.-42     	; 0x25e8 <__addsf3+0xc>
    2612:	ba 17       	cp	r27, r26
    2614:	62 07       	cpc	r22, r18
    2616:	73 07       	cpc	r23, r19
    2618:	84 07       	cpc	r24, r20
    261a:	95 07       	cpc	r25, r21
    261c:	20 f0       	brcs	.+8      	; 0x2626 <__addsf3x+0x1c>
    261e:	79 f4       	brne	.+30     	; 0x263e <__addsf3x+0x34>
    2620:	a6 f5       	brtc	.+104    	; 0x268a <__addsf3x+0x80>
    2622:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__fp_zero>
    2626:	0e f4       	brtc	.+2      	; 0x262a <__addsf3x+0x20>
    2628:	e0 95       	com	r30
    262a:	0b 2e       	mov	r0, r27
    262c:	ba 2f       	mov	r27, r26
    262e:	a0 2d       	mov	r26, r0
    2630:	0b 01       	movw	r0, r22
    2632:	b9 01       	movw	r22, r18
    2634:	90 01       	movw	r18, r0
    2636:	0c 01       	movw	r0, r24
    2638:	ca 01       	movw	r24, r20
    263a:	a0 01       	movw	r20, r0
    263c:	11 24       	eor	r1, r1
    263e:	ff 27       	eor	r31, r31
    2640:	59 1b       	sub	r21, r25
    2642:	99 f0       	breq	.+38     	; 0x266a <__addsf3x+0x60>
    2644:	59 3f       	cpi	r21, 0xF9	; 249
    2646:	50 f4       	brcc	.+20     	; 0x265c <__addsf3x+0x52>
    2648:	50 3e       	cpi	r21, 0xE0	; 224
    264a:	68 f1       	brcs	.+90     	; 0x26a6 <__addsf3x+0x9c>
    264c:	1a 16       	cp	r1, r26
    264e:	f0 40       	sbci	r31, 0x00	; 0
    2650:	a2 2f       	mov	r26, r18
    2652:	23 2f       	mov	r18, r19
    2654:	34 2f       	mov	r19, r20
    2656:	44 27       	eor	r20, r20
    2658:	58 5f       	subi	r21, 0xF8	; 248
    265a:	f3 cf       	rjmp	.-26     	; 0x2642 <__addsf3x+0x38>
    265c:	46 95       	lsr	r20
    265e:	37 95       	ror	r19
    2660:	27 95       	ror	r18
    2662:	a7 95       	ror	r26
    2664:	f0 40       	sbci	r31, 0x00	; 0
    2666:	53 95       	inc	r21
    2668:	c9 f7       	brne	.-14     	; 0x265c <__addsf3x+0x52>
    266a:	7e f4       	brtc	.+30     	; 0x268a <__addsf3x+0x80>
    266c:	1f 16       	cp	r1, r31
    266e:	ba 0b       	sbc	r27, r26
    2670:	62 0b       	sbc	r22, r18
    2672:	73 0b       	sbc	r23, r19
    2674:	84 0b       	sbc	r24, r20
    2676:	ba f0       	brmi	.+46     	; 0x26a6 <__addsf3x+0x9c>
    2678:	91 50       	subi	r25, 0x01	; 1
    267a:	a1 f0       	breq	.+40     	; 0x26a4 <__addsf3x+0x9a>
    267c:	ff 0f       	add	r31, r31
    267e:	bb 1f       	adc	r27, r27
    2680:	66 1f       	adc	r22, r22
    2682:	77 1f       	adc	r23, r23
    2684:	88 1f       	adc	r24, r24
    2686:	c2 f7       	brpl	.-16     	; 0x2678 <__addsf3x+0x6e>
    2688:	0e c0       	rjmp	.+28     	; 0x26a6 <__addsf3x+0x9c>
    268a:	ba 0f       	add	r27, r26
    268c:	62 1f       	adc	r22, r18
    268e:	73 1f       	adc	r23, r19
    2690:	84 1f       	adc	r24, r20
    2692:	48 f4       	brcc	.+18     	; 0x26a6 <__addsf3x+0x9c>
    2694:	87 95       	ror	r24
    2696:	77 95       	ror	r23
    2698:	67 95       	ror	r22
    269a:	b7 95       	ror	r27
    269c:	f7 95       	ror	r31
    269e:	9e 3f       	cpi	r25, 0xFE	; 254
    26a0:	08 f0       	brcs	.+2      	; 0x26a4 <__addsf3x+0x9a>
    26a2:	b0 cf       	rjmp	.-160    	; 0x2604 <__addsf3+0x28>
    26a4:	93 95       	inc	r25
    26a6:	88 0f       	add	r24, r24
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <__addsf3x+0xa2>
    26aa:	99 27       	eor	r25, r25
    26ac:	ee 0f       	add	r30, r30
    26ae:	97 95       	ror	r25
    26b0:	87 95       	ror	r24
    26b2:	08 95       	ret

000026b4 <__divsf3>:
    26b4:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__divsf3x>
    26b8:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_round>
    26bc:	0e 94 19 14 	call	0x2832	; 0x2832 <__fp_pscB>
    26c0:	58 f0       	brcs	.+22     	; 0x26d8 <__divsf3+0x24>
    26c2:	0e 94 12 14 	call	0x2824	; 0x2824 <__fp_pscA>
    26c6:	40 f0       	brcs	.+16     	; 0x26d8 <__divsf3+0x24>
    26c8:	29 f4       	brne	.+10     	; 0x26d4 <__divsf3+0x20>
    26ca:	5f 3f       	cpi	r21, 0xFF	; 255
    26cc:	29 f0       	breq	.+10     	; 0x26d8 <__divsf3+0x24>
    26ce:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__fp_inf>
    26d2:	51 11       	cpse	r21, r1
    26d4:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__fp_szero>
    26d8:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__fp_nan>

000026dc <__divsf3x>:
    26dc:	0e 94 31 14 	call	0x2862	; 0x2862 <__fp_split3>
    26e0:	68 f3       	brcs	.-38     	; 0x26bc <__divsf3+0x8>

000026e2 <__divsf3_pse>:
    26e2:	99 23       	and	r25, r25
    26e4:	b1 f3       	breq	.-20     	; 0x26d2 <__divsf3+0x1e>
    26e6:	55 23       	and	r21, r21
    26e8:	91 f3       	breq	.-28     	; 0x26ce <__divsf3+0x1a>
    26ea:	95 1b       	sub	r25, r21
    26ec:	55 0b       	sbc	r21, r21
    26ee:	bb 27       	eor	r27, r27
    26f0:	aa 27       	eor	r26, r26
    26f2:	62 17       	cp	r22, r18
    26f4:	73 07       	cpc	r23, r19
    26f6:	84 07       	cpc	r24, r20
    26f8:	38 f0       	brcs	.+14     	; 0x2708 <__divsf3_pse+0x26>
    26fa:	9f 5f       	subi	r25, 0xFF	; 255
    26fc:	5f 4f       	sbci	r21, 0xFF	; 255
    26fe:	22 0f       	add	r18, r18
    2700:	33 1f       	adc	r19, r19
    2702:	44 1f       	adc	r20, r20
    2704:	aa 1f       	adc	r26, r26
    2706:	a9 f3       	breq	.-22     	; 0x26f2 <__divsf3_pse+0x10>
    2708:	35 d0       	rcall	.+106    	; 0x2774 <__divsf3_pse+0x92>
    270a:	0e 2e       	mov	r0, r30
    270c:	3a f0       	brmi	.+14     	; 0x271c <__divsf3_pse+0x3a>
    270e:	e0 e8       	ldi	r30, 0x80	; 128
    2710:	32 d0       	rcall	.+100    	; 0x2776 <__divsf3_pse+0x94>
    2712:	91 50       	subi	r25, 0x01	; 1
    2714:	50 40       	sbci	r21, 0x00	; 0
    2716:	e6 95       	lsr	r30
    2718:	00 1c       	adc	r0, r0
    271a:	ca f7       	brpl	.-14     	; 0x270e <__divsf3_pse+0x2c>
    271c:	2b d0       	rcall	.+86     	; 0x2774 <__divsf3_pse+0x92>
    271e:	fe 2f       	mov	r31, r30
    2720:	29 d0       	rcall	.+82     	; 0x2774 <__divsf3_pse+0x92>
    2722:	66 0f       	add	r22, r22
    2724:	77 1f       	adc	r23, r23
    2726:	88 1f       	adc	r24, r24
    2728:	bb 1f       	adc	r27, r27
    272a:	26 17       	cp	r18, r22
    272c:	37 07       	cpc	r19, r23
    272e:	48 07       	cpc	r20, r24
    2730:	ab 07       	cpc	r26, r27
    2732:	b0 e8       	ldi	r27, 0x80	; 128
    2734:	09 f0       	breq	.+2      	; 0x2738 <__divsf3_pse+0x56>
    2736:	bb 0b       	sbc	r27, r27
    2738:	80 2d       	mov	r24, r0
    273a:	bf 01       	movw	r22, r30
    273c:	ff 27       	eor	r31, r31
    273e:	93 58       	subi	r25, 0x83	; 131
    2740:	5f 4f       	sbci	r21, 0xFF	; 255
    2742:	3a f0       	brmi	.+14     	; 0x2752 <__divsf3_pse+0x70>
    2744:	9e 3f       	cpi	r25, 0xFE	; 254
    2746:	51 05       	cpc	r21, r1
    2748:	78 f0       	brcs	.+30     	; 0x2768 <__divsf3_pse+0x86>
    274a:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__fp_inf>
    274e:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__fp_szero>
    2752:	5f 3f       	cpi	r21, 0xFF	; 255
    2754:	e4 f3       	brlt	.-8      	; 0x274e <__divsf3_pse+0x6c>
    2756:	98 3e       	cpi	r25, 0xE8	; 232
    2758:	d4 f3       	brlt	.-12     	; 0x274e <__divsf3_pse+0x6c>
    275a:	86 95       	lsr	r24
    275c:	77 95       	ror	r23
    275e:	67 95       	ror	r22
    2760:	b7 95       	ror	r27
    2762:	f7 95       	ror	r31
    2764:	9f 5f       	subi	r25, 0xFF	; 255
    2766:	c9 f7       	brne	.-14     	; 0x275a <__divsf3_pse+0x78>
    2768:	88 0f       	add	r24, r24
    276a:	91 1d       	adc	r25, r1
    276c:	96 95       	lsr	r25
    276e:	87 95       	ror	r24
    2770:	97 f9       	bld	r25, 7
    2772:	08 95       	ret
    2774:	e1 e0       	ldi	r30, 0x01	; 1
    2776:	66 0f       	add	r22, r22
    2778:	77 1f       	adc	r23, r23
    277a:	88 1f       	adc	r24, r24
    277c:	bb 1f       	adc	r27, r27
    277e:	62 17       	cp	r22, r18
    2780:	73 07       	cpc	r23, r19
    2782:	84 07       	cpc	r24, r20
    2784:	ba 07       	cpc	r27, r26
    2786:	20 f0       	brcs	.+8      	; 0x2790 <__divsf3_pse+0xae>
    2788:	62 1b       	sub	r22, r18
    278a:	73 0b       	sbc	r23, r19
    278c:	84 0b       	sbc	r24, r20
    278e:	ba 0b       	sbc	r27, r26
    2790:	ee 1f       	adc	r30, r30
    2792:	88 f7       	brcc	.-30     	; 0x2776 <__divsf3_pse+0x94>
    2794:	e0 95       	com	r30
    2796:	08 95       	ret

00002798 <__floatunsisf>:
    2798:	e8 94       	clt
    279a:	09 c0       	rjmp	.+18     	; 0x27ae <__floatsisf+0x12>

0000279c <__floatsisf>:
    279c:	97 fb       	bst	r25, 7
    279e:	3e f4       	brtc	.+14     	; 0x27ae <__floatsisf+0x12>
    27a0:	90 95       	com	r25
    27a2:	80 95       	com	r24
    27a4:	70 95       	com	r23
    27a6:	61 95       	neg	r22
    27a8:	7f 4f       	sbci	r23, 0xFF	; 255
    27aa:	8f 4f       	sbci	r24, 0xFF	; 255
    27ac:	9f 4f       	sbci	r25, 0xFF	; 255
    27ae:	99 23       	and	r25, r25
    27b0:	a9 f0       	breq	.+42     	; 0x27dc <__floatsisf+0x40>
    27b2:	f9 2f       	mov	r31, r25
    27b4:	96 e9       	ldi	r25, 0x96	; 150
    27b6:	bb 27       	eor	r27, r27
    27b8:	93 95       	inc	r25
    27ba:	f6 95       	lsr	r31
    27bc:	87 95       	ror	r24
    27be:	77 95       	ror	r23
    27c0:	67 95       	ror	r22
    27c2:	b7 95       	ror	r27
    27c4:	f1 11       	cpse	r31, r1
    27c6:	f8 cf       	rjmp	.-16     	; 0x27b8 <__floatsisf+0x1c>
    27c8:	fa f4       	brpl	.+62     	; 0x2808 <__floatsisf+0x6c>
    27ca:	bb 0f       	add	r27, r27
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <__floatsisf+0x36>
    27ce:	60 ff       	sbrs	r22, 0
    27d0:	1b c0       	rjmp	.+54     	; 0x2808 <__floatsisf+0x6c>
    27d2:	6f 5f       	subi	r22, 0xFF	; 255
    27d4:	7f 4f       	sbci	r23, 0xFF	; 255
    27d6:	8f 4f       	sbci	r24, 0xFF	; 255
    27d8:	9f 4f       	sbci	r25, 0xFF	; 255
    27da:	16 c0       	rjmp	.+44     	; 0x2808 <__floatsisf+0x6c>
    27dc:	88 23       	and	r24, r24
    27de:	11 f0       	breq	.+4      	; 0x27e4 <__floatsisf+0x48>
    27e0:	96 e9       	ldi	r25, 0x96	; 150
    27e2:	11 c0       	rjmp	.+34     	; 0x2806 <__floatsisf+0x6a>
    27e4:	77 23       	and	r23, r23
    27e6:	21 f0       	breq	.+8      	; 0x27f0 <__floatsisf+0x54>
    27e8:	9e e8       	ldi	r25, 0x8E	; 142
    27ea:	87 2f       	mov	r24, r23
    27ec:	76 2f       	mov	r23, r22
    27ee:	05 c0       	rjmp	.+10     	; 0x27fa <__floatsisf+0x5e>
    27f0:	66 23       	and	r22, r22
    27f2:	71 f0       	breq	.+28     	; 0x2810 <__floatsisf+0x74>
    27f4:	96 e8       	ldi	r25, 0x86	; 134
    27f6:	86 2f       	mov	r24, r22
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	2a f0       	brmi	.+10     	; 0x2808 <__floatsisf+0x6c>
    27fe:	9a 95       	dec	r25
    2800:	66 0f       	add	r22, r22
    2802:	77 1f       	adc	r23, r23
    2804:	88 1f       	adc	r24, r24
    2806:	da f7       	brpl	.-10     	; 0x27fe <__floatsisf+0x62>
    2808:	88 0f       	add	r24, r24
    280a:	96 95       	lsr	r25
    280c:	87 95       	ror	r24
    280e:	97 f9       	bld	r25, 7
    2810:	08 95       	ret

00002812 <__fp_inf>:
    2812:	97 f9       	bld	r25, 7
    2814:	9f 67       	ori	r25, 0x7F	; 127
    2816:	80 e8       	ldi	r24, 0x80	; 128
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	08 95       	ret

0000281e <__fp_nan>:
    281e:	9f ef       	ldi	r25, 0xFF	; 255
    2820:	80 ec       	ldi	r24, 0xC0	; 192
    2822:	08 95       	ret

00002824 <__fp_pscA>:
    2824:	00 24       	eor	r0, r0
    2826:	0a 94       	dec	r0
    2828:	16 16       	cp	r1, r22
    282a:	17 06       	cpc	r1, r23
    282c:	18 06       	cpc	r1, r24
    282e:	09 06       	cpc	r0, r25
    2830:	08 95       	ret

00002832 <__fp_pscB>:
    2832:	00 24       	eor	r0, r0
    2834:	0a 94       	dec	r0
    2836:	12 16       	cp	r1, r18
    2838:	13 06       	cpc	r1, r19
    283a:	14 06       	cpc	r1, r20
    283c:	05 06       	cpc	r0, r21
    283e:	08 95       	ret

00002840 <__fp_round>:
    2840:	09 2e       	mov	r0, r25
    2842:	03 94       	inc	r0
    2844:	00 0c       	add	r0, r0
    2846:	11 f4       	brne	.+4      	; 0x284c <__fp_round+0xc>
    2848:	88 23       	and	r24, r24
    284a:	52 f0       	brmi	.+20     	; 0x2860 <__fp_round+0x20>
    284c:	bb 0f       	add	r27, r27
    284e:	40 f4       	brcc	.+16     	; 0x2860 <__fp_round+0x20>
    2850:	bf 2b       	or	r27, r31
    2852:	11 f4       	brne	.+4      	; 0x2858 <__fp_round+0x18>
    2854:	60 ff       	sbrs	r22, 0
    2856:	04 c0       	rjmp	.+8      	; 0x2860 <__fp_round+0x20>
    2858:	6f 5f       	subi	r22, 0xFF	; 255
    285a:	7f 4f       	sbci	r23, 0xFF	; 255
    285c:	8f 4f       	sbci	r24, 0xFF	; 255
    285e:	9f 4f       	sbci	r25, 0xFF	; 255
    2860:	08 95       	ret

00002862 <__fp_split3>:
    2862:	57 fd       	sbrc	r21, 7
    2864:	90 58       	subi	r25, 0x80	; 128
    2866:	44 0f       	add	r20, r20
    2868:	55 1f       	adc	r21, r21
    286a:	59 f0       	breq	.+22     	; 0x2882 <__fp_splitA+0x10>
    286c:	5f 3f       	cpi	r21, 0xFF	; 255
    286e:	71 f0       	breq	.+28     	; 0x288c <__fp_splitA+0x1a>
    2870:	47 95       	ror	r20

00002872 <__fp_splitA>:
    2872:	88 0f       	add	r24, r24
    2874:	97 fb       	bst	r25, 7
    2876:	99 1f       	adc	r25, r25
    2878:	61 f0       	breq	.+24     	; 0x2892 <__fp_splitA+0x20>
    287a:	9f 3f       	cpi	r25, 0xFF	; 255
    287c:	79 f0       	breq	.+30     	; 0x289c <__fp_splitA+0x2a>
    287e:	87 95       	ror	r24
    2880:	08 95       	ret
    2882:	12 16       	cp	r1, r18
    2884:	13 06       	cpc	r1, r19
    2886:	14 06       	cpc	r1, r20
    2888:	55 1f       	adc	r21, r21
    288a:	f2 cf       	rjmp	.-28     	; 0x2870 <__fp_split3+0xe>
    288c:	46 95       	lsr	r20
    288e:	f1 df       	rcall	.-30     	; 0x2872 <__fp_splitA>
    2890:	08 c0       	rjmp	.+16     	; 0x28a2 <__fp_splitA+0x30>
    2892:	16 16       	cp	r1, r22
    2894:	17 06       	cpc	r1, r23
    2896:	18 06       	cpc	r1, r24
    2898:	99 1f       	adc	r25, r25
    289a:	f1 cf       	rjmp	.-30     	; 0x287e <__fp_splitA+0xc>
    289c:	86 95       	lsr	r24
    289e:	71 05       	cpc	r23, r1
    28a0:	61 05       	cpc	r22, r1
    28a2:	08 94       	sec
    28a4:	08 95       	ret

000028a6 <__fp_zero>:
    28a6:	e8 94       	clt

000028a8 <__fp_szero>:
    28a8:	bb 27       	eor	r27, r27
    28aa:	66 27       	eor	r22, r22
    28ac:	77 27       	eor	r23, r23
    28ae:	cb 01       	movw	r24, r22
    28b0:	97 f9       	bld	r25, 7
    28b2:	08 95       	ret

000028b4 <__mulsf3>:
    28b4:	0e 94 6d 14 	call	0x28da	; 0x28da <__mulsf3x>
    28b8:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_round>
    28bc:	0e 94 12 14 	call	0x2824	; 0x2824 <__fp_pscA>
    28c0:	38 f0       	brcs	.+14     	; 0x28d0 <__mulsf3+0x1c>
    28c2:	0e 94 19 14 	call	0x2832	; 0x2832 <__fp_pscB>
    28c6:	20 f0       	brcs	.+8      	; 0x28d0 <__mulsf3+0x1c>
    28c8:	95 23       	and	r25, r21
    28ca:	11 f0       	breq	.+4      	; 0x28d0 <__mulsf3+0x1c>
    28cc:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__fp_inf>
    28d0:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__fp_nan>
    28d4:	11 24       	eor	r1, r1
    28d6:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__fp_szero>

000028da <__mulsf3x>:
    28da:	0e 94 31 14 	call	0x2862	; 0x2862 <__fp_split3>
    28de:	70 f3       	brcs	.-36     	; 0x28bc <__mulsf3+0x8>

000028e0 <__mulsf3_pse>:
    28e0:	95 9f       	mul	r25, r21
    28e2:	c1 f3       	breq	.-16     	; 0x28d4 <__mulsf3+0x20>
    28e4:	95 0f       	add	r25, r21
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	55 1f       	adc	r21, r21
    28ea:	62 9f       	mul	r22, r18
    28ec:	f0 01       	movw	r30, r0
    28ee:	72 9f       	mul	r23, r18
    28f0:	bb 27       	eor	r27, r27
    28f2:	f0 0d       	add	r31, r0
    28f4:	b1 1d       	adc	r27, r1
    28f6:	63 9f       	mul	r22, r19
    28f8:	aa 27       	eor	r26, r26
    28fa:	f0 0d       	add	r31, r0
    28fc:	b1 1d       	adc	r27, r1
    28fe:	aa 1f       	adc	r26, r26
    2900:	64 9f       	mul	r22, r20
    2902:	66 27       	eor	r22, r22
    2904:	b0 0d       	add	r27, r0
    2906:	a1 1d       	adc	r26, r1
    2908:	66 1f       	adc	r22, r22
    290a:	82 9f       	mul	r24, r18
    290c:	22 27       	eor	r18, r18
    290e:	b0 0d       	add	r27, r0
    2910:	a1 1d       	adc	r26, r1
    2912:	62 1f       	adc	r22, r18
    2914:	73 9f       	mul	r23, r19
    2916:	b0 0d       	add	r27, r0
    2918:	a1 1d       	adc	r26, r1
    291a:	62 1f       	adc	r22, r18
    291c:	83 9f       	mul	r24, r19
    291e:	a0 0d       	add	r26, r0
    2920:	61 1d       	adc	r22, r1
    2922:	22 1f       	adc	r18, r18
    2924:	74 9f       	mul	r23, r20
    2926:	33 27       	eor	r19, r19
    2928:	a0 0d       	add	r26, r0
    292a:	61 1d       	adc	r22, r1
    292c:	23 1f       	adc	r18, r19
    292e:	84 9f       	mul	r24, r20
    2930:	60 0d       	add	r22, r0
    2932:	21 1d       	adc	r18, r1
    2934:	82 2f       	mov	r24, r18
    2936:	76 2f       	mov	r23, r22
    2938:	6a 2f       	mov	r22, r26
    293a:	11 24       	eor	r1, r1
    293c:	9f 57       	subi	r25, 0x7F	; 127
    293e:	50 40       	sbci	r21, 0x00	; 0
    2940:	9a f0       	brmi	.+38     	; 0x2968 <__mulsf3_pse+0x88>
    2942:	f1 f0       	breq	.+60     	; 0x2980 <__mulsf3_pse+0xa0>
    2944:	88 23       	and	r24, r24
    2946:	4a f0       	brmi	.+18     	; 0x295a <__mulsf3_pse+0x7a>
    2948:	ee 0f       	add	r30, r30
    294a:	ff 1f       	adc	r31, r31
    294c:	bb 1f       	adc	r27, r27
    294e:	66 1f       	adc	r22, r22
    2950:	77 1f       	adc	r23, r23
    2952:	88 1f       	adc	r24, r24
    2954:	91 50       	subi	r25, 0x01	; 1
    2956:	50 40       	sbci	r21, 0x00	; 0
    2958:	a9 f7       	brne	.-22     	; 0x2944 <__mulsf3_pse+0x64>
    295a:	9e 3f       	cpi	r25, 0xFE	; 254
    295c:	51 05       	cpc	r21, r1
    295e:	80 f0       	brcs	.+32     	; 0x2980 <__mulsf3_pse+0xa0>
    2960:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__fp_inf>
    2964:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__fp_szero>
    2968:	5f 3f       	cpi	r21, 0xFF	; 255
    296a:	e4 f3       	brlt	.-8      	; 0x2964 <__mulsf3_pse+0x84>
    296c:	98 3e       	cpi	r25, 0xE8	; 232
    296e:	d4 f3       	brlt	.-12     	; 0x2964 <__mulsf3_pse+0x84>
    2970:	86 95       	lsr	r24
    2972:	77 95       	ror	r23
    2974:	67 95       	ror	r22
    2976:	b7 95       	ror	r27
    2978:	f7 95       	ror	r31
    297a:	e7 95       	ror	r30
    297c:	9f 5f       	subi	r25, 0xFF	; 255
    297e:	c1 f7       	brne	.-16     	; 0x2970 <__mulsf3_pse+0x90>
    2980:	fe 2b       	or	r31, r30
    2982:	88 0f       	add	r24, r24
    2984:	91 1d       	adc	r25, r1
    2986:	96 95       	lsr	r25
    2988:	87 95       	ror	r24
    298a:	97 f9       	bld	r25, 7
    298c:	08 95       	ret

0000298e <__mulsi3>:
    298e:	db 01       	movw	r26, r22
    2990:	8f 93       	push	r24
    2992:	9f 93       	push	r25
    2994:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__muluhisi3>
    2998:	bf 91       	pop	r27
    299a:	af 91       	pop	r26
    299c:	a2 9f       	mul	r26, r18
    299e:	80 0d       	add	r24, r0
    29a0:	91 1d       	adc	r25, r1
    29a2:	a3 9f       	mul	r26, r19
    29a4:	90 0d       	add	r25, r0
    29a6:	b2 9f       	mul	r27, r18
    29a8:	90 0d       	add	r25, r0
    29aa:	11 24       	eor	r1, r1
    29ac:	08 95       	ret

000029ae <__divmodsi4>:
    29ae:	05 2e       	mov	r0, r21
    29b0:	97 fb       	bst	r25, 7
    29b2:	1e f4       	brtc	.+6      	; 0x29ba <__divmodsi4+0xc>
    29b4:	00 94       	com	r0
    29b6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__negsi2>
    29ba:	57 fd       	sbrc	r21, 7
    29bc:	07 d0       	rcall	.+14     	; 0x29cc <__divmodsi4_neg2>
    29be:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__udivmodsi4>
    29c2:	07 fc       	sbrc	r0, 7
    29c4:	03 d0       	rcall	.+6      	; 0x29cc <__divmodsi4_neg2>
    29c6:	4e f4       	brtc	.+18     	; 0x29da <__divmodsi4_exit>
    29c8:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__negsi2>

000029cc <__divmodsi4_neg2>:
    29cc:	50 95       	com	r21
    29ce:	40 95       	com	r20
    29d0:	30 95       	com	r19
    29d2:	21 95       	neg	r18
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	4f 4f       	sbci	r20, 0xFF	; 255
    29d8:	5f 4f       	sbci	r21, 0xFF	; 255

000029da <__divmodsi4_exit>:
    29da:	08 95       	ret

000029dc <__negsi2>:
    29dc:	90 95       	com	r25
    29de:	80 95       	com	r24
    29e0:	70 95       	com	r23
    29e2:	61 95       	neg	r22
    29e4:	7f 4f       	sbci	r23, 0xFF	; 255
    29e6:	8f 4f       	sbci	r24, 0xFF	; 255
    29e8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ea:	08 95       	ret

000029ec <__tablejump2__>:
    29ec:	ee 0f       	add	r30, r30
    29ee:	ff 1f       	adc	r31, r31
    29f0:	05 90       	lpm	r0, Z+
    29f2:	f4 91       	lpm	r31, Z
    29f4:	e0 2d       	mov	r30, r0
    29f6:	09 94       	ijmp

000029f8 <__umulhisi3>:
    29f8:	a2 9f       	mul	r26, r18
    29fa:	b0 01       	movw	r22, r0
    29fc:	b3 9f       	mul	r27, r19
    29fe:	c0 01       	movw	r24, r0
    2a00:	a3 9f       	mul	r26, r19
    2a02:	70 0d       	add	r23, r0
    2a04:	81 1d       	adc	r24, r1
    2a06:	11 24       	eor	r1, r1
    2a08:	91 1d       	adc	r25, r1
    2a0a:	b2 9f       	mul	r27, r18
    2a0c:	70 0d       	add	r23, r0
    2a0e:	81 1d       	adc	r24, r1
    2a10:	11 24       	eor	r1, r1
    2a12:	91 1d       	adc	r25, r1
    2a14:	08 95       	ret

00002a16 <__muluhisi3>:
    2a16:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__umulhisi3>
    2a1a:	a5 9f       	mul	r26, r21
    2a1c:	90 0d       	add	r25, r0
    2a1e:	b4 9f       	mul	r27, r20
    2a20:	90 0d       	add	r25, r0
    2a22:	a4 9f       	mul	r26, r20
    2a24:	80 0d       	add	r24, r0
    2a26:	91 1d       	adc	r25, r1
    2a28:	11 24       	eor	r1, r1
    2a2a:	08 95       	ret

00002a2c <__udivmodsi4>:
    2a2c:	a1 e2       	ldi	r26, 0x21	; 33
    2a2e:	1a 2e       	mov	r1, r26
    2a30:	aa 1b       	sub	r26, r26
    2a32:	bb 1b       	sub	r27, r27
    2a34:	fd 01       	movw	r30, r26
    2a36:	0d c0       	rjmp	.+26     	; 0x2a52 <__udivmodsi4_ep>

00002a38 <__udivmodsi4_loop>:
    2a38:	aa 1f       	adc	r26, r26
    2a3a:	bb 1f       	adc	r27, r27
    2a3c:	ee 1f       	adc	r30, r30
    2a3e:	ff 1f       	adc	r31, r31
    2a40:	a2 17       	cp	r26, r18
    2a42:	b3 07       	cpc	r27, r19
    2a44:	e4 07       	cpc	r30, r20
    2a46:	f5 07       	cpc	r31, r21
    2a48:	20 f0       	brcs	.+8      	; 0x2a52 <__udivmodsi4_ep>
    2a4a:	a2 1b       	sub	r26, r18
    2a4c:	b3 0b       	sbc	r27, r19
    2a4e:	e4 0b       	sbc	r30, r20
    2a50:	f5 0b       	sbc	r31, r21

00002a52 <__udivmodsi4_ep>:
    2a52:	66 1f       	adc	r22, r22
    2a54:	77 1f       	adc	r23, r23
    2a56:	88 1f       	adc	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	1a 94       	dec	r1
    2a5c:	69 f7       	brne	.-38     	; 0x2a38 <__udivmodsi4_loop>
    2a5e:	60 95       	com	r22
    2a60:	70 95       	com	r23
    2a62:	80 95       	com	r24
    2a64:	90 95       	com	r25
    2a66:	9b 01       	movw	r18, r22
    2a68:	ac 01       	movw	r20, r24
    2a6a:	bd 01       	movw	r22, r26
    2a6c:	cf 01       	movw	r24, r30
    2a6e:	08 95       	ret

00002a70 <sprintf>:
    2a70:	ae e0       	ldi	r26, 0x0E	; 14
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	ee e3       	ldi	r30, 0x3E	; 62
    2a76:	f5 e1       	ldi	r31, 0x15	; 21
    2a78:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__prologue_saves__+0x1c>
    2a7c:	0d 89       	ldd	r16, Y+21	; 0x15
    2a7e:	1e 89       	ldd	r17, Y+22	; 0x16
    2a80:	86 e0       	ldi	r24, 0x06	; 6
    2a82:	8c 83       	std	Y+4, r24	; 0x04
    2a84:	1a 83       	std	Y+2, r17	; 0x02
    2a86:	09 83       	std	Y+1, r16	; 0x01
    2a88:	8f ef       	ldi	r24, 0xFF	; 255
    2a8a:	9f e7       	ldi	r25, 0x7F	; 127
    2a8c:	9e 83       	std	Y+6, r25	; 0x06
    2a8e:	8d 83       	std	Y+5, r24	; 0x05
    2a90:	ae 01       	movw	r20, r28
    2a92:	47 5e       	subi	r20, 0xE7	; 231
    2a94:	5f 4f       	sbci	r21, 0xFF	; 255
    2a96:	6f 89       	ldd	r22, Y+23	; 0x17
    2a98:	78 8d       	ldd	r23, Y+24	; 0x18
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	01 96       	adiw	r24, 0x01	; 1
    2a9e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <vfprintf>
    2aa2:	ef 81       	ldd	r30, Y+7	; 0x07
    2aa4:	f8 85       	ldd	r31, Y+8	; 0x08
    2aa6:	e0 0f       	add	r30, r16
    2aa8:	f1 1f       	adc	r31, r17
    2aaa:	10 82       	st	Z, r1
    2aac:	2e 96       	adiw	r28, 0x0e	; 14
    2aae:	e4 e0       	ldi	r30, 0x04	; 4
    2ab0:	0c 94 15 18 	jmp	0x302a	; 0x302a <__epilogue_restores__+0x1c>

00002ab4 <vfprintf>:
    2ab4:	ab e0       	ldi	r26, 0x0B	; 11
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e0 e6       	ldi	r30, 0x60	; 96
    2aba:	f5 e1       	ldi	r31, 0x15	; 21
    2abc:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__>
    2ac0:	6c 01       	movw	r12, r24
    2ac2:	7b 01       	movw	r14, r22
    2ac4:	8a 01       	movw	r16, r20
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	17 82       	std	Z+7, r1	; 0x07
    2aca:	16 82       	std	Z+6, r1	; 0x06
    2acc:	83 81       	ldd	r24, Z+3	; 0x03
    2ace:	81 ff       	sbrs	r24, 1
    2ad0:	cc c1       	rjmp	.+920    	; 0x2e6a <vfprintf+0x3b6>
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	01 96       	adiw	r24, 0x01	; 1
    2ad6:	3c 01       	movw	r6, r24
    2ad8:	f6 01       	movw	r30, r12
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	f7 01       	movw	r30, r14
    2ade:	93 fd       	sbrc	r25, 3
    2ae0:	85 91       	lpm	r24, Z+
    2ae2:	93 ff       	sbrs	r25, 3
    2ae4:	81 91       	ld	r24, Z+
    2ae6:	7f 01       	movw	r14, r30
    2ae8:	88 23       	and	r24, r24
    2aea:	09 f4       	brne	.+2      	; 0x2aee <vfprintf+0x3a>
    2aec:	ba c1       	rjmp	.+884    	; 0x2e62 <vfprintf+0x3ae>
    2aee:	85 32       	cpi	r24, 0x25	; 37
    2af0:	39 f4       	brne	.+14     	; 0x2b00 <vfprintf+0x4c>
    2af2:	93 fd       	sbrc	r25, 3
    2af4:	85 91       	lpm	r24, Z+
    2af6:	93 ff       	sbrs	r25, 3
    2af8:	81 91       	ld	r24, Z+
    2afa:	7f 01       	movw	r14, r30
    2afc:	85 32       	cpi	r24, 0x25	; 37
    2afe:	29 f4       	brne	.+10     	; 0x2b0a <vfprintf+0x56>
    2b00:	b6 01       	movw	r22, r12
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <fputc>
    2b08:	e7 cf       	rjmp	.-50     	; 0x2ad8 <vfprintf+0x24>
    2b0a:	91 2c       	mov	r9, r1
    2b0c:	21 2c       	mov	r2, r1
    2b0e:	31 2c       	mov	r3, r1
    2b10:	ff e1       	ldi	r31, 0x1F	; 31
    2b12:	f3 15       	cp	r31, r3
    2b14:	d8 f0       	brcs	.+54     	; 0x2b4c <vfprintf+0x98>
    2b16:	8b 32       	cpi	r24, 0x2B	; 43
    2b18:	79 f0       	breq	.+30     	; 0x2b38 <vfprintf+0x84>
    2b1a:	38 f4       	brcc	.+14     	; 0x2b2a <vfprintf+0x76>
    2b1c:	80 32       	cpi	r24, 0x20	; 32
    2b1e:	79 f0       	breq	.+30     	; 0x2b3e <vfprintf+0x8a>
    2b20:	83 32       	cpi	r24, 0x23	; 35
    2b22:	a1 f4       	brne	.+40     	; 0x2b4c <vfprintf+0x98>
    2b24:	23 2d       	mov	r18, r3
    2b26:	20 61       	ori	r18, 0x10	; 16
    2b28:	1d c0       	rjmp	.+58     	; 0x2b64 <vfprintf+0xb0>
    2b2a:	8d 32       	cpi	r24, 0x2D	; 45
    2b2c:	61 f0       	breq	.+24     	; 0x2b46 <vfprintf+0x92>
    2b2e:	80 33       	cpi	r24, 0x30	; 48
    2b30:	69 f4       	brne	.+26     	; 0x2b4c <vfprintf+0x98>
    2b32:	23 2d       	mov	r18, r3
    2b34:	21 60       	ori	r18, 0x01	; 1
    2b36:	16 c0       	rjmp	.+44     	; 0x2b64 <vfprintf+0xb0>
    2b38:	83 2d       	mov	r24, r3
    2b3a:	82 60       	ori	r24, 0x02	; 2
    2b3c:	38 2e       	mov	r3, r24
    2b3e:	e3 2d       	mov	r30, r3
    2b40:	e4 60       	ori	r30, 0x04	; 4
    2b42:	3e 2e       	mov	r3, r30
    2b44:	2a c0       	rjmp	.+84     	; 0x2b9a <vfprintf+0xe6>
    2b46:	f3 2d       	mov	r31, r3
    2b48:	f8 60       	ori	r31, 0x08	; 8
    2b4a:	1d c0       	rjmp	.+58     	; 0x2b86 <vfprintf+0xd2>
    2b4c:	37 fc       	sbrc	r3, 7
    2b4e:	2d c0       	rjmp	.+90     	; 0x2baa <vfprintf+0xf6>
    2b50:	20 ed       	ldi	r18, 0xD0	; 208
    2b52:	28 0f       	add	r18, r24
    2b54:	2a 30       	cpi	r18, 0x0A	; 10
    2b56:	40 f0       	brcs	.+16     	; 0x2b68 <vfprintf+0xb4>
    2b58:	8e 32       	cpi	r24, 0x2E	; 46
    2b5a:	b9 f4       	brne	.+46     	; 0x2b8a <vfprintf+0xd6>
    2b5c:	36 fc       	sbrc	r3, 6
    2b5e:	81 c1       	rjmp	.+770    	; 0x2e62 <vfprintf+0x3ae>
    2b60:	23 2d       	mov	r18, r3
    2b62:	20 64       	ori	r18, 0x40	; 64
    2b64:	32 2e       	mov	r3, r18
    2b66:	19 c0       	rjmp	.+50     	; 0x2b9a <vfprintf+0xe6>
    2b68:	36 fe       	sbrs	r3, 6
    2b6a:	06 c0       	rjmp	.+12     	; 0x2b78 <vfprintf+0xc4>
    2b6c:	8a e0       	ldi	r24, 0x0A	; 10
    2b6e:	98 9e       	mul	r9, r24
    2b70:	20 0d       	add	r18, r0
    2b72:	11 24       	eor	r1, r1
    2b74:	92 2e       	mov	r9, r18
    2b76:	11 c0       	rjmp	.+34     	; 0x2b9a <vfprintf+0xe6>
    2b78:	ea e0       	ldi	r30, 0x0A	; 10
    2b7a:	2e 9e       	mul	r2, r30
    2b7c:	20 0d       	add	r18, r0
    2b7e:	11 24       	eor	r1, r1
    2b80:	22 2e       	mov	r2, r18
    2b82:	f3 2d       	mov	r31, r3
    2b84:	f0 62       	ori	r31, 0x20	; 32
    2b86:	3f 2e       	mov	r3, r31
    2b88:	08 c0       	rjmp	.+16     	; 0x2b9a <vfprintf+0xe6>
    2b8a:	8c 36       	cpi	r24, 0x6C	; 108
    2b8c:	21 f4       	brne	.+8      	; 0x2b96 <vfprintf+0xe2>
    2b8e:	83 2d       	mov	r24, r3
    2b90:	80 68       	ori	r24, 0x80	; 128
    2b92:	38 2e       	mov	r3, r24
    2b94:	02 c0       	rjmp	.+4      	; 0x2b9a <vfprintf+0xe6>
    2b96:	88 36       	cpi	r24, 0x68	; 104
    2b98:	41 f4       	brne	.+16     	; 0x2baa <vfprintf+0xf6>
    2b9a:	f7 01       	movw	r30, r14
    2b9c:	93 fd       	sbrc	r25, 3
    2b9e:	85 91       	lpm	r24, Z+
    2ba0:	93 ff       	sbrs	r25, 3
    2ba2:	81 91       	ld	r24, Z+
    2ba4:	7f 01       	movw	r14, r30
    2ba6:	81 11       	cpse	r24, r1
    2ba8:	b3 cf       	rjmp	.-154    	; 0x2b10 <vfprintf+0x5c>
    2baa:	98 2f       	mov	r25, r24
    2bac:	9f 7d       	andi	r25, 0xDF	; 223
    2bae:	95 54       	subi	r25, 0x45	; 69
    2bb0:	93 30       	cpi	r25, 0x03	; 3
    2bb2:	28 f4       	brcc	.+10     	; 0x2bbe <vfprintf+0x10a>
    2bb4:	0c 5f       	subi	r16, 0xFC	; 252
    2bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb8:	9f e3       	ldi	r25, 0x3F	; 63
    2bba:	99 83       	std	Y+1, r25	; 0x01
    2bbc:	0d c0       	rjmp	.+26     	; 0x2bd8 <vfprintf+0x124>
    2bbe:	83 36       	cpi	r24, 0x63	; 99
    2bc0:	31 f0       	breq	.+12     	; 0x2bce <vfprintf+0x11a>
    2bc2:	83 37       	cpi	r24, 0x73	; 115
    2bc4:	71 f0       	breq	.+28     	; 0x2be2 <vfprintf+0x12e>
    2bc6:	83 35       	cpi	r24, 0x53	; 83
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <vfprintf+0x118>
    2bca:	59 c0       	rjmp	.+178    	; 0x2c7e <vfprintf+0x1ca>
    2bcc:	21 c0       	rjmp	.+66     	; 0x2c10 <vfprintf+0x15c>
    2bce:	f8 01       	movw	r30, r16
    2bd0:	80 81       	ld	r24, Z
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	0e 5f       	subi	r16, 0xFE	; 254
    2bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd8:	88 24       	eor	r8, r8
    2bda:	83 94       	inc	r8
    2bdc:	91 2c       	mov	r9, r1
    2bde:	53 01       	movw	r10, r6
    2be0:	13 c0       	rjmp	.+38     	; 0x2c08 <vfprintf+0x154>
    2be2:	28 01       	movw	r4, r16
    2be4:	f2 e0       	ldi	r31, 0x02	; 2
    2be6:	4f 0e       	add	r4, r31
    2be8:	51 1c       	adc	r5, r1
    2bea:	f8 01       	movw	r30, r16
    2bec:	a0 80       	ld	r10, Z
    2bee:	b1 80       	ldd	r11, Z+1	; 0x01
    2bf0:	36 fe       	sbrs	r3, 6
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <vfprintf+0x146>
    2bf4:	69 2d       	mov	r22, r9
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <vfprintf+0x14a>
    2bfa:	6f ef       	ldi	r22, 0xFF	; 255
    2bfc:	7f ef       	ldi	r23, 0xFF	; 255
    2bfe:	c5 01       	movw	r24, r10
    2c00:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <strnlen>
    2c04:	4c 01       	movw	r8, r24
    2c06:	82 01       	movw	r16, r4
    2c08:	f3 2d       	mov	r31, r3
    2c0a:	ff 77       	andi	r31, 0x7F	; 127
    2c0c:	3f 2e       	mov	r3, r31
    2c0e:	16 c0       	rjmp	.+44     	; 0x2c3c <vfprintf+0x188>
    2c10:	28 01       	movw	r4, r16
    2c12:	22 e0       	ldi	r18, 0x02	; 2
    2c14:	42 0e       	add	r4, r18
    2c16:	51 1c       	adc	r5, r1
    2c18:	f8 01       	movw	r30, r16
    2c1a:	a0 80       	ld	r10, Z
    2c1c:	b1 80       	ldd	r11, Z+1	; 0x01
    2c1e:	36 fe       	sbrs	r3, 6
    2c20:	03 c0       	rjmp	.+6      	; 0x2c28 <vfprintf+0x174>
    2c22:	69 2d       	mov	r22, r9
    2c24:	70 e0       	ldi	r23, 0x00	; 0
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <vfprintf+0x178>
    2c28:	6f ef       	ldi	r22, 0xFF	; 255
    2c2a:	7f ef       	ldi	r23, 0xFF	; 255
    2c2c:	c5 01       	movw	r24, r10
    2c2e:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <strnlen_P>
    2c32:	4c 01       	movw	r8, r24
    2c34:	f3 2d       	mov	r31, r3
    2c36:	f0 68       	ori	r31, 0x80	; 128
    2c38:	3f 2e       	mov	r3, r31
    2c3a:	82 01       	movw	r16, r4
    2c3c:	33 fc       	sbrc	r3, 3
    2c3e:	1b c0       	rjmp	.+54     	; 0x2c76 <vfprintf+0x1c2>
    2c40:	82 2d       	mov	r24, r2
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	88 16       	cp	r8, r24
    2c46:	99 06       	cpc	r9, r25
    2c48:	b0 f4       	brcc	.+44     	; 0x2c76 <vfprintf+0x1c2>
    2c4a:	b6 01       	movw	r22, r12
    2c4c:	80 e2       	ldi	r24, 0x20	; 32
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <fputc>
    2c54:	2a 94       	dec	r2
    2c56:	f4 cf       	rjmp	.-24     	; 0x2c40 <vfprintf+0x18c>
    2c58:	f5 01       	movw	r30, r10
    2c5a:	37 fc       	sbrc	r3, 7
    2c5c:	85 91       	lpm	r24, Z+
    2c5e:	37 fe       	sbrs	r3, 7
    2c60:	81 91       	ld	r24, Z+
    2c62:	5f 01       	movw	r10, r30
    2c64:	b6 01       	movw	r22, r12
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <fputc>
    2c6c:	21 10       	cpse	r2, r1
    2c6e:	2a 94       	dec	r2
    2c70:	21 e0       	ldi	r18, 0x01	; 1
    2c72:	82 1a       	sub	r8, r18
    2c74:	91 08       	sbc	r9, r1
    2c76:	81 14       	cp	r8, r1
    2c78:	91 04       	cpc	r9, r1
    2c7a:	71 f7       	brne	.-36     	; 0x2c58 <vfprintf+0x1a4>
    2c7c:	e8 c0       	rjmp	.+464    	; 0x2e4e <vfprintf+0x39a>
    2c7e:	84 36       	cpi	r24, 0x64	; 100
    2c80:	11 f0       	breq	.+4      	; 0x2c86 <vfprintf+0x1d2>
    2c82:	89 36       	cpi	r24, 0x69	; 105
    2c84:	41 f5       	brne	.+80     	; 0x2cd6 <vfprintf+0x222>
    2c86:	f8 01       	movw	r30, r16
    2c88:	37 fe       	sbrs	r3, 7
    2c8a:	07 c0       	rjmp	.+14     	; 0x2c9a <vfprintf+0x1e6>
    2c8c:	60 81       	ld	r22, Z
    2c8e:	71 81       	ldd	r23, Z+1	; 0x01
    2c90:	82 81       	ldd	r24, Z+2	; 0x02
    2c92:	93 81       	ldd	r25, Z+3	; 0x03
    2c94:	0c 5f       	subi	r16, 0xFC	; 252
    2c96:	1f 4f       	sbci	r17, 0xFF	; 255
    2c98:	08 c0       	rjmp	.+16     	; 0x2caa <vfprintf+0x1f6>
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	07 2e       	mov	r0, r23
    2ca0:	00 0c       	add	r0, r0
    2ca2:	88 0b       	sbc	r24, r24
    2ca4:	99 0b       	sbc	r25, r25
    2ca6:	0e 5f       	subi	r16, 0xFE	; 254
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	f3 2d       	mov	r31, r3
    2cac:	ff 76       	andi	r31, 0x6F	; 111
    2cae:	3f 2e       	mov	r3, r31
    2cb0:	97 ff       	sbrs	r25, 7
    2cb2:	09 c0       	rjmp	.+18     	; 0x2cc6 <vfprintf+0x212>
    2cb4:	90 95       	com	r25
    2cb6:	80 95       	com	r24
    2cb8:	70 95       	com	r23
    2cba:	61 95       	neg	r22
    2cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc2:	f0 68       	ori	r31, 0x80	; 128
    2cc4:	3f 2e       	mov	r3, r31
    2cc6:	2a e0       	ldi	r18, 0x0A	; 10
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	a3 01       	movw	r20, r6
    2ccc:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__ultoa_invert>
    2cd0:	88 2e       	mov	r8, r24
    2cd2:	86 18       	sub	r8, r6
    2cd4:	45 c0       	rjmp	.+138    	; 0x2d60 <vfprintf+0x2ac>
    2cd6:	85 37       	cpi	r24, 0x75	; 117
    2cd8:	31 f4       	brne	.+12     	; 0x2ce6 <vfprintf+0x232>
    2cda:	23 2d       	mov	r18, r3
    2cdc:	2f 7e       	andi	r18, 0xEF	; 239
    2cde:	b2 2e       	mov	r11, r18
    2ce0:	2a e0       	ldi	r18, 0x0A	; 10
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	25 c0       	rjmp	.+74     	; 0x2d30 <vfprintf+0x27c>
    2ce6:	93 2d       	mov	r25, r3
    2ce8:	99 7f       	andi	r25, 0xF9	; 249
    2cea:	b9 2e       	mov	r11, r25
    2cec:	8f 36       	cpi	r24, 0x6F	; 111
    2cee:	c1 f0       	breq	.+48     	; 0x2d20 <vfprintf+0x26c>
    2cf0:	18 f4       	brcc	.+6      	; 0x2cf8 <vfprintf+0x244>
    2cf2:	88 35       	cpi	r24, 0x58	; 88
    2cf4:	79 f0       	breq	.+30     	; 0x2d14 <vfprintf+0x260>
    2cf6:	b5 c0       	rjmp	.+362    	; 0x2e62 <vfprintf+0x3ae>
    2cf8:	80 37       	cpi	r24, 0x70	; 112
    2cfa:	19 f0       	breq	.+6      	; 0x2d02 <vfprintf+0x24e>
    2cfc:	88 37       	cpi	r24, 0x78	; 120
    2cfe:	21 f0       	breq	.+8      	; 0x2d08 <vfprintf+0x254>
    2d00:	b0 c0       	rjmp	.+352    	; 0x2e62 <vfprintf+0x3ae>
    2d02:	e9 2f       	mov	r30, r25
    2d04:	e0 61       	ori	r30, 0x10	; 16
    2d06:	be 2e       	mov	r11, r30
    2d08:	b4 fe       	sbrs	r11, 4
    2d0a:	0d c0       	rjmp	.+26     	; 0x2d26 <vfprintf+0x272>
    2d0c:	fb 2d       	mov	r31, r11
    2d0e:	f4 60       	ori	r31, 0x04	; 4
    2d10:	bf 2e       	mov	r11, r31
    2d12:	09 c0       	rjmp	.+18     	; 0x2d26 <vfprintf+0x272>
    2d14:	34 fe       	sbrs	r3, 4
    2d16:	0a c0       	rjmp	.+20     	; 0x2d2c <vfprintf+0x278>
    2d18:	29 2f       	mov	r18, r25
    2d1a:	26 60       	ori	r18, 0x06	; 6
    2d1c:	b2 2e       	mov	r11, r18
    2d1e:	06 c0       	rjmp	.+12     	; 0x2d2c <vfprintf+0x278>
    2d20:	28 e0       	ldi	r18, 0x08	; 8
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	05 c0       	rjmp	.+10     	; 0x2d30 <vfprintf+0x27c>
    2d26:	20 e1       	ldi	r18, 0x10	; 16
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <vfprintf+0x27c>
    2d2c:	20 e1       	ldi	r18, 0x10	; 16
    2d2e:	32 e0       	ldi	r19, 0x02	; 2
    2d30:	f8 01       	movw	r30, r16
    2d32:	b7 fe       	sbrs	r11, 7
    2d34:	07 c0       	rjmp	.+14     	; 0x2d44 <vfprintf+0x290>
    2d36:	60 81       	ld	r22, Z
    2d38:	71 81       	ldd	r23, Z+1	; 0x01
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	93 81       	ldd	r25, Z+3	; 0x03
    2d3e:	0c 5f       	subi	r16, 0xFC	; 252
    2d40:	1f 4f       	sbci	r17, 0xFF	; 255
    2d42:	06 c0       	rjmp	.+12     	; 0x2d50 <vfprintf+0x29c>
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 5f       	subi	r16, 0xFE	; 254
    2d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d50:	a3 01       	movw	r20, r6
    2d52:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__ultoa_invert>
    2d56:	88 2e       	mov	r8, r24
    2d58:	86 18       	sub	r8, r6
    2d5a:	fb 2d       	mov	r31, r11
    2d5c:	ff 77       	andi	r31, 0x7F	; 127
    2d5e:	3f 2e       	mov	r3, r31
    2d60:	36 fe       	sbrs	r3, 6
    2d62:	0d c0       	rjmp	.+26     	; 0x2d7e <vfprintf+0x2ca>
    2d64:	23 2d       	mov	r18, r3
    2d66:	2e 7f       	andi	r18, 0xFE	; 254
    2d68:	a2 2e       	mov	r10, r18
    2d6a:	89 14       	cp	r8, r9
    2d6c:	58 f4       	brcc	.+22     	; 0x2d84 <vfprintf+0x2d0>
    2d6e:	34 fe       	sbrs	r3, 4
    2d70:	0b c0       	rjmp	.+22     	; 0x2d88 <vfprintf+0x2d4>
    2d72:	32 fc       	sbrc	r3, 2
    2d74:	09 c0       	rjmp	.+18     	; 0x2d88 <vfprintf+0x2d4>
    2d76:	83 2d       	mov	r24, r3
    2d78:	8e 7e       	andi	r24, 0xEE	; 238
    2d7a:	a8 2e       	mov	r10, r24
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <vfprintf+0x2d4>
    2d7e:	b8 2c       	mov	r11, r8
    2d80:	a3 2c       	mov	r10, r3
    2d82:	03 c0       	rjmp	.+6      	; 0x2d8a <vfprintf+0x2d6>
    2d84:	b8 2c       	mov	r11, r8
    2d86:	01 c0       	rjmp	.+2      	; 0x2d8a <vfprintf+0x2d6>
    2d88:	b9 2c       	mov	r11, r9
    2d8a:	a4 fe       	sbrs	r10, 4
    2d8c:	0f c0       	rjmp	.+30     	; 0x2dac <vfprintf+0x2f8>
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e8 0d       	add	r30, r8
    2d92:	f1 1d       	adc	r31, r1
    2d94:	80 81       	ld	r24, Z
    2d96:	80 33       	cpi	r24, 0x30	; 48
    2d98:	21 f4       	brne	.+8      	; 0x2da2 <vfprintf+0x2ee>
    2d9a:	9a 2d       	mov	r25, r10
    2d9c:	99 7e       	andi	r25, 0xE9	; 233
    2d9e:	a9 2e       	mov	r10, r25
    2da0:	09 c0       	rjmp	.+18     	; 0x2db4 <vfprintf+0x300>
    2da2:	a2 fe       	sbrs	r10, 2
    2da4:	06 c0       	rjmp	.+12     	; 0x2db2 <vfprintf+0x2fe>
    2da6:	b3 94       	inc	r11
    2da8:	b3 94       	inc	r11
    2daa:	04 c0       	rjmp	.+8      	; 0x2db4 <vfprintf+0x300>
    2dac:	8a 2d       	mov	r24, r10
    2dae:	86 78       	andi	r24, 0x86	; 134
    2db0:	09 f0       	breq	.+2      	; 0x2db4 <vfprintf+0x300>
    2db2:	b3 94       	inc	r11
    2db4:	a3 fc       	sbrc	r10, 3
    2db6:	11 c0       	rjmp	.+34     	; 0x2dda <vfprintf+0x326>
    2db8:	a0 fe       	sbrs	r10, 0
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <vfprintf+0x314>
    2dbc:	b2 14       	cp	r11, r2
    2dbe:	88 f4       	brcc	.+34     	; 0x2de2 <vfprintf+0x32e>
    2dc0:	28 0c       	add	r2, r8
    2dc2:	92 2c       	mov	r9, r2
    2dc4:	9b 18       	sub	r9, r11
    2dc6:	0e c0       	rjmp	.+28     	; 0x2de4 <vfprintf+0x330>
    2dc8:	b2 14       	cp	r11, r2
    2dca:	60 f4       	brcc	.+24     	; 0x2de4 <vfprintf+0x330>
    2dcc:	b6 01       	movw	r22, r12
    2dce:	80 e2       	ldi	r24, 0x20	; 32
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <fputc>
    2dd6:	b3 94       	inc	r11
    2dd8:	f7 cf       	rjmp	.-18     	; 0x2dc8 <vfprintf+0x314>
    2dda:	b2 14       	cp	r11, r2
    2ddc:	18 f4       	brcc	.+6      	; 0x2de4 <vfprintf+0x330>
    2dde:	2b 18       	sub	r2, r11
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <vfprintf+0x332>
    2de2:	98 2c       	mov	r9, r8
    2de4:	21 2c       	mov	r2, r1
    2de6:	a4 fe       	sbrs	r10, 4
    2de8:	10 c0       	rjmp	.+32     	; 0x2e0a <vfprintf+0x356>
    2dea:	b6 01       	movw	r22, r12
    2dec:	80 e3       	ldi	r24, 0x30	; 48
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <fputc>
    2df4:	a2 fe       	sbrs	r10, 2
    2df6:	17 c0       	rjmp	.+46     	; 0x2e26 <vfprintf+0x372>
    2df8:	a1 fc       	sbrc	r10, 1
    2dfa:	03 c0       	rjmp	.+6      	; 0x2e02 <vfprintf+0x34e>
    2dfc:	88 e7       	ldi	r24, 0x78	; 120
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <vfprintf+0x352>
    2e02:	88 e5       	ldi	r24, 0x58	; 88
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	b6 01       	movw	r22, r12
    2e08:	0c c0       	rjmp	.+24     	; 0x2e22 <vfprintf+0x36e>
    2e0a:	8a 2d       	mov	r24, r10
    2e0c:	86 78       	andi	r24, 0x86	; 134
    2e0e:	59 f0       	breq	.+22     	; 0x2e26 <vfprintf+0x372>
    2e10:	a1 fe       	sbrs	r10, 1
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <vfprintf+0x364>
    2e14:	8b e2       	ldi	r24, 0x2B	; 43
    2e16:	01 c0       	rjmp	.+2      	; 0x2e1a <vfprintf+0x366>
    2e18:	80 e2       	ldi	r24, 0x20	; 32
    2e1a:	a7 fc       	sbrc	r10, 7
    2e1c:	8d e2       	ldi	r24, 0x2D	; 45
    2e1e:	b6 01       	movw	r22, r12
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <fputc>
    2e26:	89 14       	cp	r8, r9
    2e28:	38 f4       	brcc	.+14     	; 0x2e38 <vfprintf+0x384>
    2e2a:	b6 01       	movw	r22, r12
    2e2c:	80 e3       	ldi	r24, 0x30	; 48
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <fputc>
    2e34:	9a 94       	dec	r9
    2e36:	f7 cf       	rjmp	.-18     	; 0x2e26 <vfprintf+0x372>
    2e38:	8a 94       	dec	r8
    2e3a:	f3 01       	movw	r30, r6
    2e3c:	e8 0d       	add	r30, r8
    2e3e:	f1 1d       	adc	r31, r1
    2e40:	80 81       	ld	r24, Z
    2e42:	b6 01       	movw	r22, r12
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <fputc>
    2e4a:	81 10       	cpse	r8, r1
    2e4c:	f5 cf       	rjmp	.-22     	; 0x2e38 <vfprintf+0x384>
    2e4e:	22 20       	and	r2, r2
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <vfprintf+0x3a0>
    2e52:	42 ce       	rjmp	.-892    	; 0x2ad8 <vfprintf+0x24>
    2e54:	b6 01       	movw	r22, r12
    2e56:	80 e2       	ldi	r24, 0x20	; 32
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <fputc>
    2e5e:	2a 94       	dec	r2
    2e60:	f6 cf       	rjmp	.-20     	; 0x2e4e <vfprintf+0x39a>
    2e62:	f6 01       	movw	r30, r12
    2e64:	86 81       	ldd	r24, Z+6	; 0x06
    2e66:	97 81       	ldd	r25, Z+7	; 0x07
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <vfprintf+0x3ba>
    2e6a:	8f ef       	ldi	r24, 0xFF	; 255
    2e6c:	9f ef       	ldi	r25, 0xFF	; 255
    2e6e:	2b 96       	adiw	r28, 0x0b	; 11
    2e70:	e2 e1       	ldi	r30, 0x12	; 18
    2e72:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__>

00002e76 <strnlen_P>:
    2e76:	fc 01       	movw	r30, r24
    2e78:	05 90       	lpm	r0, Z+
    2e7a:	61 50       	subi	r22, 0x01	; 1
    2e7c:	70 40       	sbci	r23, 0x00	; 0
    2e7e:	01 10       	cpse	r0, r1
    2e80:	d8 f7       	brcc	.-10     	; 0x2e78 <strnlen_P+0x2>
    2e82:	80 95       	com	r24
    2e84:	90 95       	com	r25
    2e86:	8e 0f       	add	r24, r30
    2e88:	9f 1f       	adc	r25, r31
    2e8a:	08 95       	ret

00002e8c <strnlen>:
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	61 50       	subi	r22, 0x01	; 1
    2e90:	70 40       	sbci	r23, 0x00	; 0
    2e92:	01 90       	ld	r0, Z+
    2e94:	01 10       	cpse	r0, r1
    2e96:	d8 f7       	brcc	.-10     	; 0x2e8e <strnlen+0x2>
    2e98:	80 95       	com	r24
    2e9a:	90 95       	com	r25
    2e9c:	8e 0f       	add	r24, r30
    2e9e:	9f 1f       	adc	r25, r31
    2ea0:	08 95       	ret

00002ea2 <fputc>:
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	fb 01       	movw	r30, r22
    2eac:	23 81       	ldd	r18, Z+3	; 0x03
    2eae:	21 fd       	sbrc	r18, 1
    2eb0:	03 c0       	rjmp	.+6      	; 0x2eb8 <fputc+0x16>
    2eb2:	8f ef       	ldi	r24, 0xFF	; 255
    2eb4:	9f ef       	ldi	r25, 0xFF	; 255
    2eb6:	2c c0       	rjmp	.+88     	; 0x2f10 <fputc+0x6e>
    2eb8:	22 ff       	sbrs	r18, 2
    2eba:	16 c0       	rjmp	.+44     	; 0x2ee8 <fputc+0x46>
    2ebc:	46 81       	ldd	r20, Z+6	; 0x06
    2ebe:	57 81       	ldd	r21, Z+7	; 0x07
    2ec0:	24 81       	ldd	r18, Z+4	; 0x04
    2ec2:	35 81       	ldd	r19, Z+5	; 0x05
    2ec4:	42 17       	cp	r20, r18
    2ec6:	53 07       	cpc	r21, r19
    2ec8:	44 f4       	brge	.+16     	; 0x2eda <fputc+0x38>
    2eca:	a0 81       	ld	r26, Z
    2ecc:	b1 81       	ldd	r27, Z+1	; 0x01
    2ece:	9d 01       	movw	r18, r26
    2ed0:	2f 5f       	subi	r18, 0xFF	; 255
    2ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed4:	31 83       	std	Z+1, r19	; 0x01
    2ed6:	20 83       	st	Z, r18
    2ed8:	8c 93       	st	X, r24
    2eda:	26 81       	ldd	r18, Z+6	; 0x06
    2edc:	37 81       	ldd	r19, Z+7	; 0x07
    2ede:	2f 5f       	subi	r18, 0xFF	; 255
    2ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee2:	37 83       	std	Z+7, r19	; 0x07
    2ee4:	26 83       	std	Z+6, r18	; 0x06
    2ee6:	14 c0       	rjmp	.+40     	; 0x2f10 <fputc+0x6e>
    2ee8:	8b 01       	movw	r16, r22
    2eea:	ec 01       	movw	r28, r24
    2eec:	fb 01       	movw	r30, r22
    2eee:	00 84       	ldd	r0, Z+8	; 0x08
    2ef0:	f1 85       	ldd	r31, Z+9	; 0x09
    2ef2:	e0 2d       	mov	r30, r0
    2ef4:	09 95       	icall
    2ef6:	89 2b       	or	r24, r25
    2ef8:	e1 f6       	brne	.-72     	; 0x2eb2 <fputc+0x10>
    2efa:	d8 01       	movw	r26, r16
    2efc:	16 96       	adiw	r26, 0x06	; 6
    2efe:	8d 91       	ld	r24, X+
    2f00:	9c 91       	ld	r25, X
    2f02:	17 97       	sbiw	r26, 0x07	; 7
    2f04:	01 96       	adiw	r24, 0x01	; 1
    2f06:	17 96       	adiw	r26, 0x07	; 7
    2f08:	9c 93       	st	X, r25
    2f0a:	8e 93       	st	-X, r24
    2f0c:	16 97       	sbiw	r26, 0x06	; 6
    2f0e:	ce 01       	movw	r24, r28
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	08 95       	ret

00002f1a <__ultoa_invert>:
    2f1a:	fa 01       	movw	r30, r20
    2f1c:	aa 27       	eor	r26, r26
    2f1e:	28 30       	cpi	r18, 0x08	; 8
    2f20:	51 f1       	breq	.+84     	; 0x2f76 <__ultoa_invert+0x5c>
    2f22:	20 31       	cpi	r18, 0x10	; 16
    2f24:	81 f1       	breq	.+96     	; 0x2f86 <__ultoa_invert+0x6c>
    2f26:	e8 94       	clt
    2f28:	6f 93       	push	r22
    2f2a:	6e 7f       	andi	r22, 0xFE	; 254
    2f2c:	6e 5f       	subi	r22, 0xFE	; 254
    2f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f30:	8f 4f       	sbci	r24, 0xFF	; 255
    2f32:	9f 4f       	sbci	r25, 0xFF	; 255
    2f34:	af 4f       	sbci	r26, 0xFF	; 255
    2f36:	b1 e0       	ldi	r27, 0x01	; 1
    2f38:	3e d0       	rcall	.+124    	; 0x2fb6 <__ultoa_invert+0x9c>
    2f3a:	b4 e0       	ldi	r27, 0x04	; 4
    2f3c:	3c d0       	rcall	.+120    	; 0x2fb6 <__ultoa_invert+0x9c>
    2f3e:	67 0f       	add	r22, r23
    2f40:	78 1f       	adc	r23, r24
    2f42:	89 1f       	adc	r24, r25
    2f44:	9a 1f       	adc	r25, r26
    2f46:	a1 1d       	adc	r26, r1
    2f48:	68 0f       	add	r22, r24
    2f4a:	79 1f       	adc	r23, r25
    2f4c:	8a 1f       	adc	r24, r26
    2f4e:	91 1d       	adc	r25, r1
    2f50:	a1 1d       	adc	r26, r1
    2f52:	6a 0f       	add	r22, r26
    2f54:	71 1d       	adc	r23, r1
    2f56:	81 1d       	adc	r24, r1
    2f58:	91 1d       	adc	r25, r1
    2f5a:	a1 1d       	adc	r26, r1
    2f5c:	20 d0       	rcall	.+64     	; 0x2f9e <__ultoa_invert+0x84>
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <__ultoa_invert+0x48>
    2f60:	68 94       	set
    2f62:	3f 91       	pop	r19
    2f64:	2a e0       	ldi	r18, 0x0A	; 10
    2f66:	26 9f       	mul	r18, r22
    2f68:	11 24       	eor	r1, r1
    2f6a:	30 19       	sub	r19, r0
    2f6c:	30 5d       	subi	r19, 0xD0	; 208
    2f6e:	31 93       	st	Z+, r19
    2f70:	de f6       	brtc	.-74     	; 0x2f28 <__ultoa_invert+0xe>
    2f72:	cf 01       	movw	r24, r30
    2f74:	08 95       	ret
    2f76:	46 2f       	mov	r20, r22
    2f78:	47 70       	andi	r20, 0x07	; 7
    2f7a:	40 5d       	subi	r20, 0xD0	; 208
    2f7c:	41 93       	st	Z+, r20
    2f7e:	b3 e0       	ldi	r27, 0x03	; 3
    2f80:	0f d0       	rcall	.+30     	; 0x2fa0 <__ultoa_invert+0x86>
    2f82:	c9 f7       	brne	.-14     	; 0x2f76 <__ultoa_invert+0x5c>
    2f84:	f6 cf       	rjmp	.-20     	; 0x2f72 <__ultoa_invert+0x58>
    2f86:	46 2f       	mov	r20, r22
    2f88:	4f 70       	andi	r20, 0x0F	; 15
    2f8a:	40 5d       	subi	r20, 0xD0	; 208
    2f8c:	4a 33       	cpi	r20, 0x3A	; 58
    2f8e:	18 f0       	brcs	.+6      	; 0x2f96 <__ultoa_invert+0x7c>
    2f90:	49 5d       	subi	r20, 0xD9	; 217
    2f92:	31 fd       	sbrc	r19, 1
    2f94:	40 52       	subi	r20, 0x20	; 32
    2f96:	41 93       	st	Z+, r20
    2f98:	02 d0       	rcall	.+4      	; 0x2f9e <__ultoa_invert+0x84>
    2f9a:	a9 f7       	brne	.-22     	; 0x2f86 <__ultoa_invert+0x6c>
    2f9c:	ea cf       	rjmp	.-44     	; 0x2f72 <__ultoa_invert+0x58>
    2f9e:	b4 e0       	ldi	r27, 0x04	; 4
    2fa0:	a6 95       	lsr	r26
    2fa2:	97 95       	ror	r25
    2fa4:	87 95       	ror	r24
    2fa6:	77 95       	ror	r23
    2fa8:	67 95       	ror	r22
    2faa:	ba 95       	dec	r27
    2fac:	c9 f7       	brne	.-14     	; 0x2fa0 <__ultoa_invert+0x86>
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	61 05       	cpc	r22, r1
    2fb2:	71 05       	cpc	r23, r1
    2fb4:	08 95       	ret
    2fb6:	9b 01       	movw	r18, r22
    2fb8:	ac 01       	movw	r20, r24
    2fba:	0a 2e       	mov	r0, r26
    2fbc:	06 94       	lsr	r0
    2fbe:	57 95       	ror	r21
    2fc0:	47 95       	ror	r20
    2fc2:	37 95       	ror	r19
    2fc4:	27 95       	ror	r18
    2fc6:	ba 95       	dec	r27
    2fc8:	c9 f7       	brne	.-14     	; 0x2fbc <__ultoa_invert+0xa2>
    2fca:	62 0f       	add	r22, r18
    2fcc:	73 1f       	adc	r23, r19
    2fce:	84 1f       	adc	r24, r20
    2fd0:	95 1f       	adc	r25, r21
    2fd2:	a0 1d       	adc	r26, r0
    2fd4:	08 95       	ret

00002fd6 <__prologue_saves__>:
    2fd6:	2f 92       	push	r2
    2fd8:	3f 92       	push	r3
    2fda:	4f 92       	push	r4
    2fdc:	5f 92       	push	r5
    2fde:	6f 92       	push	r6
    2fe0:	7f 92       	push	r7
    2fe2:	8f 92       	push	r8
    2fe4:	9f 92       	push	r9
    2fe6:	af 92       	push	r10
    2fe8:	bf 92       	push	r11
    2fea:	cf 92       	push	r12
    2fec:	df 92       	push	r13
    2fee:	ef 92       	push	r14
    2ff0:	ff 92       	push	r15
    2ff2:	0f 93       	push	r16
    2ff4:	1f 93       	push	r17
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	ca 1b       	sub	r28, r26
    3000:	db 0b       	sbc	r29, r27
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	09 94       	ijmp

0000300e <__epilogue_restores__>:
    300e:	2a 88       	ldd	r2, Y+18	; 0x12
    3010:	39 88       	ldd	r3, Y+17	; 0x11
    3012:	48 88       	ldd	r4, Y+16	; 0x10
    3014:	5f 84       	ldd	r5, Y+15	; 0x0f
    3016:	6e 84       	ldd	r6, Y+14	; 0x0e
    3018:	7d 84       	ldd	r7, Y+13	; 0x0d
    301a:	8c 84       	ldd	r8, Y+12	; 0x0c
    301c:	9b 84       	ldd	r9, Y+11	; 0x0b
    301e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3020:	b9 84       	ldd	r11, Y+9	; 0x09
    3022:	c8 84       	ldd	r12, Y+8	; 0x08
    3024:	df 80       	ldd	r13, Y+7	; 0x07
    3026:	ee 80       	ldd	r14, Y+6	; 0x06
    3028:	fd 80       	ldd	r15, Y+5	; 0x05
    302a:	0c 81       	ldd	r16, Y+4	; 0x04
    302c:	1b 81       	ldd	r17, Y+3	; 0x03
    302e:	aa 81       	ldd	r26, Y+2	; 0x02
    3030:	b9 81       	ldd	r27, Y+1	; 0x01
    3032:	ce 0f       	add	r28, r30
    3034:	d1 1d       	adc	r29, r1
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	ed 01       	movw	r28, r26
    3042:	08 95       	ret

00003044 <_exit>:
    3044:	f8 94       	cli

00003046 <__stop_program>:
    3046:	ff cf       	rjmp	.-2      	; 0x3046 <__stop_program>
